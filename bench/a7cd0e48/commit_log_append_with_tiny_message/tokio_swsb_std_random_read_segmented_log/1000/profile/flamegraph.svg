<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="114"><g><title>tokio::fs::file::Inner::poll_flush (1 samples, 0.88%)</title><rect x="3.5088%" y="261" width="0.8772%" height="15" fill="rgb(214,87,16)" fg:x="4" fg:w="1"/><text x="3.7588%" y="271.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.88%)</title><rect x="3.5088%" y="245" width="0.8772%" height="15" fill="rgb(208,99,42)" fg:x="4" fg:w="1"/><text x="3.7588%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (1 samples, 0.88%)</title><rect x="3.5088%" y="229" width="0.8772%" height="15" fill="rgb(253,99,2)" fg:x="4" fg:w="1"/><text x="3.7588%" y="239.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt; as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (2 samples, 1.75%)</title><rect x="3.5088%" y="293" width="1.7544%" height="15" fill="rgb(220,168,23)" fg:x="4" fg:w="2"/><text x="3.7588%" y="303.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (2 samples, 1.75%)</title><rect x="3.5088%" y="277" width="1.7544%" height="15" fill="rgb(242,38,24)" fg:x="4" fg:w="2"/><text x="3.7588%" y="287.50"></text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.88%)</title><rect x="4.3860%" y="261" width="0.8772%" height="15" fill="rgb(225,182,9)" fg:x="5" fg:w="1"/><text x="4.6360%" y="271.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.88%)</title><rect x="4.3860%" y="245" width="0.8772%" height="15" fill="rgb(243,178,37)" fg:x="5" fg:w="1"/><text x="4.6360%" y="255.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (3 samples, 2.63%)</title><rect x="3.5088%" y="325" width="2.6316%" height="15" fill="rgb(232,139,19)" fg:x="4" fg:w="3"/><text x="3.7588%" y="335.50">&lt;l..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (3 samples, 2.63%)</title><rect x="3.5088%" y="309" width="2.6316%" height="15" fill="rgb(225,201,24)" fg:x="4" fg:w="3"/><text x="3.7588%" y="319.50">&lt;l..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::store::Store&lt;S,H&gt; as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (1 samples, 0.88%)</title><rect x="5.2632%" y="293" width="0.8772%" height="15" fill="rgb(221,47,46)" fg:x="6" fg:w="1"/><text x="5.5132%" y="303.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (1 samples, 0.88%)</title><rect x="5.2632%" y="277" width="0.8772%" height="15" fill="rgb(249,23,13)" fg:x="6" fg:w="1"/><text x="5.5132%" y="287.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.88%)</title><rect x="5.2632%" y="261" width="0.8772%" height="15" fill="rgb(219,9,5)" fg:x="6" fg:w="1"/><text x="5.5132%" y="271.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.88%)</title><rect x="5.2632%" y="245" width="0.8772%" height="15" fill="rgb(254,171,16)" fg:x="6" fg:w="1"/><text x="5.5132%" y="255.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::finish (2 samples, 1.75%)</title><rect x="13.1579%" y="309" width="1.7544%" height="15" fill="rgb(230,171,20)" fg:x="15" fg:w="2"/><text x="13.4079%" y="319.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorageError as core::convert::From&lt;std::io::error::Error&gt;&gt;::from (5 samples, 4.39%)</title><rect x="14.9123%" y="309" width="4.3860%" height="15" fill="rgb(210,71,41)" fg:x="17" fg:w="5"/><text x="15.1623%" y="319.50">&lt;lami..</text></g><g><title>__libc_free (1 samples, 0.88%)</title><rect x="19.2982%" y="309" width="0.8772%" height="15" fill="rgb(206,173,20)" fg:x="22" fg:w="1"/><text x="19.5482%" y="319.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.88%)</title><rect x="20.1754%" y="309" width="0.8772%" height="15" fill="rgb(233,88,34)" fg:x="23" fg:w="1"/><text x="20.4254%" y="319.50"></text></g><g><title>malloc (1 samples, 0.88%)</title><rect x="20.1754%" y="293" width="0.8772%" height="15" fill="rgb(223,209,46)" fg:x="23" fg:w="1"/><text x="20.4254%" y="303.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (4 samples, 3.51%)</title><rect x="27.1930%" y="293" width="3.5088%" height="15" fill="rgb(250,43,18)" fg:x="31" fg:w="4"/><text x="27.4430%" y="303.50">&lt;cr..</text></g><g><title>crc32fast::baseline::update_fast_16 (3 samples, 2.63%)</title><rect x="28.0702%" y="277" width="2.6316%" height="15" fill="rgb(208,13,10)" fg:x="32" fg:w="3"/><text x="28.3202%" y="287.50">cr..</text></g><g><title>__libc_free (10 samples, 8.77%)</title><rect x="30.7018%" y="293" width="8.7719%" height="15" fill="rgb(212,200,36)" fg:x="35" fg:w="10"/><text x="30.9518%" y="303.50">__libc_free</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (2 samples, 1.75%)</title><rect x="39.4737%" y="293" width="1.7544%" height="15" fill="rgb(225,90,30)" fg:x="45" fg:w="2"/><text x="39.7237%" y="303.50"></text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice::{{closure}} (8 samples, 7.02%)</title><rect x="41.2281%" y="293" width="7.0175%" height="15" fill="rgb(236,182,39)" fg:x="47" fg:w="8"/><text x="41.4781%" y="303.50">laminarmq..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (6 samples, 5.26%)</title><rect x="42.9825%" y="277" width="5.2632%" height="15" fill="rgb(212,144,35)" fg:x="49" fg:w="6"/><text x="43.2325%" y="287.50">&lt;tokio..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.88%)</title><rect x="47.3684%" y="261" width="0.8772%" height="15" fill="rgb(228,63,44)" fg:x="54" fg:w="1"/><text x="47.6184%" y="271.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.88%)</title><rect x="47.3684%" y="245" width="0.8772%" height="15" fill="rgb(228,109,6)" fg:x="54" fg:w="1"/><text x="47.6184%" y="255.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1 samples, 0.88%)</title><rect x="47.3684%" y="229" width="0.8772%" height="15" fill="rgb(238,117,24)" fg:x="54" fg:w="1"/><text x="47.6184%" y="239.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.88%)</title><rect x="47.3684%" y="213" width="0.8772%" height="15" fill="rgb(242,26,26)" fg:x="54" fg:w="1"/><text x="47.6184%" y="223.50"></text></g><g><title>syscall (1 samples, 0.88%)</title><rect x="47.3684%" y="197" width="0.8772%" height="15" fill="rgb(221,92,48)" fg:x="54" fg:w="1"/><text x="47.6184%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.88%)</title><rect x="48.2456%" y="277" width="0.8772%" height="15" fill="rgb(209,209,32)" fg:x="55" fg:w="1"/><text x="48.4956%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.88%)</title><rect x="48.2456%" y="261" width="0.8772%" height="15" fill="rgb(221,70,22)" fg:x="55" fg:w="1"/><text x="48.4956%" y="271.50"></text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (33 samples, 28.95%)</title><rect x="21.0526%" y="309" width="28.9474%" height="15" fill="rgb(248,145,5)" fg:x="24" fg:w="33"/><text x="21.3026%" y="319.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (2 samples, 1.75%)</title><rect x="48.2456%" y="293" width="1.7544%" height="15" fill="rgb(226,116,26)" fg:x="55" fg:w="2"/><text x="48.4956%" y="303.50"></text></g><g><title>malloc (1 samples, 0.88%)</title><rect x="49.1228%" y="277" width="0.8772%" height="15" fill="rgb(244,5,17)" fg:x="56" fg:w="1"/><text x="49.3728%" y="287.50"></text></g><g><title>__libc_free (3 samples, 2.63%)</title><rect x="55.2632%" y="293" width="2.6316%" height="15" fill="rgb(252,159,33)" fg:x="63" fg:w="3"/><text x="55.5132%" y="303.50">__..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (1 samples, 0.88%)</title><rect x="57.8947%" y="293" width="0.8772%" height="15" fill="rgb(206,71,0)" fg:x="66" fg:w="1"/><text x="58.1447%" y="303.50"></text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice::{{closure}} (1 samples, 0.88%)</title><rect x="58.7719%" y="293" width="0.8772%" height="15" fill="rgb(233,118,54)" fg:x="67" fg:w="1"/><text x="59.0219%" y="303.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (1 samples, 0.88%)</title><rect x="58.7719%" y="277" width="0.8772%" height="15" fill="rgb(234,83,48)" fg:x="67" fg:w="1"/><text x="59.0219%" y="287.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt;::append::{{closure}} (12 samples, 10.53%)</title><rect x="50.0000%" y="309" width="10.5263%" height="15" fill="rgb(228,3,54)" fg:x="57" fg:w="12"/><text x="50.2500%" y="319.50">laminarmq::stor..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (1 samples, 0.88%)</title><rect x="59.6491%" y="293" width="0.8772%" height="15" fill="rgb(226,155,13)" fg:x="68" fg:w="1"/><text x="59.8991%" y="303.50"></text></g><g><title>malloc (1 samples, 0.88%)</title><rect x="59.6491%" y="277" width="0.8772%" height="15" fill="rgb(241,28,37)" fg:x="68" fg:w="1"/><text x="59.8991%" y="287.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (64 samples, 56.14%)</title><rect x="6.1404%" y="325" width="56.1404%" height="15" fill="rgb(233,93,10)" fg:x="7" fg:w="64"/><text x="6.3904%" y="335.50">&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::stora..</text></g><g><title>malloc (2 samples, 1.75%)</title><rect x="60.5263%" y="309" width="1.7544%" height="15" fill="rgb(225,113,19)" fg:x="69" fg:w="2"/><text x="60.7763%" y="319.50"></text></g><g><title>__libc_free (6 samples, 5.26%)</title><rect x="62.2807%" y="325" width="5.2632%" height="15" fill="rgb(241,2,18)" fg:x="71" fg:w="6"/><text x="62.5307%" y="335.50">__libc..</text></g><g><title>&lt;laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt; as laminarmq::storage::commit_log::segmented_log::segment::SegmentStorageProvider&lt;S,Idx&gt;&gt;::obtain_base_indices_of_stored_segments::{{closure}} (3 samples, 2.63%)</title><rect x="67.5439%" y="309" width="2.6316%" height="15" fill="rgb(228,207,21)" fg:x="77" fg:w="3"/><text x="67.7939%" y="319.50">&lt;l..</text></g><g><title>std::sys::unix::fs::readdir (3 samples, 2.63%)</title><rect x="67.5439%" y="293" width="2.6316%" height="15" fill="rgb(213,211,35)" fg:x="77" fg:w="3"/><text x="67.7939%" y="303.50">st..</text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 2.63%)</title><rect x="67.5439%" y="277" width="2.6316%" height="15" fill="rgb(209,83,10)" fg:x="77" fg:w="3"/><text x="67.7939%" y="287.50">st..</text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 2.63%)</title><rect x="67.5439%" y="261" width="2.6316%" height="15" fill="rgb(209,164,1)" fg:x="77" fg:w="3"/><text x="67.7939%" y="271.50">st..</text></g><g><title>std::sys::unix::fs::readdir::{{closure}} (3 samples, 2.63%)</title><rect x="67.5439%" y="245" width="2.6316%" height="15" fill="rgb(213,184,43)" fg:x="77" fg:w="3"/><text x="67.7939%" y="255.50">st..</text></g><g><title>opendir (3 samples, 2.63%)</title><rect x="67.5439%" y="229" width="2.6316%" height="15" fill="rgb(231,61,34)" fg:x="77" fg:w="3"/><text x="67.7939%" y="239.50">op..</text></g><g><title>__open64_nocancel (3 samples, 2.63%)</title><rect x="67.5439%" y="213" width="2.6316%" height="15" fill="rgb(235,75,3)" fg:x="77" fg:w="3"/><text x="67.7939%" y="223.50">__..</text></g><g><title>std::path::Path::to_path_buf (1 samples, 0.88%)</title><rect x="70.1754%" y="245" width="0.8772%" height="15" fill="rgb(220,106,47)" fg:x="80" fg:w="1"/><text x="70.4254%" y="255.50"></text></g><g><title>std::ffi::os_str::OsStr::to_os_string (1 samples, 0.88%)</title><rect x="70.1754%" y="229" width="0.8772%" height="15" fill="rgb(210,196,33)" fg:x="80" fg:w="1"/><text x="70.4254%" y="239.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.88%)</title><rect x="70.1754%" y="213" width="0.8772%" height="15" fill="rgb(229,154,42)" fg:x="80" fg:w="1"/><text x="70.4254%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.88%)</title><rect x="70.1754%" y="197" width="0.8772%" height="15" fill="rgb(228,114,26)" fg:x="80" fg:w="1"/><text x="70.4254%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.88%)</title><rect x="70.1754%" y="181" width="0.8772%" height="15" fill="rgb(208,144,1)" fg:x="80" fg:w="1"/><text x="70.4254%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.88%)</title><rect x="70.1754%" y="165" width="0.8772%" height="15" fill="rgb(239,112,37)" fg:x="80" fg:w="1"/><text x="70.4254%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.88%)</title><rect x="70.1754%" y="149" width="0.8772%" height="15" fill="rgb(210,96,50)" fg:x="80" fg:w="1"/><text x="70.4254%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.88%)</title><rect x="70.1754%" y="133" width="0.8772%" height="15" fill="rgb(222,178,2)" fg:x="80" fg:w="1"/><text x="70.4254%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.88%)</title><rect x="70.1754%" y="117" width="0.8772%" height="15" fill="rgb(226,74,18)" fg:x="80" fg:w="1"/><text x="70.4254%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.88%)</title><rect x="70.1754%" y="101" width="0.8772%" height="15" fill="rgb(225,67,54)" fg:x="80" fg:w="1"/><text x="70.4254%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.88%)</title><rect x="70.1754%" y="85" width="0.8772%" height="15" fill="rgb(251,92,32)" fg:x="80" fg:w="1"/><text x="70.4254%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.88%)</title><rect x="70.1754%" y="69" width="0.8772%" height="15" fill="rgb(228,149,22)" fg:x="80" fg:w="1"/><text x="70.4254%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.88%)</title><rect x="70.1754%" y="53" width="0.8772%" height="15" fill="rgb(243,54,13)" fg:x="80" fg:w="1"/><text x="70.4254%" y="63.50"></text></g><g><title>malloc (1 samples, 0.88%)</title><rect x="70.1754%" y="37" width="0.8772%" height="15" fill="rgb(243,180,28)" fg:x="80" fg:w="1"/><text x="70.4254%" y="47.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.88%)</title><rect x="71.0526%" y="213" width="0.8772%" height="15" fill="rgb(208,167,24)" fg:x="81" fg:w="1"/><text x="71.3026%" y="223.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (1 samples, 0.88%)</title><rect x="71.0526%" y="197" width="0.8772%" height="15" fill="rgb(245,73,45)" fg:x="81" fg:w="1"/><text x="71.3026%" y="207.50"></text></g><g><title>std::sys::unix::thread::Thread::new (1 samples, 0.88%)</title><rect x="71.0526%" y="181" width="0.8772%" height="15" fill="rgb(237,203,48)" fg:x="81" fg:w="1"/><text x="71.3026%" y="191.50"></text></g><g><title>pthread_create (1 samples, 0.88%)</title><rect x="71.0526%" y="165" width="0.8772%" height="15" fill="rgb(211,197,16)" fg:x="81" fg:w="1"/><text x="71.3026%" y="175.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt;::new::{{closure}} (6 samples, 5.26%)</title><rect x="67.5439%" y="325" width="5.2632%" height="15" fill="rgb(243,99,51)" fg:x="77" fg:w="6"/><text x="67.7939%" y="335.50">lamina..</text></g><g><title>laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt;::with_segment_storage_provider_config_and_base_index::{{closure}} (3 samples, 2.63%)</title><rect x="70.1754%" y="309" width="2.6316%" height="15" fill="rgb(215,123,29)" fg:x="80" fg:w="3"/><text x="70.4254%" y="319.50">la..</text></g><g><title>&lt;laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt; as laminarmq::storage::commit_log::segmented_log::segment::SegmentStorageProvider&lt;S,Idx&gt;&gt;::obtain::{{closure}} (3 samples, 2.63%)</title><rect x="70.1754%" y="293" width="2.6316%" height="15" fill="rgb(239,186,37)" fg:x="80" fg:w="3"/><text x="70.4254%" y="303.50">&lt;l..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::impls::common::PathAddressedStorageProvider&lt;laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt; for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorageProvider&gt;::obtain_storage::{{closure}} (3 samples, 2.63%)</title><rect x="70.1754%" y="277" width="2.6316%" height="15" fill="rgb(252,136,39)" fg:x="80" fg:w="3"/><text x="70.4254%" y="287.50">la..</text></g><g><title>tokio::fs::open_options::OpenOptions::open::{{closure}} (3 samples, 2.63%)</title><rect x="70.1754%" y="261" width="2.6316%" height="15" fill="rgb(223,213,32)" fg:x="80" fg:w="3"/><text x="70.4254%" y="271.50">to..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 1.75%)</title><rect x="71.0526%" y="245" width="1.7544%" height="15" fill="rgb(233,115,5)" fg:x="81" fg:w="2"/><text x="71.3026%" y="255.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 1.75%)</title><rect x="71.0526%" y="229" width="1.7544%" height="15" fill="rgb(207,226,44)" fg:x="81" fg:w="2"/><text x="71.3026%" y="239.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (1 samples, 0.88%)</title><rect x="71.9298%" y="213" width="0.8772%" height="15" fill="rgb(208,126,0)" fg:x="82" fg:w="1"/><text x="72.1798%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.88%)</title><rect x="71.9298%" y="197" width="0.8772%" height="15" fill="rgb(244,66,21)" fg:x="82" fg:w="1"/><text x="72.1798%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.88%)</title><rect x="71.9298%" y="181" width="0.8772%" height="15" fill="rgb(222,97,12)" fg:x="82" fg:w="1"/><text x="72.1798%" y="191.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.88%)</title><rect x="71.9298%" y="165" width="0.8772%" height="15" fill="rgb(219,213,19)" fg:x="82" fg:w="1"/><text x="72.1798%" y="175.50"></text></g><g><title>posix_memalign (1 samples, 0.88%)</title><rect x="71.9298%" y="149" width="0.8772%" height="15" fill="rgb(252,169,30)" fg:x="82" fg:w="1"/><text x="72.1798%" y="159.50"></text></g><g><title>commit_log_append::time_tokio_std_random_read_segmented_log::{{closure}} (90 samples, 78.95%)</title><rect x="0.8772%" y="341" width="78.9474%" height="15" fill="rgb(206,32,51)" fg:x="1" fg:w="90"/><text x="1.1272%" y="351.50">commit_log_append::time_tokio_std_random_read_segmented_log::{{closure}}</text></g><g><title>malloc (8 samples, 7.02%)</title><rect x="72.8070%" y="325" width="7.0175%" height="15" fill="rgb(250,172,42)" fg:x="83" fg:w="8"/><text x="73.0570%" y="335.50">malloc</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.88%)</title><rect x="79.8246%" y="341" width="0.8772%" height="15" fill="rgb(209,34,43)" fg:x="91" fg:w="1"/><text x="80.0746%" y="351.50"></text></g><g><title>clock_gettime (1 samples, 0.88%)</title><rect x="79.8246%" y="325" width="0.8772%" height="15" fill="rgb(223,11,35)" fg:x="91" fg:w="1"/><text x="80.0746%" y="335.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (92 samples, 80.70%)</title><rect x="0.8772%" y="405" width="80.7018%" height="15" fill="rgb(251,219,26)" fg:x="1" fg:w="92"/><text x="1.1272%" y="415.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (92 samples, 80.70%)</title><rect x="0.8772%" y="389" width="80.7018%" height="15" fill="rgb(231,119,3)" fg:x="1" fg:w="92"/><text x="1.1272%" y="399.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (92 samples, 80.70%)</title><rect x="0.8772%" y="373" width="80.7018%" height="15" fill="rgb(216,97,11)" fg:x="1" fg:w="92"/><text x="1.1272%" y="383.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (92 samples, 80.70%)</title><rect x="0.8772%" y="357" width="80.7018%" height="15" fill="rgb(223,59,9)" fg:x="1" fg:w="92"/><text x="1.1272%" y="367.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.88%)</title><rect x="80.7018%" y="341" width="0.8772%" height="15" fill="rgb(233,93,31)" fg:x="92" fg:w="1"/><text x="80.9518%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (1 samples, 0.88%)</title><rect x="80.7018%" y="325" width="0.8772%" height="15" fill="rgb(239,81,33)" fg:x="92" fg:w="1"/><text x="80.9518%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (1 samples, 0.88%)</title><rect x="80.7018%" y="309" width="0.8772%" height="15" fill="rgb(213,120,34)" fg:x="92" fg:w="1"/><text x="80.9518%" y="319.50"></text></g><g><title>std::sys::unix::futex::futex_wait (1 samples, 0.88%)</title><rect x="80.7018%" y="293" width="0.8772%" height="15" fill="rgb(243,49,53)" fg:x="92" fg:w="1"/><text x="80.9518%" y="303.50"></text></g><g><title>syscall (1 samples, 0.88%)</title><rect x="80.7018%" y="277" width="0.8772%" height="15" fill="rgb(247,216,33)" fg:x="92" fg:w="1"/><text x="80.9518%" y="287.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.88%)</title><rect x="81.5789%" y="389" width="0.8772%" height="15" fill="rgb(226,26,14)" fg:x="93" fg:w="1"/><text x="81.8289%" y="399.50"></text></g><g><title>std::sys::unix::thread::Thread::join (1 samples, 0.88%)</title><rect x="81.5789%" y="373" width="0.8772%" height="15" fill="rgb(215,49,53)" fg:x="93" fg:w="1"/><text x="81.8289%" y="383.50"></text></g><g><title>tokio::runtime::blocking::pool::BlockingPool::shutdown (3 samples, 2.63%)</title><rect x="81.5789%" y="405" width="2.6316%" height="15" fill="rgb(245,162,40)" fg:x="93" fg:w="3"/><text x="81.8289%" y="415.50">to..</text></g><g><title>tokio::runtime::blocking::shutdown::Receiver::wait (2 samples, 1.75%)</title><rect x="82.4561%" y="389" width="1.7544%" height="15" fill="rgb(229,68,17)" fg:x="94" fg:w="2"/><text x="82.7061%" y="399.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (2 samples, 1.75%)</title><rect x="82.4561%" y="373" width="1.7544%" height="15" fill="rgb(213,182,10)" fg:x="94" fg:w="2"/><text x="82.7061%" y="383.50"></text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 1.75%)</title><rect x="82.4561%" y="357" width="1.7544%" height="15" fill="rgb(245,125,30)" fg:x="94" fg:w="2"/><text x="82.7061%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (2 samples, 1.75%)</title><rect x="82.4561%" y="341" width="1.7544%" height="15" fill="rgb(232,202,2)" fg:x="94" fg:w="2"/><text x="82.7061%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (2 samples, 1.75%)</title><rect x="82.4561%" y="325" width="1.7544%" height="15" fill="rgb(237,140,51)" fg:x="94" fg:w="2"/><text x="82.7061%" y="335.50"></text></g><g><title>std::sys::unix::futex::futex_wait (2 samples, 1.75%)</title><rect x="82.4561%" y="309" width="1.7544%" height="15" fill="rgb(236,157,25)" fg:x="94" fg:w="2"/><text x="82.7061%" y="319.50"></text></g><g><title>syscall (2 samples, 1.75%)</title><rect x="82.4561%" y="293" width="1.7544%" height="15" fill="rgb(219,209,0)" fg:x="94" fg:w="2"/><text x="82.7061%" y="303.50"></text></g><g><title>_start (98 samples, 85.96%)</title><rect x="0.8772%" y="693" width="85.9649%" height="15" fill="rgb(240,116,54)" fg:x="1" fg:w="98"/><text x="1.1272%" y="703.50">_start</text></g><g><title>__libc_start_main (98 samples, 85.96%)</title><rect x="0.8772%" y="677" width="85.9649%" height="15" fill="rgb(216,10,36)" fg:x="1" fg:w="98"/><text x="1.1272%" y="687.50">__libc_start_main</text></g><g><title>main (98 samples, 85.96%)</title><rect x="0.8772%" y="661" width="85.9649%" height="15" fill="rgb(222,72,44)" fg:x="1" fg:w="98"/><text x="1.1272%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (98 samples, 85.96%)</title><rect x="0.8772%" y="645" width="85.9649%" height="15" fill="rgb(232,159,9)" fg:x="1" fg:w="98"/><text x="1.1272%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (98 samples, 85.96%)</title><rect x="0.8772%" y="629" width="85.9649%" height="15" fill="rgb(210,39,32)" fg:x="1" fg:w="98"/><text x="1.1272%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (98 samples, 85.96%)</title><rect x="0.8772%" y="613" width="85.9649%" height="15" fill="rgb(216,194,45)" fg:x="1" fg:w="98"/><text x="1.1272%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (98 samples, 85.96%)</title><rect x="0.8772%" y="597" width="85.9649%" height="15" fill="rgb(218,18,35)" fg:x="1" fg:w="98"/><text x="1.1272%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (98 samples, 85.96%)</title><rect x="0.8772%" y="581" width="85.9649%" height="15" fill="rgb(207,83,51)" fg:x="1" fg:w="98"/><text x="1.1272%" y="591.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (98 samples, 85.96%)</title><rect x="0.8772%" y="565" width="85.9649%" height="15" fill="rgb(225,63,43)" fg:x="1" fg:w="98"/><text x="1.1272%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (98 samples, 85.96%)</title><rect x="0.8772%" y="549" width="85.9649%" height="15" fill="rgb(207,57,36)" fg:x="1" fg:w="98"/><text x="1.1272%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (98 samples, 85.96%)</title><rect x="0.8772%" y="533" width="85.9649%" height="15" fill="rgb(216,99,33)" fg:x="1" fg:w="98"/><text x="1.1272%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (98 samples, 85.96%)</title><rect x="0.8772%" y="517" width="85.9649%" height="15" fill="rgb(225,42,16)" fg:x="1" fg:w="98"/><text x="1.1272%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (98 samples, 85.96%)</title><rect x="0.8772%" y="501" width="85.9649%" height="15" fill="rgb(220,201,45)" fg:x="1" fg:w="98"/><text x="1.1272%" y="511.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (98 samples, 85.96%)</title><rect x="0.8772%" y="485" width="85.9649%" height="15" fill="rgb(225,33,4)" fg:x="1" fg:w="98"/><text x="1.1272%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>commit_log_append::main (98 samples, 85.96%)</title><rect x="0.8772%" y="469" width="85.9649%" height="15" fill="rgb(224,33,50)" fg:x="1" fg:w="98"/><text x="1.1272%" y="479.50">commit_log_append::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (98 samples, 85.96%)</title><rect x="0.8772%" y="453" width="85.9649%" height="15" fill="rgb(246,198,51)" fg:x="1" fg:w="98"/><text x="1.1272%" y="463.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (98 samples, 85.96%)</title><rect x="0.8772%" y="437" width="85.9649%" height="15" fill="rgb(205,22,4)" fg:x="1" fg:w="98"/><text x="1.1272%" y="447.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (98 samples, 85.96%)</title><rect x="0.8772%" y="421" width="85.9649%" height="15" fill="rgb(206,3,8)" fg:x="1" fg:w="98"/><text x="1.1272%" y="431.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up</text></g><g><title>tokio::runtime::builder::Builder::build (3 samples, 2.63%)</title><rect x="84.2105%" y="405" width="2.6316%" height="15" fill="rgb(251,23,15)" fg:x="96" fg:w="3"/><text x="84.4605%" y="415.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (3 samples, 2.63%)</title><rect x="84.2105%" y="389" width="2.6316%" height="15" fill="rgb(252,88,28)" fg:x="96" fg:w="3"/><text x="84.4605%" y="399.50">to..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (3 samples, 2.63%)</title><rect x="84.2105%" y="373" width="2.6316%" height="15" fill="rgb(212,127,14)" fg:x="96" fg:w="3"/><text x="84.4605%" y="383.50">to..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (3 samples, 2.63%)</title><rect x="84.2105%" y="357" width="2.6316%" height="15" fill="rgb(247,145,37)" fg:x="96" fg:w="3"/><text x="84.4605%" y="367.50">to..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 2.63%)</title><rect x="84.2105%" y="341" width="2.6316%" height="15" fill="rgb(209,117,53)" fg:x="96" fg:w="3"/><text x="84.4605%" y="351.50">to..</text></g><g><title>std::thread::Builder::spawn_unchecked (3 samples, 2.63%)</title><rect x="84.2105%" y="325" width="2.6316%" height="15" fill="rgb(212,90,42)" fg:x="96" fg:w="3"/><text x="84.4605%" y="335.50">st..</text></g><g><title>std::sys::unix::thread::Thread::new (3 samples, 2.63%)</title><rect x="84.2105%" y="309" width="2.6316%" height="15" fill="rgb(218,164,37)" fg:x="96" fg:w="3"/><text x="84.4605%" y="319.50">st..</text></g><g><title>pthread_create (3 samples, 2.63%)</title><rect x="84.2105%" y="293" width="2.6316%" height="15" fill="rgb(246,65,34)" fg:x="96" fg:w="3"/><text x="84.4605%" y="303.50">pt..</text></g><g><title>commit_log_appe (100 samples, 87.72%)</title><rect x="0.0000%" y="709" width="87.7193%" height="15" fill="rgb(231,100,33)" fg:x="0" fg:w="100"/><text x="0.2500%" y="719.50">commit_log_appe</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.88%)</title><rect x="86.8421%" y="693" width="0.8772%" height="15" fill="rgb(228,126,14)" fg:x="99" fg:w="1"/><text x="87.0921%" y="703.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (1 samples, 0.88%)</title><rect x="86.8421%" y="677" width="0.8772%" height="15" fill="rgb(215,173,21)" fg:x="99" fg:w="1"/><text x="87.0921%" y="687.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.88%)</title><rect x="86.8421%" y="661" width="0.8772%" height="15" fill="rgb(210,6,40)" fg:x="99" fg:w="1"/><text x="87.0921%" y="671.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.88%)</title><rect x="86.8421%" y="645" width="0.8772%" height="15" fill="rgb(212,48,18)" fg:x="99" fg:w="1"/><text x="87.0921%" y="655.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.88%)</title><rect x="86.8421%" y="629" width="0.8772%" height="15" fill="rgb(230,214,11)" fg:x="99" fg:w="1"/><text x="87.0921%" y="639.50"></text></g><g><title>mmap64 (1 samples, 0.88%)</title><rect x="86.8421%" y="613" width="0.8772%" height="15" fill="rgb(254,105,39)" fg:x="99" fg:w="1"/><text x="87.0921%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.88%)</title><rect x="87.7193%" y="613" width="0.8772%" height="15" fill="rgb(245,158,5)" fg:x="100" fg:w="1"/><text x="87.9693%" y="623.50"></text></g><g><title>tokio::runtime::park::wake_by_ref (1 samples, 0.88%)</title><rect x="87.7193%" y="597" width="0.8772%" height="15" fill="rgb(249,208,11)" fg:x="100" fg:w="1"/><text x="87.9693%" y="607.50"></text></g><g><title>syscall (1 samples, 0.88%)</title><rect x="87.7193%" y="581" width="0.8772%" height="15" fill="rgb(210,39,28)" fg:x="100" fg:w="1"/><text x="87.9693%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (2 samples, 1.75%)</title><rect x="89.4737%" y="597" width="1.7544%" height="15" fill="rgb(211,56,53)" fg:x="102" fg:w="2"/><text x="89.7237%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (2 samples, 1.75%)</title><rect x="89.4737%" y="581" width="1.7544%" height="15" fill="rgb(226,201,30)" fg:x="102" fg:w="2"/><text x="89.7237%" y="591.50"></text></g><g><title>std::sys::unix::futex::futex_wait (2 samples, 1.75%)</title><rect x="89.4737%" y="565" width="1.7544%" height="15" fill="rgb(239,101,34)" fg:x="102" fg:w="2"/><text x="89.7237%" y="575.50"></text></g><g><title>syscall (2 samples, 1.75%)</title><rect x="89.4737%" y="549" width="1.7544%" height="15" fill="rgb(226,209,5)" fg:x="102" fg:w="2"/><text x="89.7237%" y="559.50"></text></g><g><title>syscall (1 samples, 0.88%)</title><rect x="91.2281%" y="597" width="0.8772%" height="15" fill="rgb(250,105,47)" fg:x="104" fg:w="1"/><text x="91.4781%" y="607.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.88%)</title><rect x="92.1053%" y="581" width="0.8772%" height="15" fill="rgb(230,72,3)" fg:x="105" fg:w="1"/><text x="92.3553%" y="591.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.88%)</title><rect x="92.1053%" y="565" width="0.8772%" height="15" fill="rgb(232,218,39)" fg:x="105" fg:w="1"/><text x="92.3553%" y="575.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.88%)</title><rect x="92.1053%" y="549" width="0.8772%" height="15" fill="rgb(248,166,6)" fg:x="105" fg:w="1"/><text x="92.3553%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.88%)</title><rect x="92.1053%" y="533" width="0.8772%" height="15" fill="rgb(247,89,20)" fg:x="105" fg:w="1"/><text x="92.3553%" y="543.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (1 samples, 0.88%)</title><rect x="92.1053%" y="517" width="0.8772%" height="15" fill="rgb(248,130,54)" fg:x="105" fg:w="1"/><text x="92.3553%" y="527.50"></text></g><g><title>std::sys::unix::fs::File::write (1 samples, 0.88%)</title><rect x="92.1053%" y="501" width="0.8772%" height="15" fill="rgb(234,196,4)" fg:x="105" fg:w="1"/><text x="92.3553%" y="511.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.88%)</title><rect x="92.1053%" y="485" width="0.8772%" height="15" fill="rgb(250,143,31)" fg:x="105" fg:w="1"/><text x="92.3553%" y="495.50"></text></g><g><title>__write (1 samples, 0.88%)</title><rect x="92.1053%" y="469" width="0.8772%" height="15" fill="rgb(211,110,34)" fg:x="105" fg:w="1"/><text x="92.3553%" y="479.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3 samples, 2.63%)</title><rect x="92.1053%" y="597" width="2.6316%" height="15" fill="rgb(215,124,48)" fg:x="105" fg:w="3"/><text x="92.3553%" y="607.50">to..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 1.75%)</title><rect x="92.9825%" y="581" width="1.7544%" height="15" fill="rgb(216,46,13)" fg:x="106" fg:w="2"/><text x="93.2325%" y="591.50"></text></g><g><title>tokio::runtime::park::wake_by_ref (2 samples, 1.75%)</title><rect x="92.9825%" y="565" width="1.7544%" height="15" fill="rgb(205,184,25)" fg:x="106" fg:w="2"/><text x="93.2325%" y="575.50"></text></g><g><title>syscall (2 samples, 1.75%)</title><rect x="92.9825%" y="549" width="1.7544%" height="15" fill="rgb(228,1,10)" fg:x="106" fg:w="2"/><text x="93.2325%" y="559.50"></text></g><g><title>std::fs::OpenOptions::_open (3 samples, 2.63%)</title><rect x="94.7368%" y="533" width="2.6316%" height="15" fill="rgb(213,116,27)" fg:x="108" fg:w="3"/><text x="94.9868%" y="543.50">st..</text></g><g><title>std::sys::unix::fs::File::open (3 samples, 2.63%)</title><rect x="94.7368%" y="517" width="2.6316%" height="15" fill="rgb(241,95,50)" fg:x="108" fg:w="3"/><text x="94.9868%" y="527.50">st..</text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 2.63%)</title><rect x="94.7368%" y="501" width="2.6316%" height="15" fill="rgb(238,48,32)" fg:x="108" fg:w="3"/><text x="94.9868%" y="511.50">st..</text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 2.63%)</title><rect x="94.7368%" y="485" width="2.6316%" height="15" fill="rgb(235,113,49)" fg:x="108" fg:w="3"/><text x="94.9868%" y="495.50">st..</text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (3 samples, 2.63%)</title><rect x="94.7368%" y="469" width="2.6316%" height="15" fill="rgb(205,127,43)" fg:x="108" fg:w="3"/><text x="94.9868%" y="479.50">st..</text></g><g><title>std::sys::unix::fs::File::open_c (3 samples, 2.63%)</title><rect x="94.7368%" y="453" width="2.6316%" height="15" fill="rgb(250,162,2)" fg:x="108" fg:w="3"/><text x="94.9868%" y="463.50">st..</text></g><g><title>std::sys::unix::cvt_r (3 samples, 2.63%)</title><rect x="94.7368%" y="437" width="2.6316%" height="15" fill="rgb(220,13,41)" fg:x="108" fg:w="3"/><text x="94.9868%" y="447.50">st..</text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (3 samples, 2.63%)</title><rect x="94.7368%" y="421" width="2.6316%" height="15" fill="rgb(249,221,25)" fg:x="108" fg:w="3"/><text x="94.9868%" y="431.50">st..</text></g><g><title>__open (3 samples, 2.63%)</title><rect x="94.7368%" y="405" width="2.6316%" height="15" fill="rgb(215,208,19)" fg:x="108" fg:w="3"/><text x="94.9868%" y="415.50">__..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (13 samples, 11.40%)</title><rect x="87.7193%" y="677" width="11.4035%" height="15" fill="rgb(236,175,2)" fg:x="100" fg:w="13"/><text x="87.9693%" y="687.50">&lt;alloc::boxed::Bo..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (13 samples, 11.40%)</title><rect x="87.7193%" y="661" width="11.4035%" height="15" fill="rgb(241,52,2)" fg:x="100" fg:w="13"/><text x="87.9693%" y="671.50">&lt;alloc::boxed::Bo..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (13 samples, 11.40%)</title><rect x="87.7193%" y="645" width="11.4035%" height="15" fill="rgb(248,140,14)" fg:x="100" fg:w="13"/><text x="87.9693%" y="655.50">core::ops::functi..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13 samples, 11.40%)</title><rect x="87.7193%" y="629" width="11.4035%" height="15" fill="rgb(253,22,42)" fg:x="100" fg:w="13"/><text x="87.9693%" y="639.50">std::sys_common::..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (12 samples, 10.53%)</title><rect x="88.5965%" y="613" width="10.5263%" height="15" fill="rgb(234,61,47)" fg:x="101" fg:w="12"/><text x="88.8465%" y="623.50">tokio::runtime:..</text></g><g><title>tokio::runtime::task::raw::poll (5 samples, 4.39%)</title><rect x="94.7368%" y="597" width="4.3860%" height="15" fill="rgb(208,226,15)" fg:x="108" fg:w="5"/><text x="94.9868%" y="607.50">tokio..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (5 samples, 4.39%)</title><rect x="94.7368%" y="581" width="4.3860%" height="15" fill="rgb(217,221,4)" fg:x="108" fg:w="5"/><text x="94.9868%" y="591.50">tokio..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (5 samples, 4.39%)</title><rect x="94.7368%" y="565" width="4.3860%" height="15" fill="rgb(212,174,34)" fg:x="108" fg:w="5"/><text x="94.9868%" y="575.50">tokio..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 4.39%)</title><rect x="94.7368%" y="549" width="4.3860%" height="15" fill="rgb(253,83,4)" fg:x="108" fg:w="5"/><text x="94.9868%" y="559.50">&lt;toki..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (2 samples, 1.75%)</title><rect x="97.3684%" y="533" width="1.7544%" height="15" fill="rgb(250,195,49)" fg:x="111" fg:w="2"/><text x="97.6184%" y="543.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (2 samples, 1.75%)</title><rect x="97.3684%" y="517" width="1.7544%" height="15" fill="rgb(241,192,25)" fg:x="111" fg:w="2"/><text x="97.6184%" y="527.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 1.75%)</title><rect x="97.3684%" y="501" width="1.7544%" height="15" fill="rgb(208,124,10)" fg:x="111" fg:w="2"/><text x="97.6184%" y="511.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 1.75%)</title><rect x="97.3684%" y="485" width="1.7544%" height="15" fill="rgb(222,33,0)" fg:x="111" fg:w="2"/><text x="97.6184%" y="495.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (2 samples, 1.75%)</title><rect x="97.3684%" y="469" width="1.7544%" height="15" fill="rgb(234,209,28)" fg:x="111" fg:w="2"/><text x="97.6184%" y="479.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (2 samples, 1.75%)</title><rect x="97.3684%" y="453" width="1.7544%" height="15" fill="rgb(224,11,23)" fg:x="111" fg:w="2"/><text x="97.6184%" y="463.50"></text></g><g><title>unlinkat (2 samples, 1.75%)</title><rect x="97.3684%" y="437" width="1.7544%" height="15" fill="rgb(232,99,1)" fg:x="111" fg:w="2"/><text x="97.6184%" y="447.50"></text></g><g><title>all (114 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(237,95,45)" fg:x="0" fg:w="114"/><text x="0.2500%" y="735.50"></text></g><g><title>tokio-runtime-w (14 samples, 12.28%)</title><rect x="87.7193%" y="709" width="12.2807%" height="15" fill="rgb(208,109,11)" fg:x="100" fg:w="14"/><text x="87.9693%" y="719.50">tokio-runtime-w</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (14 samples, 12.28%)</title><rect x="87.7193%" y="693" width="12.2807%" height="15" fill="rgb(216,190,48)" fg:x="100" fg:w="14"/><text x="87.9693%" y="703.50">std::sys::unix::th..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (1 samples, 0.88%)</title><rect x="99.1228%" y="677" width="0.8772%" height="15" fill="rgb(251,171,36)" fg:x="113" fg:w="1"/><text x="99.3728%" y="687.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.88%)</title><rect x="99.1228%" y="661" width="0.8772%" height="15" fill="rgb(230,62,22)" fg:x="113" fg:w="1"/><text x="99.3728%" y="671.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.88%)</title><rect x="99.1228%" y="645" width="0.8772%" height="15" fill="rgb(225,114,35)" fg:x="113" fg:w="1"/><text x="99.3728%" y="655.50"></text></g><g><title>__munmap (1 samples, 0.88%)</title><rect x="99.1228%" y="629" width="0.8772%" height="15" fill="rgb(215,118,42)" fg:x="113" fg:w="1"/><text x="99.3728%" y="639.50"></text></g></svg></svg>