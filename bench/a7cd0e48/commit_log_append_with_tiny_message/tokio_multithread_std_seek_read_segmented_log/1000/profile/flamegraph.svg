<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="119"><g><title>&lt;crc32fast::Hasher as core::default::Default&gt;::default (2 samples, 1.68%)</title><rect x="12.6050%" y="181" width="1.6807%" height="15" fill="rgb(243,119,21)" fg:x="15" fg:w="2"/><text x="12.8550%" y="191.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Sizable&gt;::size (1 samples, 0.84%)</title><rect x="14.2857%" y="181" width="0.8403%" height="15" fill="rgb(252,177,53)" fg:x="17" fg:w="1"/><text x="14.5357%" y="191.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.84%)</title><rect x="15.1261%" y="181" width="0.8403%" height="15" fill="rgb(237,209,29)" fg:x="18" fg:w="1"/><text x="15.3761%" y="191.50"></text></g><g><title>malloc (1 samples, 0.84%)</title><rect x="15.1261%" y="165" width="0.8403%" height="15" fill="rgb(212,65,23)" fg:x="18" fg:w="1"/><text x="15.3761%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt;::append::{{closure}}::SBuf&lt;&amp;[u8],alloc::vec::Vec&lt;u8&gt;&gt;,core::convert::Infallible,futures_lite::stream::Map&lt;futures_lite::stream::Chain&lt;futures_lite::stream::Iter&lt;core::array::iter::IntoIter&lt;core::result::Result&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt;::append::{{closure}}::SBuf&lt;&amp;[u8],alloc::vec::Vec&lt;u8&gt;&gt;,core::convert::Infallible&gt;,2_usize&gt;&gt;,futures_lite::stream::Map&lt;futures_lite::stream::Map&lt;futures_lite::stream::Once&lt;&amp;[u8]&gt;,commit_log_append::infallible&lt;&amp;[u8]&gt;&gt;,laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage,(),crc32fast::Hasher,u32,&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Sizable&gt;::Size,laminarmq::common::serde_compat::bincode::BinCode&gt;::append&lt;&amp;[u8],futures_lite::stream::Map&lt;futures_lite::stream::Once&lt;&amp;[u8]&gt;,commit_log_append::infallible&lt;&amp;[u8]&gt;&gt;,core::convert::Infallible&gt;::{{closure}}::{{closure}}&gt;&gt;,laminarmq::storage::commit_log::segmented_log::store::Store&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage,crc32fast::Hasher&gt;::append&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt;::append::{{closure}}::SBuf&lt;&amp;[u8],alloc::vec::Vec&lt;u8&gt;&gt;,futures_lite::stream::Chain&lt;futures_lite::stream::Iter&lt;core::array::iter::IntoIter&lt;core::result::Result&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt;::append::{{closure}}::SBuf&lt;&amp;[u8],alloc::vec::Vec&lt;u8&gt;&gt;,core::convert::Infallible&gt;,2_usize&gt;&gt;,futures_lite::stream::Map&lt;futures_lite::stream::Map&lt;futures_lite::stream::Once&lt;&amp;[u8]&gt;,commit_log_append::infallible&lt;&amp;[u8]&gt;&gt;,laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage,(),crc32fast::Hasher,u32,&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Sizable&gt;::Size,laminarmq::common::serde_compat::bincode::BinCode&gt;::append&lt;&amp;[u8],futures_lite::stream::Map&lt;futures_lite::stream::Once&lt;&amp;[u8]&gt;,commit_log_append::infallible&lt;&amp;[u8]&gt;&gt;,core::convert::Infallible&gt;::{{closure}}::{{closure}}&gt;&gt;,core::convert::Infallible&gt;::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt; (1 samples, 0.84%)</title><rect x="15.9664%" y="181" width="0.8403%" height="15" fill="rgb(230,222,46)" fg:x="19" fg:w="1"/><text x="16.2164%" y="191.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (3 samples, 2.52%)</title><rect x="30.2521%" y="165" width="2.5210%" height="15" fill="rgb(215,135,32)" fg:x="36" fg:w="3"/><text x="30.5021%" y="175.50">&lt;f..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (2 samples, 1.68%)</title><rect x="31.0924%" y="149" width="1.6807%" height="15" fill="rgb(246,101,22)" fg:x="37" fg:w="2"/><text x="31.3424%" y="159.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (2 samples, 1.68%)</title><rect x="31.0924%" y="133" width="1.6807%" height="15" fill="rgb(206,107,13)" fg:x="37" fg:w="2"/><text x="31.3424%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (2 samples, 1.68%)</title><rect x="32.7731%" y="165" width="1.6807%" height="15" fill="rgb(250,100,44)" fg:x="39" fg:w="2"/><text x="33.0231%" y="175.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (2 samples, 1.68%)</title><rect x="36.1345%" y="149" width="1.6807%" height="15" fill="rgb(231,147,38)" fg:x="43" fg:w="2"/><text x="36.3845%" y="159.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 0.84%)</title><rect x="37.8151%" y="149" width="0.8403%" height="15" fill="rgb(229,8,40)" fg:x="45" fg:w="1"/><text x="38.0651%" y="159.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (2 samples, 1.68%)</title><rect x="38.6555%" y="149" width="1.6807%" height="15" fill="rgb(221,135,30)" fg:x="46" fg:w="2"/><text x="38.9055%" y="159.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 1.68%)</title><rect x="42.0168%" y="133" width="1.6807%" height="15" fill="rgb(249,193,18)" fg:x="50" fg:w="2"/><text x="42.2668%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (14 samples, 11.76%)</title><rect x="34.4538%" y="165" width="11.7647%" height="15" fill="rgb(209,133,39)" fg:x="41" fg:w="14"/><text x="34.7038%" y="175.50">&lt;laminarmq::stora..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (7 samples, 5.88%)</title><rect x="40.3361%" y="149" width="5.8824%" height="15" fill="rgb(232,100,14)" fg:x="48" fg:w="7"/><text x="40.5861%" y="159.50">tokio::..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (3 samples, 2.52%)</title><rect x="43.6975%" y="133" width="2.5210%" height="15" fill="rgb(224,185,1)" fg:x="52" fg:w="3"/><text x="43.9475%" y="143.50">to..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (3 samples, 2.52%)</title><rect x="46.2185%" y="165" width="2.5210%" height="15" fill="rgb(223,139,8)" fg:x="55" fg:w="3"/><text x="46.4685%" y="175.50">&lt;l..</text></g><g><title>malloc (3 samples, 2.52%)</title><rect x="46.2185%" y="149" width="2.5210%" height="15" fill="rgb(232,213,38)" fg:x="55" fg:w="3"/><text x="46.4685%" y="159.50">ma..</text></g><g><title>__libc_free (6 samples, 5.04%)</title><rect x="48.7395%" y="165" width="5.0420%" height="15" fill="rgb(207,94,22)" fg:x="58" fg:w="6"/><text x="48.9895%" y="175.50">__libc..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (45 samples, 37.82%)</title><rect x="16.8067%" y="181" width="37.8151%" height="15" fill="rgb(219,183,54)" fg:x="20" fg:w="45"/><text x="17.0567%" y="191.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}}&gt; (1 samples, 0.84%)</title><rect x="53.7815%" y="165" width="0.8403%" height="15" fill="rgb(216,185,54)" fg:x="64" fg:w="1"/><text x="54.0315%" y="175.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (5 samples, 4.20%)</title><rect x="55.4622%" y="165" width="4.2017%" height="15" fill="rgb(254,217,39)" fg:x="66" fg:w="5"/><text x="55.7122%" y="175.50">&lt;lami..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (1 samples, 0.84%)</title><rect x="60.5042%" y="149" width="0.8403%" height="15" fill="rgb(240,178,23)" fg:x="72" fg:w="1"/><text x="60.7542%" y="159.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 0.84%)</title><rect x="61.3445%" y="149" width="0.8403%" height="15" fill="rgb(218,11,47)" fg:x="73" fg:w="1"/><text x="61.5945%" y="159.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (1 samples, 0.84%)</title><rect x="62.1849%" y="149" width="0.8403%" height="15" fill="rgb(218,51,51)" fg:x="74" fg:w="1"/><text x="62.4349%" y="159.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (7 samples, 5.88%)</title><rect x="59.6639%" y="165" width="5.8824%" height="15" fill="rgb(238,126,27)" fg:x="71" fg:w="7"/><text x="59.9139%" y="175.50">&lt;lamina..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (3 samples, 2.52%)</title><rect x="63.0252%" y="149" width="2.5210%" height="15" fill="rgb(249,202,22)" fg:x="75" fg:w="3"/><text x="63.2752%" y="159.50">to..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.84%)</title><rect x="64.7059%" y="133" width="0.8403%" height="15" fill="rgb(254,195,49)" fg:x="77" fg:w="1"/><text x="64.9559%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.84%)</title><rect x="65.5462%" y="149" width="0.8403%" height="15" fill="rgb(208,123,14)" fg:x="78" fg:w="1"/><text x="65.7962%" y="159.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (2 samples, 1.68%)</title><rect x="65.5462%" y="165" width="1.6807%" height="15" fill="rgb(224,200,8)" fg:x="78" fg:w="2"/><text x="65.7962%" y="175.50"></text></g><g><title>malloc (1 samples, 0.84%)</title><rect x="66.3866%" y="149" width="0.8403%" height="15" fill="rgb(217,61,36)" fg:x="79" fg:w="1"/><text x="66.6366%" y="159.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt;::append::{{closure}} (21 samples, 17.65%)</title><rect x="54.6218%" y="181" width="17.6471%" height="15" fill="rgb(206,35,45)" fg:x="65" fg:w="21"/><text x="54.8718%" y="191.50">laminarmq::storage::commit_..</text></g><g><title>__libc_free (6 samples, 5.04%)</title><rect x="67.2269%" y="165" width="5.0420%" height="15" fill="rgb(217,65,33)" fg:x="80" fg:w="6"/><text x="67.4769%" y="175.50">__libc..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (80 samples, 67.23%)</title><rect x="5.8824%" y="197" width="67.2269%" height="15" fill="rgb(222,158,48)" fg:x="7" fg:w="80"/><text x="6.1324%" y="207.50">&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size..</text></g><g><title>malloc (1 samples, 0.84%)</title><rect x="72.2689%" y="181" width="0.8403%" height="15" fill="rgb(254,2,54)" fg:x="86" fg:w="1"/><text x="72.5189%" y="191.50"></text></g><g><title>__libc_free (3 samples, 2.52%)</title><rect x="73.1092%" y="197" width="2.5210%" height="15" fill="rgb(250,143,38)" fg:x="87" fg:w="3"/><text x="73.3592%" y="207.50">__..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage,(),crc32fast::Hasher,u32,&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Sizable&gt;::Size,laminarmq::common::serde_compat::bincode::BinCode,laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage,laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorageProvider,u32&gt;,laminarmq::common::cache::NoOpCache&lt;usize,()&gt;&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;(),u32&gt;,&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append&lt;futures_lite::stream::Map&lt;futures_lite::stream::Once&lt;&amp;[u8]&gt;,commit_log_append::infallible&lt;&amp;[u8]&gt;&gt;,&amp;[u8],core::convert::Infallible&gt;::{{closure}}&gt; (1 samples, 0.84%)</title><rect x="75.6303%" y="197" width="0.8403%" height="15" fill="rgb(248,25,0)" fg:x="90" fg:w="1"/><text x="75.8803%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.84%)</title><rect x="76.4706%" y="133" width="0.8403%" height="15" fill="rgb(206,152,27)" fg:x="91" fg:w="1"/><text x="76.7206%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.84%)</title><rect x="77.3109%" y="133" width="0.8403%" height="15" fill="rgb(240,77,30)" fg:x="92" fg:w="1"/><text x="77.5609%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.84%)</title><rect x="77.3109%" y="117" width="0.8403%" height="15" fill="rgb(231,5,3)" fg:x="92" fg:w="1"/><text x="77.5609%" y="127.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (1 samples, 0.84%)</title><rect x="77.3109%" y="101" width="0.8403%" height="15" fill="rgb(207,226,32)" fg:x="92" fg:w="1"/><text x="77.5609%" y="111.50"></text></g><g><title>std::sys::unix::thread::Thread::new (1 samples, 0.84%)</title><rect x="77.3109%" y="85" width="0.8403%" height="15" fill="rgb(222,207,47)" fg:x="92" fg:w="1"/><text x="77.5609%" y="95.50"></text></g><g><title>pthread_create (1 samples, 0.84%)</title><rect x="77.3109%" y="69" width="0.8403%" height="15" fill="rgb(229,115,45)" fg:x="92" fg:w="1"/><text x="77.5609%" y="79.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.84%)</title><rect x="78.1513%" y="117" width="0.8403%" height="15" fill="rgb(224,191,6)" fg:x="93" fg:w="1"/><text x="78.4013%" y="127.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (1 samples, 0.84%)</title><rect x="78.1513%" y="101" width="0.8403%" height="15" fill="rgb(230,227,24)" fg:x="93" fg:w="1"/><text x="78.4013%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.84%)</title><rect x="78.1513%" y="85" width="0.8403%" height="15" fill="rgb(228,80,19)" fg:x="93" fg:w="1"/><text x="78.4013%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.84%)</title><rect x="78.1513%" y="69" width="0.8403%" height="15" fill="rgb(247,229,0)" fg:x="93" fg:w="1"/><text x="78.4013%" y="79.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.84%)</title><rect x="78.1513%" y="53" width="0.8403%" height="15" fill="rgb(237,194,15)" fg:x="93" fg:w="1"/><text x="78.4013%" y="63.50"></text></g><g><title>posix_memalign (1 samples, 0.84%)</title><rect x="78.1513%" y="37" width="0.8403%" height="15" fill="rgb(219,203,20)" fg:x="93" fg:w="1"/><text x="78.4013%" y="47.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt;::with_segment_storage_provider_config_and_base_index::{{closure}} (4 samples, 3.36%)</title><rect x="76.4706%" y="181" width="3.3613%" height="15" fill="rgb(234,128,8)" fg:x="91" fg:w="4"/><text x="76.7206%" y="191.50">lam..</text></g><g><title>&lt;laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt; as laminarmq::storage::commit_log::segmented_log::segment::SegmentStorageProvider&lt;S,Idx&gt;&gt;::obtain::{{closure}} (4 samples, 3.36%)</title><rect x="76.4706%" y="165" width="3.3613%" height="15" fill="rgb(248,202,8)" fg:x="91" fg:w="4"/><text x="76.7206%" y="175.50">&lt;la..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorageProvider as laminarmq::storage::impls::common::PathAddressedStorageProvider&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage&gt;&gt;::obtain_storage::{{closure}} (4 samples, 3.36%)</title><rect x="76.4706%" y="149" width="3.3613%" height="15" fill="rgb(206,104,37)" fg:x="91" fg:w="4"/><text x="76.7206%" y="159.50">&lt;la..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 1.68%)</title><rect x="78.1513%" y="133" width="1.6807%" height="15" fill="rgb(223,8,27)" fg:x="93" fg:w="2"/><text x="78.4013%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::Handle::current (1 samples, 0.84%)</title><rect x="78.9916%" y="117" width="0.8403%" height="15" fill="rgb(216,217,28)" fg:x="94" fg:w="1"/><text x="79.2416%" y="127.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt;::new::{{closure}} (5 samples, 4.20%)</title><rect x="76.4706%" y="197" width="4.2017%" height="15" fill="rgb(249,199,1)" fg:x="91" fg:w="5"/><text x="76.7206%" y="207.50">lamin..</text></g><g><title>malloc (1 samples, 0.84%)</title><rect x="79.8319%" y="181" width="0.8403%" height="15" fill="rgb(240,85,17)" fg:x="95" fg:w="1"/><text x="80.0819%" y="191.50"></text></g><g><title>malloc (2 samples, 1.68%)</title><rect x="80.6723%" y="197" width="1.6807%" height="15" fill="rgb(206,108,45)" fg:x="96" fg:w="2"/><text x="80.9223%" y="207.50"></text></g><g><title>commit_log_append::time_tokio_std_seek_read_segmented_log::{{closure}} (98 samples, 82.35%)</title><rect x="0.8403%" y="213" width="82.3529%" height="15" fill="rgb(245,210,41)" fg:x="1" fg:w="98"/><text x="1.0903%" y="223.50">commit_log_append::time_tokio_std_seek_read_segmented_log::{{closure}}</text></g><g><title>tokio::fs::remove_dir_all::remove_dir_all::{{closure}} (1 samples, 0.84%)</title><rect x="82.3529%" y="197" width="0.8403%" height="15" fill="rgb(206,13,37)" fg:x="98" fg:w="1"/><text x="82.6029%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.84%)</title><rect x="82.3529%" y="181" width="0.8403%" height="15" fill="rgb(250,61,18)" fg:x="98" fg:w="1"/><text x="82.6029%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.84%)</title><rect x="82.3529%" y="165" width="0.8403%" height="15" fill="rgb(235,172,48)" fg:x="98" fg:w="1"/><text x="82.6029%" y="175.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (1 samples, 0.84%)</title><rect x="82.3529%" y="149" width="0.8403%" height="15" fill="rgb(249,201,17)" fg:x="98" fg:w="1"/><text x="82.6029%" y="159.50"></text></g><g><title>tokio::runtime::task::state::State::new (1 samples, 0.84%)</title><rect x="82.3529%" y="133" width="0.8403%" height="15" fill="rgb(219,208,6)" fg:x="98" fg:w="1"/><text x="82.6029%" y="143.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (99 samples, 83.19%)</title><rect x="0.8403%" y="277" width="83.1933%" height="15" fill="rgb(248,31,23)" fg:x="1" fg:w="99"/><text x="1.0903%" y="287.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (99 samples, 83.19%)</title><rect x="0.8403%" y="261" width="83.1933%" height="15" fill="rgb(245,15,42)" fg:x="1" fg:w="99"/><text x="1.0903%" y="271.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (99 samples, 83.19%)</title><rect x="0.8403%" y="245" width="83.1933%" height="15" fill="rgb(222,217,39)" fg:x="1" fg:w="99"/><text x="1.0903%" y="255.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (99 samples, 83.19%)</title><rect x="0.8403%" y="229" width="83.1933%" height="15" fill="rgb(210,219,27)" fg:x="1" fg:w="99"/><text x="1.0903%" y="239.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.84%)</title><rect x="83.1933%" y="213" width="0.8403%" height="15" fill="rgb(252,166,36)" fg:x="99" fg:w="1"/><text x="83.4433%" y="223.50"></text></g><g><title>clock_gettime (1 samples, 0.84%)</title><rect x="83.1933%" y="197" width="0.8403%" height="15" fill="rgb(245,132,34)" fg:x="99" fg:w="1"/><text x="83.4433%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::BlockingPool::shutdown (2 samples, 1.68%)</title><rect x="84.0336%" y="277" width="1.6807%" height="15" fill="rgb(236,54,3)" fg:x="100" fg:w="2"/><text x="84.2836%" y="287.50"></text></g><g><title>tokio::runtime::blocking::shutdown::Receiver::wait (2 samples, 1.68%)</title><rect x="84.0336%" y="261" width="1.6807%" height="15" fill="rgb(241,173,43)" fg:x="100" fg:w="2"/><text x="84.2836%" y="271.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (2 samples, 1.68%)</title><rect x="84.0336%" y="245" width="1.6807%" height="15" fill="rgb(215,190,9)" fg:x="100" fg:w="2"/><text x="84.2836%" y="255.50"></text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 1.68%)</title><rect x="84.0336%" y="229" width="1.6807%" height="15" fill="rgb(242,101,16)" fg:x="100" fg:w="2"/><text x="84.2836%" y="239.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (2 samples, 1.68%)</title><rect x="84.0336%" y="213" width="1.6807%" height="15" fill="rgb(223,190,21)" fg:x="100" fg:w="2"/><text x="84.2836%" y="223.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (2 samples, 1.68%)</title><rect x="84.0336%" y="197" width="1.6807%" height="15" fill="rgb(215,228,25)" fg:x="100" fg:w="2"/><text x="84.2836%" y="207.50"></text></g><g><title>std::sys::unix::futex::futex_wait (2 samples, 1.68%)</title><rect x="84.0336%" y="181" width="1.6807%" height="15" fill="rgb(225,36,22)" fg:x="100" fg:w="2"/><text x="84.2836%" y="191.50"></text></g><g><title>syscall (2 samples, 1.68%)</title><rect x="84.0336%" y="165" width="1.6807%" height="15" fill="rgb(251,106,46)" fg:x="100" fg:w="2"/><text x="84.2836%" y="175.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (104 samples, 87.39%)</title><rect x="0.8403%" y="293" width="87.3950%" height="15" fill="rgb(208,90,1)" fg:x="1" fg:w="104"/><text x="1.0903%" y="303.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up</text></g><g><title>tokio::runtime::runtime::Runtime::new (3 samples, 2.52%)</title><rect x="85.7143%" y="277" width="2.5210%" height="15" fill="rgb(243,10,4)" fg:x="102" fg:w="3"/><text x="85.9643%" y="287.50">to..</text></g><g><title>tokio::runtime::builder::Builder::build (3 samples, 2.52%)</title><rect x="85.7143%" y="261" width="2.5210%" height="15" fill="rgb(212,137,27)" fg:x="102" fg:w="3"/><text x="85.9643%" y="271.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (3 samples, 2.52%)</title><rect x="85.7143%" y="245" width="2.5210%" height="15" fill="rgb(231,220,49)" fg:x="102" fg:w="3"/><text x="85.9643%" y="255.50">to..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (3 samples, 2.52%)</title><rect x="85.7143%" y="229" width="2.5210%" height="15" fill="rgb(237,96,20)" fg:x="102" fg:w="3"/><text x="85.9643%" y="239.50">to..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (3 samples, 2.52%)</title><rect x="85.7143%" y="213" width="2.5210%" height="15" fill="rgb(239,229,30)" fg:x="102" fg:w="3"/><text x="85.9643%" y="223.50">to..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 2.52%)</title><rect x="85.7143%" y="197" width="2.5210%" height="15" fill="rgb(219,65,33)" fg:x="102" fg:w="3"/><text x="85.9643%" y="207.50">to..</text></g><g><title>std::thread::Builder::spawn_unchecked (3 samples, 2.52%)</title><rect x="85.7143%" y="181" width="2.5210%" height="15" fill="rgb(243,134,7)" fg:x="102" fg:w="3"/><text x="85.9643%" y="191.50">st..</text></g><g><title>std::sys::unix::thread::Thread::new (3 samples, 2.52%)</title><rect x="85.7143%" y="165" width="2.5210%" height="15" fill="rgb(216,177,54)" fg:x="102" fg:w="3"/><text x="85.9643%" y="175.50">st..</text></g><g><title>pthread_create (3 samples, 2.52%)</title><rect x="85.7143%" y="149" width="2.5210%" height="15" fill="rgb(211,160,20)" fg:x="102" fg:w="3"/><text x="85.9643%" y="159.50">pt..</text></g><g><title>_start (105 samples, 88.24%)</title><rect x="0.8403%" y="565" width="88.2353%" height="15" fill="rgb(239,85,39)" fg:x="1" fg:w="105"/><text x="1.0903%" y="575.50">_start</text></g><g><title>__libc_start_main (105 samples, 88.24%)</title><rect x="0.8403%" y="549" width="88.2353%" height="15" fill="rgb(232,125,22)" fg:x="1" fg:w="105"/><text x="1.0903%" y="559.50">__libc_start_main</text></g><g><title>main (105 samples, 88.24%)</title><rect x="0.8403%" y="533" width="88.2353%" height="15" fill="rgb(244,57,34)" fg:x="1" fg:w="105"/><text x="1.0903%" y="543.50">main</text></g><g><title>std::rt::lang_start_internal (105 samples, 88.24%)</title><rect x="0.8403%" y="517" width="88.2353%" height="15" fill="rgb(214,203,32)" fg:x="1" fg:w="105"/><text x="1.0903%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (105 samples, 88.24%)</title><rect x="0.8403%" y="501" width="88.2353%" height="15" fill="rgb(207,58,43)" fg:x="1" fg:w="105"/><text x="1.0903%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (105 samples, 88.24%)</title><rect x="0.8403%" y="485" width="88.2353%" height="15" fill="rgb(215,193,15)" fg:x="1" fg:w="105"/><text x="1.0903%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (105 samples, 88.24%)</title><rect x="0.8403%" y="469" width="88.2353%" height="15" fill="rgb(232,15,44)" fg:x="1" fg:w="105"/><text x="1.0903%" y="479.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (105 samples, 88.24%)</title><rect x="0.8403%" y="453" width="88.2353%" height="15" fill="rgb(212,3,48)" fg:x="1" fg:w="105"/><text x="1.0903%" y="463.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (105 samples, 88.24%)</title><rect x="0.8403%" y="437" width="88.2353%" height="15" fill="rgb(218,128,7)" fg:x="1" fg:w="105"/><text x="1.0903%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (105 samples, 88.24%)</title><rect x="0.8403%" y="421" width="88.2353%" height="15" fill="rgb(226,216,39)" fg:x="1" fg:w="105"/><text x="1.0903%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (105 samples, 88.24%)</title><rect x="0.8403%" y="405" width="88.2353%" height="15" fill="rgb(243,47,51)" fg:x="1" fg:w="105"/><text x="1.0903%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (105 samples, 88.24%)</title><rect x="0.8403%" y="389" width="88.2353%" height="15" fill="rgb(241,183,40)" fg:x="1" fg:w="105"/><text x="1.0903%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (105 samples, 88.24%)</title><rect x="0.8403%" y="373" width="88.2353%" height="15" fill="rgb(231,217,32)" fg:x="1" fg:w="105"/><text x="1.0903%" y="383.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (105 samples, 88.24%)</title><rect x="0.8403%" y="357" width="88.2353%" height="15" fill="rgb(229,61,38)" fg:x="1" fg:w="105"/><text x="1.0903%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>commit_log_append::main (105 samples, 88.24%)</title><rect x="0.8403%" y="341" width="88.2353%" height="15" fill="rgb(225,210,5)" fg:x="1" fg:w="105"/><text x="1.0903%" y="351.50">commit_log_append::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (105 samples, 88.24%)</title><rect x="0.8403%" y="325" width="88.2353%" height="15" fill="rgb(231,79,45)" fg:x="1" fg:w="105"/><text x="1.0903%" y="335.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (105 samples, 88.24%)</title><rect x="0.8403%" y="309" width="88.2353%" height="15" fill="rgb(224,100,7)" fg:x="1" fg:w="105"/><text x="1.0903%" y="319.50">criterion::routine::Routine::profile</text></g><g><title>&lt;pprof::criterion::PProfProfiler as criterion::profiler::Profiler&gt;::stop_profiling (1 samples, 0.84%)</title><rect x="88.2353%" y="293" width="0.8403%" height="15" fill="rgb(241,198,18)" fg:x="105" fg:w="1"/><text x="88.4853%" y="303.50"></text></g><g><title>std::path::Path::_join (1 samples, 0.84%)</title><rect x="88.2353%" y="277" width="0.8403%" height="15" fill="rgb(252,97,53)" fg:x="105" fg:w="1"/><text x="88.4853%" y="287.50"></text></g><g><title>std::path::Path::to_path_buf (1 samples, 0.84%)</title><rect x="88.2353%" y="261" width="0.8403%" height="15" fill="rgb(220,88,7)" fg:x="105" fg:w="1"/><text x="88.4853%" y="271.50"></text></g><g><title>std::ffi::os_str::OsStr::to_os_string (1 samples, 0.84%)</title><rect x="88.2353%" y="245" width="0.8403%" height="15" fill="rgb(213,176,14)" fg:x="105" fg:w="1"/><text x="88.4853%" y="255.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.84%)</title><rect x="88.2353%" y="229" width="0.8403%" height="15" fill="rgb(246,73,7)" fg:x="105" fg:w="1"/><text x="88.4853%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.84%)</title><rect x="88.2353%" y="213" width="0.8403%" height="15" fill="rgb(245,64,36)" fg:x="105" fg:w="1"/><text x="88.4853%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.84%)</title><rect x="88.2353%" y="197" width="0.8403%" height="15" fill="rgb(245,80,10)" fg:x="105" fg:w="1"/><text x="88.4853%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.84%)</title><rect x="88.2353%" y="181" width="0.8403%" height="15" fill="rgb(232,107,50)" fg:x="105" fg:w="1"/><text x="88.4853%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.84%)</title><rect x="88.2353%" y="165" width="0.8403%" height="15" fill="rgb(253,3,0)" fg:x="105" fg:w="1"/><text x="88.4853%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.84%)</title><rect x="88.2353%" y="149" width="0.8403%" height="15" fill="rgb(212,99,53)" fg:x="105" fg:w="1"/><text x="88.4853%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.84%)</title><rect x="88.2353%" y="133" width="0.8403%" height="15" fill="rgb(249,111,54)" fg:x="105" fg:w="1"/><text x="88.4853%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.84%)</title><rect x="88.2353%" y="117" width="0.8403%" height="15" fill="rgb(249,55,30)" fg:x="105" fg:w="1"/><text x="88.4853%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.84%)</title><rect x="88.2353%" y="101" width="0.8403%" height="15" fill="rgb(237,47,42)" fg:x="105" fg:w="1"/><text x="88.4853%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.84%)</title><rect x="88.2353%" y="85" width="0.8403%" height="15" fill="rgb(211,20,18)" fg:x="105" fg:w="1"/><text x="88.4853%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.84%)</title><rect x="88.2353%" y="69" width="0.8403%" height="15" fill="rgb(231,203,46)" fg:x="105" fg:w="1"/><text x="88.4853%" y="79.50"></text></g><g><title>sigaltstack (1 samples, 0.84%)</title><rect x="89.0756%" y="517" width="0.8403%" height="15" fill="rgb(237,142,3)" fg:x="106" fg:w="1"/><text x="89.3256%" y="527.50"></text></g><g><title>commit_log_appe (108 samples, 90.76%)</title><rect x="0.0000%" y="581" width="90.7563%" height="15" fill="rgb(241,107,1)" fg:x="0" fg:w="108"/><text x="0.2500%" y="591.50">commit_log_appe</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 1.68%)</title><rect x="89.0756%" y="565" width="1.6807%" height="15" fill="rgb(229,83,13)" fg:x="106" fg:w="2"/><text x="89.3256%" y="575.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (2 samples, 1.68%)</title><rect x="89.0756%" y="549" width="1.6807%" height="15" fill="rgb(241,91,40)" fg:x="106" fg:w="2"/><text x="89.3256%" y="559.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (2 samples, 1.68%)</title><rect x="89.0756%" y="533" width="1.6807%" height="15" fill="rgb(225,3,45)" fg:x="106" fg:w="2"/><text x="89.3256%" y="543.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.84%)</title><rect x="89.9160%" y="517" width="0.8403%" height="15" fill="rgb(244,223,14)" fg:x="107" fg:w="1"/><text x="90.1660%" y="527.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.84%)</title><rect x="89.9160%" y="501" width="0.8403%" height="15" fill="rgb(224,124,37)" fg:x="107" fg:w="1"/><text x="90.1660%" y="511.50"></text></g><g><title>mmap64 (1 samples, 0.84%)</title><rect x="89.9160%" y="485" width="0.8403%" height="15" fill="rgb(251,171,30)" fg:x="107" fg:w="1"/><text x="90.1660%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.84%)</title><rect x="91.5966%" y="565" width="0.8403%" height="15" fill="rgb(236,46,54)" fg:x="109" fg:w="1"/><text x="91.8466%" y="575.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.84%)</title><rect x="92.4370%" y="485" width="0.8403%" height="15" fill="rgb(245,213,5)" fg:x="110" fg:w="1"/><text x="92.6870%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.84%)</title><rect x="92.4370%" y="469" width="0.8403%" height="15" fill="rgb(230,144,27)" fg:x="110" fg:w="1"/><text x="92.6870%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (1 samples, 0.84%)</title><rect x="93.2773%" y="469" width="0.8403%" height="15" fill="rgb(220,86,6)" fg:x="111" fg:w="1"/><text x="93.5273%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (1 samples, 0.84%)</title><rect x="93.2773%" y="453" width="0.8403%" height="15" fill="rgb(240,20,13)" fg:x="111" fg:w="1"/><text x="93.5273%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.84%)</title><rect x="93.2773%" y="437" width="0.8403%" height="15" fill="rgb(217,89,34)" fg:x="111" fg:w="1"/><text x="93.5273%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.84%)</title><rect x="93.2773%" y="421" width="0.8403%" height="15" fill="rgb(229,13,5)" fg:x="111" fg:w="1"/><text x="93.5273%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.84%)</title><rect x="94.1176%" y="469" width="0.8403%" height="15" fill="rgb(244,67,35)" fg:x="112" fg:w="1"/><text x="94.3676%" y="479.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.84%)</title><rect x="94.1176%" y="453" width="0.8403%" height="15" fill="rgb(221,40,2)" fg:x="112" fg:w="1"/><text x="94.3676%" y="463.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.84%)</title><rect x="94.1176%" y="437" width="0.8403%" height="15" fill="rgb(237,157,21)" fg:x="112" fg:w="1"/><text x="94.3676%" y="447.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.84%)</title><rect x="94.1176%" y="421" width="0.8403%" height="15" fill="rgb(222,94,11)" fg:x="112" fg:w="1"/><text x="94.3676%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.84%)</title><rect x="94.1176%" y="405" width="0.8403%" height="15" fill="rgb(249,113,6)" fg:x="112" fg:w="1"/><text x="94.3676%" y="415.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (1 samples, 0.84%)</title><rect x="94.1176%" y="389" width="0.8403%" height="15" fill="rgb(238,137,36)" fg:x="112" fg:w="1"/><text x="94.3676%" y="399.50"></text></g><g><title>std::sys::unix::fs::File::write (1 samples, 0.84%)</title><rect x="94.1176%" y="373" width="0.8403%" height="15" fill="rgb(210,102,26)" fg:x="112" fg:w="1"/><text x="94.3676%" y="383.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.84%)</title><rect x="94.1176%" y="357" width="0.8403%" height="15" fill="rgb(218,30,30)" fg:x="112" fg:w="1"/><text x="94.3676%" y="367.50"></text></g><g><title>__write (1 samples, 0.84%)</title><rect x="94.1176%" y="341" width="0.8403%" height="15" fill="rgb(214,67,26)" fg:x="112" fg:w="1"/><text x="94.3676%" y="351.50"></text></g><g><title>fstatat (1 samples, 0.84%)</title><rect x="94.9580%" y="277" width="0.8403%" height="15" fill="rgb(251,9,53)" fg:x="113" fg:w="1"/><text x="95.2080%" y="287.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 1.68%)</title><rect x="94.9580%" y="453" width="1.6807%" height="15" fill="rgb(228,204,25)" fg:x="113" fg:w="2"/><text x="95.2080%" y="463.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 1.68%)</title><rect x="94.9580%" y="437" width="1.6807%" height="15" fill="rgb(207,153,8)" fg:x="113" fg:w="2"/><text x="95.2080%" y="447.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 1.68%)</title><rect x="94.9580%" y="421" width="1.6807%" height="15" fill="rgb(242,9,16)" fg:x="113" fg:w="2"/><text x="95.2080%" y="431.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (2 samples, 1.68%)</title><rect x="94.9580%" y="405" width="1.6807%" height="15" fill="rgb(217,211,10)" fg:x="113" fg:w="2"/><text x="95.2080%" y="415.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (2 samples, 1.68%)</title><rect x="94.9580%" y="389" width="1.6807%" height="15" fill="rgb(219,228,52)" fg:x="113" fg:w="2"/><text x="95.2080%" y="399.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 1.68%)</title><rect x="94.9580%" y="373" width="1.6807%" height="15" fill="rgb(231,92,29)" fg:x="113" fg:w="2"/><text x="95.2080%" y="383.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 1.68%)</title><rect x="94.9580%" y="357" width="1.6807%" height="15" fill="rgb(232,8,23)" fg:x="113" fg:w="2"/><text x="95.2080%" y="367.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (2 samples, 1.68%)</title><rect x="94.9580%" y="341" width="1.6807%" height="15" fill="rgb(216,211,34)" fg:x="113" fg:w="2"/><text x="95.2080%" y="351.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (2 samples, 1.68%)</title><rect x="94.9580%" y="325" width="1.6807%" height="15" fill="rgb(236,151,0)" fg:x="113" fg:w="2"/><text x="95.2080%" y="335.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::fdreaddir (2 samples, 1.68%)</title><rect x="94.9580%" y="309" width="1.6807%" height="15" fill="rgb(209,168,3)" fg:x="113" fg:w="2"/><text x="95.2080%" y="319.50"></text></g><g><title>fdopendir (2 samples, 1.68%)</title><rect x="94.9580%" y="293" width="1.6807%" height="15" fill="rgb(208,129,28)" fg:x="113" fg:w="2"/><text x="95.2080%" y="303.50"></text></g><g><title>malloc (1 samples, 0.84%)</title><rect x="95.7983%" y="277" width="0.8403%" height="15" fill="rgb(229,78,22)" fg:x="114" fg:w="1"/><text x="96.0483%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (7 samples, 5.88%)</title><rect x="92.4370%" y="549" width="5.8824%" height="15" fill="rgb(228,187,13)" fg:x="110" fg:w="7"/><text x="92.6870%" y="559.50">&lt;alloc:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (7 samples, 5.88%)</title><rect x="92.4370%" y="533" width="5.8824%" height="15" fill="rgb(240,119,24)" fg:x="110" fg:w="7"/><text x="92.6870%" y="543.50">&lt;alloc:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7 samples, 5.88%)</title><rect x="92.4370%" y="517" width="5.8824%" height="15" fill="rgb(209,194,42)" fg:x="110" fg:w="7"/><text x="92.6870%" y="527.50">core::o..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 5.88%)</title><rect x="92.4370%" y="501" width="5.8824%" height="15" fill="rgb(247,200,46)" fg:x="110" fg:w="7"/><text x="92.6870%" y="511.50">std::sy..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (6 samples, 5.04%)</title><rect x="93.2773%" y="485" width="5.0420%" height="15" fill="rgb(218,76,16)" fg:x="111" fg:w="6"/><text x="93.5273%" y="495.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::poll (4 samples, 3.36%)</title><rect x="94.9580%" y="469" width="3.3613%" height="15" fill="rgb(225,21,48)" fg:x="113" fg:w="4"/><text x="95.2080%" y="479.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 1.68%)</title><rect x="96.6387%" y="453" width="1.6807%" height="15" fill="rgb(239,223,50)" fg:x="115" fg:w="2"/><text x="96.8887%" y="463.50"></text></g><g><title>tokio::runtime::park::wake_by_ref (1 samples, 0.84%)</title><rect x="97.4790%" y="437" width="0.8403%" height="15" fill="rgb(244,45,21)" fg:x="116" fg:w="1"/><text x="97.7290%" y="447.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (1 samples, 0.84%)</title><rect x="97.4790%" y="421" width="0.8403%" height="15" fill="rgb(232,33,43)" fg:x="116" fg:w="1"/><text x="97.7290%" y="431.50"></text></g><g><title>all (119 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(209,8,3)" fg:x="0" fg:w="119"/><text x="0.2500%" y="607.50"></text></g><g><title>tokio-runtime-w (11 samples, 9.24%)</title><rect x="90.7563%" y="581" width="9.2437%" height="15" fill="rgb(214,25,53)" fg:x="108" fg:w="11"/><text x="91.0063%" y="591.50">tokio-runtime..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9 samples, 7.56%)</title><rect x="92.4370%" y="565" width="7.5630%" height="15" fill="rgb(254,186,54)" fg:x="110" fg:w="9"/><text x="92.6870%" y="575.50">std::sys::..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (2 samples, 1.68%)</title><rect x="98.3193%" y="549" width="1.6807%" height="15" fill="rgb(208,174,49)" fg:x="117" fg:w="2"/><text x="98.5693%" y="559.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (2 samples, 1.68%)</title><rect x="98.3193%" y="533" width="1.6807%" height="15" fill="rgb(233,191,51)" fg:x="117" fg:w="2"/><text x="98.5693%" y="543.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (2 samples, 1.68%)</title><rect x="98.3193%" y="517" width="1.6807%" height="15" fill="rgb(222,134,10)" fg:x="117" fg:w="2"/><text x="98.5693%" y="527.50"></text></g><g><title>__munmap (2 samples, 1.68%)</title><rect x="98.3193%" y="501" width="1.6807%" height="15" fill="rgb(230,226,20)" fg:x="117" fg:w="2"/><text x="98.5693%" y="511.50"></text></g></svg></svg>