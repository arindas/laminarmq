<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="141"><g><title>&lt;crc32fast::Hasher as core::default::Default&gt;::default (1 samples, 0.71%)</title><rect x="17.7305%" y="245" width="0.7092%" height="15" fill="rgb(241,25,7)" fg:x="25" fg:w="1"/><text x="17.9805%" y="255.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.71%)</title><rect x="18.4397%" y="245" width="0.7092%" height="15" fill="rgb(242,119,39)" fg:x="26" fg:w="1"/><text x="18.6897%" y="255.50"></text></g><g><title>malloc (1 samples, 0.71%)</title><rect x="18.4397%" y="229" width="0.7092%" height="15" fill="rgb(241,98,45)" fg:x="26" fg:w="1"/><text x="18.6897%" y="239.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (7 samples, 4.96%)</title><rect x="21.9858%" y="229" width="4.9645%" height="15" fill="rgb(254,28,30)" fg:x="31" fg:w="7"/><text x="22.2358%" y="239.50">&lt;crc32..</text></g><g><title>crc32fast::baseline::update_fast_16 (7 samples, 4.96%)</title><rect x="21.9858%" y="213" width="4.9645%" height="15" fill="rgb(241,142,54)" fg:x="31" fg:w="7"/><text x="22.2358%" y="223.50">crc32f..</text></g><g><title>__libc_free (5 samples, 3.55%)</title><rect x="26.9504%" y="229" width="3.5461%" height="15" fill="rgb(222,85,15)" fg:x="38" fg:w="5"/><text x="27.2004%" y="239.50">__li..</text></g><g><title>core::ptr::drop_in_place&lt;laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::read::{{closure}}&gt; (1 samples, 0.71%)</title><rect x="30.4965%" y="229" width="0.7092%" height="15" fill="rgb(210,85,47)" fg:x="43" fg:w="1"/><text x="30.7465%" y="239.50"></text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (2 samples, 1.42%)</title><rect x="31.2057%" y="229" width="1.4184%" height="15" fill="rgb(224,206,25)" fg:x="44" fg:w="2"/><text x="31.4557%" y="239.50"></text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice::{{closure}} (9 samples, 6.38%)</title><rect x="32.6241%" y="229" width="6.3830%" height="15" fill="rgb(243,201,19)" fg:x="46" fg:w="9"/><text x="32.8741%" y="239.50">laminarm..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (4 samples, 2.84%)</title><rect x="36.1702%" y="213" width="2.8369%" height="15" fill="rgb(236,59,4)" fg:x="51" fg:w="4"/><text x="36.4202%" y="223.50">&lt;t..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.71%)</title><rect x="38.2979%" y="197" width="0.7092%" height="15" fill="rgb(254,179,45)" fg:x="54" fg:w="1"/><text x="38.5479%" y="207.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.71%)</title><rect x="38.2979%" y="181" width="0.7092%" height="15" fill="rgb(226,14,10)" fg:x="54" fg:w="1"/><text x="38.5479%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1 samples, 0.71%)</title><rect x="38.2979%" y="165" width="0.7092%" height="15" fill="rgb(244,27,41)" fg:x="54" fg:w="1"/><text x="38.5479%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.71%)</title><rect x="38.2979%" y="149" width="0.7092%" height="15" fill="rgb(235,35,32)" fg:x="54" fg:w="1"/><text x="38.5479%" y="159.50"></text></g><g><title>syscall (1 samples, 0.71%)</title><rect x="38.2979%" y="133" width="0.7092%" height="15" fill="rgb(218,68,31)" fg:x="54" fg:w="1"/><text x="38.5479%" y="143.50"></text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (29 samples, 20.57%)</title><rect x="19.1489%" y="245" width="20.5674%" height="15" fill="rgb(207,120,37)" fg:x="27" fg:w="29"/><text x="19.3989%" y="255.50">laminarmq::storage::Storage::app..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (1 samples, 0.71%)</title><rect x="39.0071%" y="229" width="0.7092%" height="15" fill="rgb(227,98,0)" fg:x="55" fg:w="1"/><text x="39.2571%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.71%)</title><rect x="39.0071%" y="213" width="0.7092%" height="15" fill="rgb(207,7,3)" fg:x="55" fg:w="1"/><text x="39.2571%" y="223.50"></text></g><g><title>__libc_free (2 samples, 1.42%)</title><rect x="41.1348%" y="229" width="1.4184%" height="15" fill="rgb(206,98,19)" fg:x="58" fg:w="2"/><text x="41.3848%" y="239.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt;::append::{{closure}} (6 samples, 4.26%)</title><rect x="39.7163%" y="245" width="4.2553%" height="15" fill="rgb(217,5,26)" fg:x="56" fg:w="6"/><text x="39.9663%" y="255.50">lamin..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice::{{closure}} (2 samples, 1.42%)</title><rect x="42.5532%" y="229" width="1.4184%" height="15" fill="rgb(235,190,38)" fg:x="60" fg:w="2"/><text x="42.8032%" y="239.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (2 samples, 1.42%)</title><rect x="42.5532%" y="213" width="1.4184%" height="15" fill="rgb(247,86,24)" fg:x="60" fg:w="2"/><text x="42.8032%" y="223.50"></text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.71%)</title><rect x="43.2624%" y="197" width="0.7092%" height="15" fill="rgb(205,101,16)" fg:x="61" fg:w="1"/><text x="43.5124%" y="207.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.71%)</title><rect x="43.2624%" y="181" width="0.7092%" height="15" fill="rgb(246,168,33)" fg:x="61" fg:w="1"/><text x="43.5124%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1 samples, 0.71%)</title><rect x="43.2624%" y="165" width="0.7092%" height="15" fill="rgb(231,114,1)" fg:x="61" fg:w="1"/><text x="43.5124%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.71%)</title><rect x="43.2624%" y="149" width="0.7092%" height="15" fill="rgb(207,184,53)" fg:x="61" fg:w="1"/><text x="43.5124%" y="159.50"></text></g><g><title>syscall (1 samples, 0.71%)</title><rect x="43.2624%" y="133" width="0.7092%" height="15" fill="rgb(224,95,51)" fg:x="61" fg:w="1"/><text x="43.5124%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (53 samples, 37.59%)</title><rect x="7.0922%" y="261" width="37.5887%" height="15" fill="rgb(212,188,45)" fg:x="10" fg:w="53"/><text x="7.3422%" y="271.50">&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;..</text></g><g><title>malloc (1 samples, 0.71%)</title><rect x="43.9716%" y="245" width="0.7092%" height="15" fill="rgb(223,154,38)" fg:x="62" fg:w="1"/><text x="44.2216%" y="255.50"></text></g><g><title>__libc_free (2 samples, 1.42%)</title><rect x="44.6809%" y="261" width="1.4184%" height="15" fill="rgb(251,22,52)" fg:x="63" fg:w="2"/><text x="44.9309%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage,(),crc32fast::Hasher,u32,&lt;laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage as laminarmq::storage::Sizable&gt;::Size,laminarmq::common::serde_compat::bincode::BinCode,laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage,laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorageProvider,u32&gt;,laminarmq::common::cache::NoOpCache&lt;usize,()&gt;&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;(),u32&gt;,&lt;laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append&lt;futures_lite::stream::Map&lt;futures_lite::stream::Once&lt;&amp;[u8]&gt;,commit_log_append::infallible&lt;&amp;[u8]&gt;&gt;,&amp;[u8],core::convert::Infallible&gt;::{{closure}}&gt; (1 samples, 0.71%)</title><rect x="46.0993%" y="261" width="0.7092%" height="15" fill="rgb(229,209,22)" fg:x="65" fg:w="1"/><text x="46.3493%" y="271.50"></text></g><g><title>&lt;alloc::collections::binary_heap::BinaryHeap&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.71%)</title><rect x="46.8085%" y="229" width="0.7092%" height="15" fill="rgb(234,138,34)" fg:x="66" fg:w="1"/><text x="47.0585%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.71%)</title><rect x="46.8085%" y="213" width="0.7092%" height="15" fill="rgb(212,95,11)" fg:x="66" fg:w="1"/><text x="47.0585%" y="223.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.71%)</title><rect x="46.8085%" y="197" width="0.7092%" height="15" fill="rgb(240,179,47)" fg:x="66" fg:w="1"/><text x="47.0585%" y="207.50"></text></g><g><title>&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.71%)</title><rect x="46.8085%" y="181" width="0.7092%" height="15" fill="rgb(240,163,11)" fg:x="66" fg:w="1"/><text x="47.0585%" y="191.50"></text></g><g><title>readdir (1 samples, 0.71%)</title><rect x="46.8085%" y="165" width="0.7092%" height="15" fill="rgb(236,37,12)" fg:x="66" fg:w="1"/><text x="47.0585%" y="175.50"></text></g><g><title>getdents64 (1 samples, 0.71%)</title><rect x="46.8085%" y="149" width="0.7092%" height="15" fill="rgb(232,164,16)" fg:x="66" fg:w="1"/><text x="47.0585%" y="159.50"></text></g><g><title>fstatat (1 samples, 0.71%)</title><rect x="47.5177%" y="165" width="0.7092%" height="15" fill="rgb(244,205,15)" fg:x="67" fg:w="1"/><text x="47.7677%" y="175.50"></text></g><g><title>&lt;laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt; as laminarmq::storage::commit_log::segmented_log::segment::SegmentStorageProvider&lt;S,Idx&gt;&gt;::obtain_base_indices_of_stored_segments::{{closure}} (3 samples, 2.13%)</title><rect x="46.8085%" y="245" width="2.1277%" height="15" fill="rgb(223,117,47)" fg:x="66" fg:w="3"/><text x="47.0585%" y="255.50">&lt;..</text></g><g><title>std::sys::unix::fs::readdir (2 samples, 1.42%)</title><rect x="47.5177%" y="229" width="1.4184%" height="15" fill="rgb(244,107,35)" fg:x="67" fg:w="2"/><text x="47.7677%" y="239.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 1.42%)</title><rect x="47.5177%" y="213" width="1.4184%" height="15" fill="rgb(205,140,8)" fg:x="67" fg:w="2"/><text x="47.7677%" y="223.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 1.42%)</title><rect x="47.5177%" y="197" width="1.4184%" height="15" fill="rgb(228,84,46)" fg:x="67" fg:w="2"/><text x="47.7677%" y="207.50"></text></g><g><title>std::sys::unix::fs::readdir::{{closure}} (2 samples, 1.42%)</title><rect x="47.5177%" y="181" width="1.4184%" height="15" fill="rgb(254,188,9)" fg:x="67" fg:w="2"/><text x="47.7677%" y="191.50"></text></g><g><title>opendir (1 samples, 0.71%)</title><rect x="48.2270%" y="165" width="0.7092%" height="15" fill="rgb(206,112,54)" fg:x="68" fg:w="1"/><text x="48.4770%" y="175.50"></text></g><g><title>__open64_nocancel (1 samples, 0.71%)</title><rect x="48.2270%" y="149" width="0.7092%" height="15" fill="rgb(216,84,49)" fg:x="68" fg:w="1"/><text x="48.4770%" y="159.50"></text></g><g><title>std::sys::unix::thread::Thread::new (1 samples, 0.71%)</title><rect x="48.9362%" y="117" width="0.7092%" height="15" fill="rgb(214,194,35)" fg:x="69" fg:w="1"/><text x="49.1862%" y="127.50"></text></g><g><title>pthread_create (1 samples, 0.71%)</title><rect x="48.9362%" y="101" width="0.7092%" height="15" fill="rgb(249,28,3)" fg:x="69" fg:w="1"/><text x="49.1862%" y="111.50"></text></g><g><title>tokio::fs::open_options::OpenOptions::open::{{closure}} (2 samples, 1.42%)</title><rect x="48.9362%" y="197" width="1.4184%" height="15" fill="rgb(222,56,52)" fg:x="69" fg:w="2"/><text x="49.1862%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 1.42%)</title><rect x="48.9362%" y="181" width="1.4184%" height="15" fill="rgb(245,217,50)" fg:x="69" fg:w="2"/><text x="49.1862%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 1.42%)</title><rect x="48.9362%" y="165" width="1.4184%" height="15" fill="rgb(213,201,24)" fg:x="69" fg:w="2"/><text x="49.1862%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 1.42%)</title><rect x="48.9362%" y="149" width="1.4184%" height="15" fill="rgb(248,116,28)" fg:x="69" fg:w="2"/><text x="49.1862%" y="159.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (2 samples, 1.42%)</title><rect x="48.9362%" y="133" width="1.4184%" height="15" fill="rgb(219,72,43)" fg:x="69" fg:w="2"/><text x="49.1862%" y="143.50"></text></g><g><title>std::thread::Thread::new (1 samples, 0.71%)</title><rect x="49.6454%" y="117" width="0.7092%" height="15" fill="rgb(209,138,14)" fg:x="70" fg:w="1"/><text x="49.8954%" y="127.50"></text></g><g><title>std::thread::ThreadId::new (1 samples, 0.71%)</title><rect x="49.6454%" y="101" width="0.7092%" height="15" fill="rgb(222,18,33)" fg:x="70" fg:w="1"/><text x="49.8954%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicU64::compare_exchange_weak (1 samples, 0.71%)</title><rect x="49.6454%" y="85" width="0.7092%" height="15" fill="rgb(213,199,7)" fg:x="70" fg:w="1"/><text x="49.8954%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.71%)</title><rect x="49.6454%" y="69" width="0.7092%" height="15" fill="rgb(250,110,10)" fg:x="70" fg:w="1"/><text x="49.8954%" y="79.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt;::new::{{closure}} (6 samples, 4.26%)</title><rect x="46.8085%" y="261" width="4.2553%" height="15" fill="rgb(248,123,6)" fg:x="66" fg:w="6"/><text x="47.0585%" y="271.50">lamin..</text></g><g><title>laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt;::with_segment_storage_provider_config_and_base_index::{{closure}} (3 samples, 2.13%)</title><rect x="48.9362%" y="245" width="2.1277%" height="15" fill="rgb(206,91,31)" fg:x="69" fg:w="3"/><text x="49.1862%" y="255.50">l..</text></g><g><title>&lt;laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt; as laminarmq::storage::commit_log::segmented_log::segment::SegmentStorageProvider&lt;S,Idx&gt;&gt;::obtain::{{closure}} (3 samples, 2.13%)</title><rect x="48.9362%" y="229" width="2.1277%" height="15" fill="rgb(211,154,13)" fg:x="69" fg:w="3"/><text x="49.1862%" y="239.50">&lt;..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::impls::common::PathAddressedStorageProvider&lt;laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt; for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorageProvider&gt;::obtain_storage::{{closure}} (3 samples, 2.13%)</title><rect x="48.9362%" y="213" width="2.1277%" height="15" fill="rgb(225,148,7)" fg:x="69" fg:w="3"/><text x="49.1862%" y="223.50">l..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.71%)</title><rect x="50.3546%" y="197" width="0.7092%" height="15" fill="rgb(220,160,43)" fg:x="71" fg:w="1"/><text x="50.6046%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.71%)</title><rect x="50.3546%" y="181" width="0.7092%" height="15" fill="rgb(213,52,39)" fg:x="71" fg:w="1"/><text x="50.6046%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.71%)</title><rect x="50.3546%" y="165" width="0.7092%" height="15" fill="rgb(243,137,7)" fg:x="71" fg:w="1"/><text x="50.6046%" y="175.50"></text></g><g><title>syscall (1 samples, 0.71%)</title><rect x="50.3546%" y="149" width="0.7092%" height="15" fill="rgb(230,79,13)" fg:x="71" fg:w="1"/><text x="50.6046%" y="159.50"></text></g><g><title>laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt;::with_storage_directory_path_and_provider (1 samples, 0.71%)</title><rect x="51.0638%" y="261" width="0.7092%" height="15" fill="rgb(247,105,23)" fg:x="72" fg:w="1"/><text x="51.3138%" y="271.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (1 samples, 0.71%)</title><rect x="51.0638%" y="245" width="0.7092%" height="15" fill="rgb(223,179,41)" fg:x="72" fg:w="1"/><text x="51.3138%" y="255.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir (1 samples, 0.71%)</title><rect x="51.0638%" y="229" width="0.7092%" height="15" fill="rgb(218,9,34)" fg:x="72" fg:w="1"/><text x="51.3138%" y="239.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.71%)</title><rect x="51.0638%" y="213" width="0.7092%" height="15" fill="rgb(222,106,8)" fg:x="72" fg:w="1"/><text x="51.3138%" y="223.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.71%)</title><rect x="51.0638%" y="197" width="0.7092%" height="15" fill="rgb(211,220,0)" fg:x="72" fg:w="1"/><text x="51.3138%" y="207.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir::{{closure}} (1 samples, 0.71%)</title><rect x="51.0638%" y="181" width="0.7092%" height="15" fill="rgb(229,52,16)" fg:x="72" fg:w="1"/><text x="51.3138%" y="191.50"></text></g><g><title>mkdir (1 samples, 0.71%)</title><rect x="51.0638%" y="165" width="0.7092%" height="15" fill="rgb(212,155,18)" fg:x="72" fg:w="1"/><text x="51.3138%" y="175.50"></text></g><g><title>malloc (2 samples, 1.42%)</title><rect x="51.7730%" y="261" width="1.4184%" height="15" fill="rgb(242,21,14)" fg:x="73" fg:w="2"/><text x="52.0230%" y="271.50"></text></g><g><title>commit_log_append::time_tokio_std_random_read_segmented_log::{{closure}} (70 samples, 49.65%)</title><rect x="4.2553%" y="277" width="49.6454%" height="15" fill="rgb(222,19,48)" fg:x="6" fg:w="70"/><text x="4.5053%" y="287.50">commit_log_append::time_tokio_std_random_read_segmented_log::{{closure}}</text></g><g><title>tokio::fs::remove_dir_all::remove_dir_all::{{closure}} (1 samples, 0.71%)</title><rect x="53.1915%" y="261" width="0.7092%" height="15" fill="rgb(232,45,27)" fg:x="75" fg:w="1"/><text x="53.4415%" y="271.50"></text></g><g><title>std::path::Path::to_path_buf (1 samples, 0.71%)</title><rect x="53.1915%" y="245" width="0.7092%" height="15" fill="rgb(249,103,42)" fg:x="75" fg:w="1"/><text x="53.4415%" y="255.50"></text></g><g><title>std::ffi::os_str::OsStr::to_os_string (1 samples, 0.71%)</title><rect x="53.1915%" y="229" width="0.7092%" height="15" fill="rgb(246,81,33)" fg:x="75" fg:w="1"/><text x="53.4415%" y="239.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.71%)</title><rect x="53.1915%" y="213" width="0.7092%" height="15" fill="rgb(252,33,42)" fg:x="75" fg:w="1"/><text x="53.4415%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.71%)</title><rect x="53.1915%" y="197" width="0.7092%" height="15" fill="rgb(209,212,41)" fg:x="75" fg:w="1"/><text x="53.4415%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.71%)</title><rect x="53.1915%" y="181" width="0.7092%" height="15" fill="rgb(207,154,6)" fg:x="75" fg:w="1"/><text x="53.4415%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.71%)</title><rect x="53.1915%" y="165" width="0.7092%" height="15" fill="rgb(223,64,47)" fg:x="75" fg:w="1"/><text x="53.4415%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.71%)</title><rect x="53.1915%" y="149" width="0.7092%" height="15" fill="rgb(211,161,38)" fg:x="75" fg:w="1"/><text x="53.4415%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.71%)</title><rect x="53.1915%" y="133" width="0.7092%" height="15" fill="rgb(219,138,40)" fg:x="75" fg:w="1"/><text x="53.4415%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.71%)</title><rect x="53.1915%" y="117" width="0.7092%" height="15" fill="rgb(241,228,46)" fg:x="75" fg:w="1"/><text x="53.4415%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.71%)</title><rect x="53.1915%" y="101" width="0.7092%" height="15" fill="rgb(223,209,38)" fg:x="75" fg:w="1"/><text x="53.4415%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.71%)</title><rect x="53.1915%" y="85" width="0.7092%" height="15" fill="rgb(236,164,45)" fg:x="75" fg:w="1"/><text x="53.4415%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.71%)</title><rect x="53.1915%" y="69" width="0.7092%" height="15" fill="rgb(231,15,5)" fg:x="75" fg:w="1"/><text x="53.4415%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.71%)</title><rect x="53.1915%" y="53" width="0.7092%" height="15" fill="rgb(252,35,15)" fg:x="75" fg:w="1"/><text x="53.4415%" y="63.50"></text></g><g><title>malloc (1 samples, 0.71%)</title><rect x="53.1915%" y="37" width="0.7092%" height="15" fill="rgb(248,181,18)" fg:x="75" fg:w="1"/><text x="53.4415%" y="47.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (74 samples, 52.48%)</title><rect x="4.2553%" y="341" width="52.4823%" height="15" fill="rgb(233,39,42)" fg:x="6" fg:w="74"/><text x="4.5053%" y="351.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (74 samples, 52.48%)</title><rect x="4.2553%" y="325" width="52.4823%" height="15" fill="rgb(238,110,33)" fg:x="6" fg:w="74"/><text x="4.5053%" y="335.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (74 samples, 52.48%)</title><rect x="4.2553%" y="309" width="52.4823%" height="15" fill="rgb(233,195,10)" fg:x="6" fg:w="74"/><text x="4.5053%" y="319.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (74 samples, 52.48%)</title><rect x="4.2553%" y="293" width="52.4823%" height="15" fill="rgb(254,105,3)" fg:x="6" fg:w="74"/><text x="4.5053%" y="303.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (4 samples, 2.84%)</title><rect x="53.9007%" y="277" width="2.8369%" height="15" fill="rgb(221,225,9)" fg:x="76" fg:w="4"/><text x="54.1507%" y="287.50">to..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (4 samples, 2.84%)</title><rect x="53.9007%" y="261" width="2.8369%" height="15" fill="rgb(224,227,45)" fg:x="76" fg:w="4"/><text x="54.1507%" y="271.50">st..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (4 samples, 2.84%)</title><rect x="53.9007%" y="245" width="2.8369%" height="15" fill="rgb(229,198,43)" fg:x="76" fg:w="4"/><text x="54.1507%" y="255.50">st..</text></g><g><title>std::sys::unix::futex::futex_wait (4 samples, 2.84%)</title><rect x="53.9007%" y="229" width="2.8369%" height="15" fill="rgb(206,209,35)" fg:x="76" fg:w="4"/><text x="54.1507%" y="239.50">st..</text></g><g><title>syscall (4 samples, 2.84%)</title><rect x="53.9007%" y="213" width="2.8369%" height="15" fill="rgb(245,195,53)" fg:x="76" fg:w="4"/><text x="54.1507%" y="223.50">sy..</text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (3 samples, 2.13%)</title><rect x="56.7376%" y="325" width="2.1277%" height="15" fill="rgb(240,92,26)" fg:x="80" fg:w="3"/><text x="56.9876%" y="335.50">s..</text></g><g><title>std::sys::unix::thread::Thread::join (3 samples, 2.13%)</title><rect x="56.7376%" y="309" width="2.1277%" height="15" fill="rgb(207,40,23)" fg:x="80" fg:w="3"/><text x="56.9876%" y="319.50">s..</text></g><g><title>syscall (1 samples, 0.71%)</title><rect x="58.8652%" y="325" width="0.7092%" height="15" fill="rgb(223,111,35)" fg:x="83" fg:w="1"/><text x="59.1152%" y="335.50"></text></g><g><title>tokio::runtime::blocking::pool::BlockingPool::shutdown (9 samples, 6.38%)</title><rect x="56.7376%" y="341" width="6.3830%" height="15" fill="rgb(229,147,28)" fg:x="80" fg:w="9"/><text x="56.9876%" y="351.50">tokio::r..</text></g><g><title>tokio::runtime::blocking::shutdown::Receiver::wait (5 samples, 3.55%)</title><rect x="59.5745%" y="325" width="3.5461%" height="15" fill="rgb(211,29,28)" fg:x="84" fg:w="5"/><text x="59.8245%" y="335.50">toki..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (5 samples, 3.55%)</title><rect x="59.5745%" y="309" width="3.5461%" height="15" fill="rgb(228,72,33)" fg:x="84" fg:w="5"/><text x="59.8245%" y="319.50">toki..</text></g><g><title>tokio::runtime::park::Inner::park (4 samples, 2.84%)</title><rect x="60.2837%" y="293" width="2.8369%" height="15" fill="rgb(205,214,31)" fg:x="85" fg:w="4"/><text x="60.5337%" y="303.50">to..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (3 samples, 2.13%)</title><rect x="60.9929%" y="277" width="2.1277%" height="15" fill="rgb(224,111,15)" fg:x="86" fg:w="3"/><text x="61.2429%" y="287.50">s..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (3 samples, 2.13%)</title><rect x="60.9929%" y="261" width="2.1277%" height="15" fill="rgb(253,21,26)" fg:x="86" fg:w="3"/><text x="61.2429%" y="271.50">s..</text></g><g><title>std::sys::unix::futex::futex_wait (3 samples, 2.13%)</title><rect x="60.9929%" y="245" width="2.1277%" height="15" fill="rgb(245,139,43)" fg:x="86" fg:w="3"/><text x="61.2429%" y="255.50">s..</text></g><g><title>syscall (3 samples, 2.13%)</title><rect x="60.9929%" y="229" width="2.1277%" height="15" fill="rgb(252,170,7)" fg:x="86" fg:w="3"/><text x="61.2429%" y="239.50">s..</text></g><g><title>mio::event::events::Events::with_capacity (2 samples, 1.42%)</title><rect x="63.1206%" y="277" width="1.4184%" height="15" fill="rgb(231,118,14)" fg:x="89" fg:w="2"/><text x="63.3706%" y="287.50"></text></g><g><title>malloc (2 samples, 1.42%)</title><rect x="63.1206%" y="261" width="1.4184%" height="15" fill="rgb(238,83,0)" fg:x="89" fg:w="2"/><text x="63.3706%" y="271.50"></text></g><g><title>tokio::runtime::driver::Driver::new (4 samples, 2.84%)</title><rect x="63.1206%" y="309" width="2.8369%" height="15" fill="rgb(221,39,39)" fg:x="89" fg:w="4"/><text x="63.3706%" y="319.50">to..</text></g><g><title>tokio::runtime::io::Driver::new (4 samples, 2.84%)</title><rect x="63.1206%" y="293" width="2.8369%" height="15" fill="rgb(222,119,46)" fg:x="89" fg:w="4"/><text x="63.3706%" y="303.50">to..</text></g><g><title>mio::poll::Poll::new (2 samples, 1.42%)</title><rect x="64.5390%" y="277" width="1.4184%" height="15" fill="rgb(222,165,49)" fg:x="91" fg:w="2"/><text x="64.7890%" y="287.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::new (2 samples, 1.42%)</title><rect x="64.5390%" y="261" width="1.4184%" height="15" fill="rgb(219,113,52)" fg:x="91" fg:w="2"/><text x="64.7890%" y="271.50"></text></g><g><title>epoll_create1 (2 samples, 1.42%)</title><rect x="64.5390%" y="245" width="1.4184%" height="15" fill="rgb(214,7,15)" fg:x="91" fg:w="2"/><text x="64.7890%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (5 samples, 3.55%)</title><rect x="65.9574%" y="309" width="3.5461%" height="15" fill="rgb(235,32,4)" fg:x="93" fg:w="5"/><text x="66.2074%" y="319.50">toki..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (5 samples, 3.55%)</title><rect x="65.9574%" y="293" width="3.5461%" height="15" fill="rgb(238,90,54)" fg:x="93" fg:w="5"/><text x="66.2074%" y="303.50">toki..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (5 samples, 3.55%)</title><rect x="65.9574%" y="277" width="3.5461%" height="15" fill="rgb(213,208,19)" fg:x="93" fg:w="5"/><text x="66.2074%" y="287.50">toki..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (5 samples, 3.55%)</title><rect x="65.9574%" y="261" width="3.5461%" height="15" fill="rgb(233,156,4)" fg:x="93" fg:w="5"/><text x="66.2074%" y="271.50">toki..</text></g><g><title>std::thread::Builder::spawn_unchecked (5 samples, 3.55%)</title><rect x="65.9574%" y="245" width="3.5461%" height="15" fill="rgb(207,194,5)" fg:x="93" fg:w="5"/><text x="66.2074%" y="255.50">std:..</text></g><g><title>std::sys::unix::thread::Thread::new (5 samples, 3.55%)</title><rect x="65.9574%" y="229" width="3.5461%" height="15" fill="rgb(206,111,30)" fg:x="93" fg:w="5"/><text x="66.2074%" y="239.50">std:..</text></g><g><title>pthread_create (5 samples, 3.55%)</title><rect x="65.9574%" y="213" width="3.5461%" height="15" fill="rgb(243,70,54)" fg:x="93" fg:w="5"/><text x="66.2074%" y="223.50">pthr..</text></g><g><title>_start (94 samples, 66.67%)</title><rect x="4.2553%" y="629" width="66.6667%" height="15" fill="rgb(242,28,8)" fg:x="6" fg:w="94"/><text x="4.5053%" y="639.50">_start</text></g><g><title>__libc_start_main (94 samples, 66.67%)</title><rect x="4.2553%" y="613" width="66.6667%" height="15" fill="rgb(219,106,18)" fg:x="6" fg:w="94"/><text x="4.5053%" y="623.50">__libc_start_main</text></g><g><title>main (94 samples, 66.67%)</title><rect x="4.2553%" y="597" width="66.6667%" height="15" fill="rgb(244,222,10)" fg:x="6" fg:w="94"/><text x="4.5053%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (94 samples, 66.67%)</title><rect x="4.2553%" y="581" width="66.6667%" height="15" fill="rgb(236,179,52)" fg:x="6" fg:w="94"/><text x="4.5053%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (94 samples, 66.67%)</title><rect x="4.2553%" y="565" width="66.6667%" height="15" fill="rgb(213,23,39)" fg:x="6" fg:w="94"/><text x="4.5053%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (94 samples, 66.67%)</title><rect x="4.2553%" y="549" width="66.6667%" height="15" fill="rgb(238,48,10)" fg:x="6" fg:w="94"/><text x="4.5053%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (94 samples, 66.67%)</title><rect x="4.2553%" y="533" width="66.6667%" height="15" fill="rgb(251,196,23)" fg:x="6" fg:w="94"/><text x="4.5053%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (94 samples, 66.67%)</title><rect x="4.2553%" y="517" width="66.6667%" height="15" fill="rgb(250,152,24)" fg:x="6" fg:w="94"/><text x="4.5053%" y="527.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (94 samples, 66.67%)</title><rect x="4.2553%" y="501" width="66.6667%" height="15" fill="rgb(209,150,17)" fg:x="6" fg:w="94"/><text x="4.5053%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (94 samples, 66.67%)</title><rect x="4.2553%" y="485" width="66.6667%" height="15" fill="rgb(234,202,34)" fg:x="6" fg:w="94"/><text x="4.5053%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (94 samples, 66.67%)</title><rect x="4.2553%" y="469" width="66.6667%" height="15" fill="rgb(253,148,53)" fg:x="6" fg:w="94"/><text x="4.5053%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (94 samples, 66.67%)</title><rect x="4.2553%" y="453" width="66.6667%" height="15" fill="rgb(218,129,16)" fg:x="6" fg:w="94"/><text x="4.5053%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (94 samples, 66.67%)</title><rect x="4.2553%" y="437" width="66.6667%" height="15" fill="rgb(216,85,19)" fg:x="6" fg:w="94"/><text x="4.5053%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (94 samples, 66.67%)</title><rect x="4.2553%" y="421" width="66.6667%" height="15" fill="rgb(235,228,7)" fg:x="6" fg:w="94"/><text x="4.5053%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>commit_log_append::main (94 samples, 66.67%)</title><rect x="4.2553%" y="405" width="66.6667%" height="15" fill="rgb(245,175,0)" fg:x="6" fg:w="94"/><text x="4.5053%" y="415.50">commit_log_append::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (94 samples, 66.67%)</title><rect x="4.2553%" y="389" width="66.6667%" height="15" fill="rgb(208,168,36)" fg:x="6" fg:w="94"/><text x="4.5053%" y="399.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (94 samples, 66.67%)</title><rect x="4.2553%" y="373" width="66.6667%" height="15" fill="rgb(246,171,24)" fg:x="6" fg:w="94"/><text x="4.5053%" y="383.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (94 samples, 66.67%)</title><rect x="4.2553%" y="357" width="66.6667%" height="15" fill="rgb(215,142,24)" fg:x="6" fg:w="94"/><text x="4.5053%" y="367.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up</text></g><g><title>tokio::runtime::runtime::Runtime::new (11 samples, 7.80%)</title><rect x="63.1206%" y="341" width="7.8014%" height="15" fill="rgb(250,187,7)" fg:x="89" fg:w="11"/><text x="63.3706%" y="351.50">tokio::runt..</text></g><g><title>tokio::runtime::builder::Builder::build (11 samples, 7.80%)</title><rect x="63.1206%" y="325" width="7.8014%" height="15" fill="rgb(228,66,33)" fg:x="89" fg:w="11"/><text x="63.3706%" y="335.50">tokio::runt..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::create (2 samples, 1.42%)</title><rect x="69.5035%" y="309" width="1.4184%" height="15" fill="rgb(234,215,21)" fg:x="98" fg:w="2"/><text x="69.7535%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.71%)</title><rect x="70.2128%" y="293" width="0.7092%" height="15" fill="rgb(222,191,20)" fg:x="99" fg:w="1"/><text x="70.4628%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.71%)</title><rect x="70.2128%" y="277" width="0.7092%" height="15" fill="rgb(245,79,54)" fg:x="99" fg:w="1"/><text x="70.4628%" y="287.50"></text></g><g><title>malloc (1 samples, 0.71%)</title><rect x="70.2128%" y="261" width="0.7092%" height="15" fill="rgb(240,10,37)" fg:x="99" fg:w="1"/><text x="70.4628%" y="271.50"></text></g><g><title>__mprotect (1 samples, 0.71%)</title><rect x="70.9220%" y="549" width="0.7092%" height="15" fill="rgb(214,192,32)" fg:x="100" fg:w="1"/><text x="71.1720%" y="559.50"></text></g><g><title>commit_log_appe (104 samples, 73.76%)</title><rect x="0.0000%" y="645" width="73.7589%" height="15" fill="rgb(209,36,54)" fg:x="0" fg:w="104"/><text x="0.2500%" y="655.50">commit_log_appe</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (4 samples, 2.84%)</title><rect x="70.9220%" y="629" width="2.8369%" height="15" fill="rgb(220,10,11)" fg:x="100" fg:w="4"/><text x="71.1720%" y="639.50">st..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (4 samples, 2.84%)</title><rect x="70.9220%" y="613" width="2.8369%" height="15" fill="rgb(221,106,17)" fg:x="100" fg:w="4"/><text x="71.1720%" y="623.50">st..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (4 samples, 2.84%)</title><rect x="70.9220%" y="597" width="2.8369%" height="15" fill="rgb(251,142,44)" fg:x="100" fg:w="4"/><text x="71.1720%" y="607.50">st..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (4 samples, 2.84%)</title><rect x="70.9220%" y="581" width="2.8369%" height="15" fill="rgb(238,13,15)" fg:x="100" fg:w="4"/><text x="71.1720%" y="591.50">st..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (4 samples, 2.84%)</title><rect x="70.9220%" y="565" width="2.8369%" height="15" fill="rgb(208,107,27)" fg:x="100" fg:w="4"/><text x="71.1720%" y="575.50">st..</text></g><g><title>mmap64 (3 samples, 2.13%)</title><rect x="71.6312%" y="549" width="2.1277%" height="15" fill="rgb(205,136,37)" fg:x="101" fg:w="3"/><text x="71.8812%" y="559.50">m..</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.71%)</title><rect x="74.4681%" y="565" width="0.7092%" height="15" fill="rgb(250,205,27)" fg:x="105" fg:w="1"/><text x="74.7181%" y="575.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.71%)</title><rect x="74.4681%" y="549" width="0.7092%" height="15" fill="rgb(210,80,43)" fg:x="105" fg:w="1"/><text x="74.7181%" y="559.50"></text></g><g><title>pthread_getaffinity_np (1 samples, 0.71%)</title><rect x="74.4681%" y="533" width="0.7092%" height="15" fill="rgb(247,160,36)" fg:x="105" fg:w="1"/><text x="74.7181%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 1.42%)</title><rect x="75.1773%" y="549" width="1.4184%" height="15" fill="rgb(234,13,49)" fg:x="106" fg:w="2"/><text x="75.4273%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::driver::Handle&gt; (2 samples, 1.42%)</title><rect x="75.1773%" y="533" width="1.4184%" height="15" fill="rgb(234,122,0)" fg:x="106" fg:w="2"/><text x="75.4273%" y="543.50"></text></g><g><title>&lt;mio::sys::unix::selector::epoll::Selector as core::ops::drop::Drop&gt;::drop (2 samples, 1.42%)</title><rect x="75.1773%" y="517" width="1.4184%" height="15" fill="rgb(207,146,38)" fg:x="106" fg:w="2"/><text x="75.4273%" y="527.50"></text></g><g><title>close (2 samples, 1.42%)</title><rect x="75.1773%" y="501" width="1.4184%" height="15" fill="rgb(207,177,25)" fg:x="106" fg:w="2"/><text x="75.4273%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (4 samples, 2.84%)</title><rect x="78.0142%" y="533" width="2.8369%" height="15" fill="rgb(211,178,42)" fg:x="110" fg:w="4"/><text x="78.2642%" y="543.50">st..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (4 samples, 2.84%)</title><rect x="78.0142%" y="517" width="2.8369%" height="15" fill="rgb(230,69,54)" fg:x="110" fg:w="4"/><text x="78.2642%" y="527.50">st..</text></g><g><title>std::sys::unix::futex::futex_wait (4 samples, 2.84%)</title><rect x="78.0142%" y="501" width="2.8369%" height="15" fill="rgb(214,135,41)" fg:x="110" fg:w="4"/><text x="78.2642%" y="511.50">st..</text></g><g><title>syscall (4 samples, 2.84%)</title><rect x="78.0142%" y="485" width="2.8369%" height="15" fill="rgb(237,67,25)" fg:x="110" fg:w="4"/><text x="78.2642%" y="495.50">sy..</text></g><g><title>std::sys::unix::futex::futex_wait (1 samples, 0.71%)</title><rect x="80.8511%" y="517" width="0.7092%" height="15" fill="rgb(222,189,50)" fg:x="114" fg:w="1"/><text x="81.1011%" y="527.50"></text></g><g><title>syscall (1 samples, 0.71%)</title><rect x="80.8511%" y="501" width="0.7092%" height="15" fill="rgb(245,148,34)" fg:x="114" fg:w="1"/><text x="81.1011%" y="511.50"></text></g><g><title>core::hint::spin_loop (3 samples, 2.13%)</title><rect x="81.5603%" y="501" width="2.1277%" height="15" fill="rgb(222,29,6)" fg:x="115" fg:w="3"/><text x="81.8103%" y="511.50">c..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (3 samples, 2.13%)</title><rect x="81.5603%" y="485" width="2.1277%" height="15" fill="rgb(221,189,43)" fg:x="115" fg:w="3"/><text x="81.8103%" y="495.50">c..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (5 samples, 3.55%)</title><rect x="80.8511%" y="533" width="3.5461%" height="15" fill="rgb(207,36,27)" fg:x="114" fg:w="5"/><text x="81.1011%" y="543.50">std:..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (4 samples, 2.84%)</title><rect x="81.5603%" y="517" width="2.8369%" height="15" fill="rgb(217,90,24)" fg:x="115" fg:w="4"/><text x="81.8103%" y="527.50">st..</text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.71%)</title><rect x="83.6879%" y="501" width="0.7092%" height="15" fill="rgb(224,66,35)" fg:x="118" fg:w="1"/><text x="83.9379%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.71%)</title><rect x="83.6879%" y="485" width="0.7092%" height="15" fill="rgb(221,13,50)" fg:x="118" fg:w="1"/><text x="83.9379%" y="495.50"></text></g><g><title>syscall (1 samples, 0.71%)</title><rect x="84.3972%" y="533" width="0.7092%" height="15" fill="rgb(236,68,49)" fg:x="119" fg:w="1"/><text x="84.6472%" y="543.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.71%)</title><rect x="85.1064%" y="485" width="0.7092%" height="15" fill="rgb(229,146,28)" fg:x="120" fg:w="1"/><text x="85.3564%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.71%)</title><rect x="85.1064%" y="469" width="0.7092%" height="15" fill="rgb(225,31,38)" fg:x="120" fg:w="1"/><text x="85.3564%" y="479.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (1 samples, 0.71%)</title><rect x="85.1064%" y="453" width="0.7092%" height="15" fill="rgb(250,208,3)" fg:x="120" fg:w="1"/><text x="85.3564%" y="463.50"></text></g><g><title>std::sys::unix::fs::File::write (1 samples, 0.71%)</title><rect x="85.1064%" y="437" width="0.7092%" height="15" fill="rgb(246,54,23)" fg:x="120" fg:w="1"/><text x="85.3564%" y="447.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.71%)</title><rect x="85.1064%" y="421" width="0.7092%" height="15" fill="rgb(243,76,11)" fg:x="120" fg:w="1"/><text x="85.3564%" y="431.50"></text></g><g><title>__write (1 samples, 0.71%)</title><rect x="85.1064%" y="405" width="0.7092%" height="15" fill="rgb(245,21,50)" fg:x="120" fg:w="1"/><text x="85.3564%" y="415.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 2.13%)</title><rect x="85.1064%" y="517" width="2.1277%" height="15" fill="rgb(228,9,43)" fg:x="120" fg:w="3"/><text x="85.3564%" y="527.50">&lt;..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3 samples, 2.13%)</title><rect x="85.1064%" y="501" width="2.1277%" height="15" fill="rgb(208,100,47)" fg:x="120" fg:w="3"/><text x="85.3564%" y="511.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (2 samples, 1.42%)</title><rect x="85.8156%" y="485" width="1.4184%" height="15" fill="rgb(232,26,8)" fg:x="121" fg:w="2"/><text x="86.0656%" y="495.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (2 samples, 1.42%)</title><rect x="85.8156%" y="469" width="1.4184%" height="15" fill="rgb(216,166,38)" fg:x="121" fg:w="2"/><text x="86.0656%" y="479.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (2 samples, 1.42%)</title><rect x="85.8156%" y="453" width="1.4184%" height="15" fill="rgb(251,202,51)" fg:x="121" fg:w="2"/><text x="86.0656%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (2 samples, 1.42%)</title><rect x="85.8156%" y="437" width="1.4184%" height="15" fill="rgb(254,216,34)" fg:x="121" fg:w="2"/><text x="86.0656%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::shutdown_core (1 samples, 0.71%)</title><rect x="86.5248%" y="421" width="0.7092%" height="15" fill="rgb(251,32,27)" fg:x="122" fg:w="1"/><text x="86.7748%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::shutdown (1 samples, 0.71%)</title><rect x="86.5248%" y="405" width="0.7092%" height="15" fill="rgb(208,127,28)" fg:x="122" fg:w="1"/><text x="86.7748%" y="415.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 1.42%)</title><rect x="87.2340%" y="517" width="1.4184%" height="15" fill="rgb(224,137,22)" fg:x="123" fg:w="2"/><text x="87.4840%" y="527.50"></text></g><g><title>tokio::runtime::park::wake_by_ref (2 samples, 1.42%)</title><rect x="87.2340%" y="501" width="1.4184%" height="15" fill="rgb(254,70,32)" fg:x="123" fg:w="2"/><text x="87.4840%" y="511.50"></text></g><g><title>syscall (2 samples, 1.42%)</title><rect x="87.2340%" y="485" width="1.4184%" height="15" fill="rgb(229,75,37)" fg:x="123" fg:w="2"/><text x="87.4840%" y="495.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (6 samples, 4.26%)</title><rect x="85.1064%" y="533" width="4.2553%" height="15" fill="rgb(252,64,23)" fg:x="120" fg:w="6"/><text x="85.3564%" y="543.50">tokio..</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (1 samples, 0.71%)</title><rect x="88.6525%" y="517" width="0.7092%" height="15" fill="rgb(232,162,48)" fg:x="125" fg:w="1"/><text x="88.9025%" y="527.50"></text></g><g><title>std::fs::File::metadata (1 samples, 0.71%)</title><rect x="89.3617%" y="469" width="0.7092%" height="15" fill="rgb(246,160,12)" fg:x="126" fg:w="1"/><text x="89.6117%" y="479.50"></text></g><g><title>std::sys::unix::fs::File::file_attr (1 samples, 0.71%)</title><rect x="89.3617%" y="453" width="0.7092%" height="15" fill="rgb(247,166,0)" fg:x="126" fg:w="1"/><text x="89.6117%" y="463.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.71%)</title><rect x="89.3617%" y="437" width="0.7092%" height="15" fill="rgb(249,219,21)" fg:x="126" fg:w="1"/><text x="89.6117%" y="447.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.71%)</title><rect x="89.3617%" y="421" width="0.7092%" height="15" fill="rgb(205,209,3)" fg:x="126" fg:w="1"/><text x="89.6117%" y="431.50"></text></g><g><title>statx (1 samples, 0.71%)</title><rect x="89.3617%" y="405" width="0.7092%" height="15" fill="rgb(243,44,1)" fg:x="126" fg:w="1"/><text x="89.6117%" y="415.50"></text></g><g><title>std::fs::OpenOptions::_open (2 samples, 1.42%)</title><rect x="90.0709%" y="469" width="1.4184%" height="15" fill="rgb(206,159,16)" fg:x="127" fg:w="2"/><text x="90.3209%" y="479.50"></text></g><g><title>std::sys::unix::fs::File::open (2 samples, 1.42%)</title><rect x="90.0709%" y="453" width="1.4184%" height="15" fill="rgb(244,77,30)" fg:x="127" fg:w="2"/><text x="90.3209%" y="463.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 1.42%)</title><rect x="90.0709%" y="437" width="1.4184%" height="15" fill="rgb(218,69,12)" fg:x="127" fg:w="2"/><text x="90.3209%" y="447.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 1.42%)</title><rect x="90.0709%" y="421" width="1.4184%" height="15" fill="rgb(212,87,7)" fg:x="127" fg:w="2"/><text x="90.3209%" y="431.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (2 samples, 1.42%)</title><rect x="90.0709%" y="405" width="1.4184%" height="15" fill="rgb(245,114,25)" fg:x="127" fg:w="2"/><text x="90.3209%" y="415.50"></text></g><g><title>std::sys::unix::fs::File::open_c (2 samples, 1.42%)</title><rect x="90.0709%" y="389" width="1.4184%" height="15" fill="rgb(210,61,42)" fg:x="127" fg:w="2"/><text x="90.3209%" y="399.50"></text></g><g><title>std::sys::unix::cvt_r (2 samples, 1.42%)</title><rect x="90.0709%" y="373" width="1.4184%" height="15" fill="rgb(211,52,33)" fg:x="127" fg:w="2"/><text x="90.3209%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (2 samples, 1.42%)</title><rect x="90.0709%" y="357" width="1.4184%" height="15" fill="rgb(234,58,33)" fg:x="127" fg:w="2"/><text x="90.3209%" y="367.50"></text></g><g><title>__open (2 samples, 1.42%)</title><rect x="90.0709%" y="341" width="1.4184%" height="15" fill="rgb(220,115,36)" fg:x="127" fg:w="2"/><text x="90.3209%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fs::DirEntry&gt; (1 samples, 0.71%)</title><rect x="91.4894%" y="373" width="0.7092%" height="15" fill="rgb(243,153,54)" fg:x="129" fg:w="1"/><text x="91.7394%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::ffi::c_str::CString&gt; (1 samples, 0.71%)</title><rect x="91.4894%" y="357" width="0.7092%" height="15" fill="rgb(251,47,18)" fg:x="129" fg:w="1"/><text x="91.7394%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8]&gt;&gt; (1 samples, 0.71%)</title><rect x="91.4894%" y="341" width="0.7092%" height="15" fill="rgb(242,102,42)" fg:x="129" fg:w="1"/><text x="91.7394%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.71%)</title><rect x="91.4894%" y="325" width="0.7092%" height="15" fill="rgb(234,31,38)" fg:x="129" fg:w="1"/><text x="91.7394%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.71%)</title><rect x="91.4894%" y="309" width="0.7092%" height="15" fill="rgb(221,117,51)" fg:x="129" fg:w="1"/><text x="91.7394%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.71%)</title><rect x="91.4894%" y="293" width="0.7092%" height="15" fill="rgb(212,20,18)" fg:x="129" fg:w="1"/><text x="91.7394%" y="303.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 2.84%)</title><rect x="91.4894%" y="437" width="2.8369%" height="15" fill="rgb(245,133,36)" fg:x="129" fg:w="4"/><text x="91.7394%" y="447.50">st..</text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 2.84%)</title><rect x="91.4894%" y="421" width="2.8369%" height="15" fill="rgb(212,6,19)" fg:x="129" fg:w="4"/><text x="91.7394%" y="431.50">st..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (4 samples, 2.84%)</title><rect x="91.4894%" y="405" width="2.8369%" height="15" fill="rgb(218,1,36)" fg:x="129" fg:w="4"/><text x="91.7394%" y="415.50">st..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (4 samples, 2.84%)</title><rect x="91.4894%" y="389" width="2.8369%" height="15" fill="rgb(246,84,54)" fg:x="129" fg:w="4"/><text x="91.7394%" y="399.50">st..</text></g><g><title>unlinkat (3 samples, 2.13%)</title><rect x="92.1986%" y="373" width="2.1277%" height="15" fill="rgb(242,110,6)" fg:x="130" fg:w="3"/><text x="92.4486%" y="383.50">u..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (8 samples, 5.67%)</title><rect x="89.3617%" y="517" width="5.6738%" height="15" fill="rgb(214,47,5)" fg:x="126" fg:w="8"/><text x="89.6117%" y="527.50">tokio::..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (8 samples, 5.67%)</title><rect x="89.3617%" y="501" width="5.6738%" height="15" fill="rgb(218,159,25)" fg:x="126" fg:w="8"/><text x="89.6117%" y="511.50">tokio::..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 5.67%)</title><rect x="89.3617%" y="485" width="5.6738%" height="15" fill="rgb(215,211,28)" fg:x="126" fg:w="8"/><text x="89.6117%" y="495.50">&lt;tokio:..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (5 samples, 3.55%)</title><rect x="91.4894%" y="469" width="3.5461%" height="15" fill="rgb(238,59,32)" fg:x="129" fg:w="5"/><text x="91.7394%" y="479.50">std:..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (5 samples, 3.55%)</title><rect x="91.4894%" y="453" width="3.5461%" height="15" fill="rgb(226,82,3)" fg:x="129" fg:w="5"/><text x="91.7394%" y="463.50">std:..</text></g><g><title>std::sys::unix::fs::lstat (1 samples, 0.71%)</title><rect x="94.3262%" y="437" width="0.7092%" height="15" fill="rgb(240,164,32)" fg:x="133" fg:w="1"/><text x="94.5762%" y="447.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (30 samples, 21.28%)</title><rect x="74.4681%" y="613" width="21.2766%" height="15" fill="rgb(232,46,7)" fg:x="105" fg:w="30"/><text x="74.7181%" y="623.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::o..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (30 samples, 21.28%)</title><rect x="74.4681%" y="597" width="21.2766%" height="15" fill="rgb(229,129,53)" fg:x="105" fg:w="30"/><text x="74.7181%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::o..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (30 samples, 21.28%)</title><rect x="74.4681%" y="581" width="21.2766%" height="15" fill="rgb(234,188,29)" fg:x="105" fg:w="30"/><text x="74.7181%" y="591.50">core::ops::function::FnOnce::call_..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (29 samples, 20.57%)</title><rect x="75.1773%" y="565" width="20.5674%" height="15" fill="rgb(246,141,4)" fg:x="106" fg:w="29"/><text x="75.4273%" y="575.50">std::sys_common::backtrace::__ru..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (27 samples, 19.15%)</title><rect x="76.5957%" y="549" width="19.1489%" height="15" fill="rgb(229,23,39)" fg:x="108" fg:w="27"/><text x="76.8457%" y="559.50">tokio::runtime::blocking::pool..</text></g><g><title>tokio::runtime::task::raw::poll (9 samples, 6.38%)</title><rect x="89.3617%" y="533" width="6.3830%" height="15" fill="rgb(206,12,3)" fg:x="126" fg:w="9"/><text x="89.6117%" y="543.50">tokio::r..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1 samples, 0.71%)</title><rect x="95.0355%" y="517" width="0.7092%" height="15" fill="rgb(252,226,20)" fg:x="134" fg:w="1"/><text x="95.2855%" y="527.50"></text></g><g><title>tokio::runtime::park::wake_by_ref (1 samples, 0.71%)</title><rect x="95.0355%" y="501" width="0.7092%" height="15" fill="rgb(216,123,35)" fg:x="134" fg:w="1"/><text x="95.2855%" y="511.50"></text></g><g><title>syscall (1 samples, 0.71%)</title><rect x="95.0355%" y="485" width="0.7092%" height="15" fill="rgb(212,68,40)" fg:x="134" fg:w="1"/><text x="95.2855%" y="495.50"></text></g><g><title>__munmap (3 samples, 2.13%)</title><rect x="95.7447%" y="565" width="2.1277%" height="15" fill="rgb(254,125,32)" fg:x="135" fg:w="3"/><text x="95.9947%" y="575.50">_..</text></g><g><title>all (141 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(253,97,22)" fg:x="0" fg:w="141"/><text x="0.2500%" y="671.50"></text></g><g><title>tokio-runtime-w (37 samples, 26.24%)</title><rect x="73.7589%" y="645" width="26.2411%" height="15" fill="rgb(241,101,14)" fg:x="104" fg:w="37"/><text x="74.0089%" y="655.50">tokio-runtime-w</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (36 samples, 25.53%)</title><rect x="74.4681%" y="629" width="25.5319%" height="15" fill="rgb(238,103,29)" fg:x="105" fg:w="36"/><text x="74.7181%" y="639.50">std::sys::unix::thread::Thread::new::thre..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (6 samples, 4.26%)</title><rect x="95.7447%" y="613" width="4.2553%" height="15" fill="rgb(233,195,47)" fg:x="135" fg:w="6"/><text x="95.9947%" y="623.50">core:..</text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (6 samples, 4.26%)</title><rect x="95.7447%" y="597" width="4.2553%" height="15" fill="rgb(246,218,30)" fg:x="135" fg:w="6"/><text x="95.9947%" y="607.50">&lt;std:..</text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (6 samples, 4.26%)</title><rect x="95.7447%" y="581" width="4.2553%" height="15" fill="rgb(219,145,47)" fg:x="135" fg:w="6"/><text x="95.9947%" y="591.50">std::..</text></g><g><title>sigaltstack (3 samples, 2.13%)</title><rect x="97.8723%" y="565" width="2.1277%" height="15" fill="rgb(243,12,26)" fg:x="138" fg:w="3"/><text x="98.1223%" y="575.50">s..</text></g></svg></svg>