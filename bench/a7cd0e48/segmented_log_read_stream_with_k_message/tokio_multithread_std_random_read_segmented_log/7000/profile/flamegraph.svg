<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="125"><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.80%)</title><rect x="0.0000%" y="181" width="0.8000%" height="15" fill="rgb(220,163,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.80%)</title><rect x="0.0000%" y="165" width="0.8000%" height="15" fill="rgb(210,81,9)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (1 samples, 0.80%)</title><rect x="0.0000%" y="149" width="0.8000%" height="15" fill="rgb(247,72,10)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::read::{{closure}} (1 samples, 0.80%)</title><rect x="0.0000%" y="133" width="0.8000%" height="15" fill="rgb(222,191,48)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.80%)</title><rect x="0.0000%" y="117" width="0.8000%" height="15" fill="rgb(238,96,11)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.80%)</title><rect x="0.0000%" y="101" width="0.8000%" height="15" fill="rgb(230,64,25)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.80%)</title><rect x="0.0000%" y="85" width="0.8000%" height="15" fill="rgb(218,197,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="95.50"></text></g><g><title>syscall (1 samples, 0.80%)</title><rect x="0.0000%" y="69" width="0.8000%" height="15" fill="rgb(251,12,8)" fg:x="0" fg:w="1"/><text x="0.2500%" y="79.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.80%)</title><rect x="2.4000%" y="149" width="0.8000%" height="15" fill="rgb(208,196,29)" fg:x="3" fg:w="1"/><text x="2.6500%" y="159.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (1 samples, 0.80%)</title><rect x="2.4000%" y="133" width="0.8000%" height="15" fill="rgb(238,200,36)" fg:x="3" fg:w="1"/><text x="2.6500%" y="143.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.80%)</title><rect x="2.4000%" y="117" width="0.8000%" height="15" fill="rgb(217,182,49)" fg:x="3" fg:w="1"/><text x="2.6500%" y="127.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_random_read_segmented_log::{{closure}} (6 samples, 4.80%)</title><rect x="0.0000%" y="197" width="4.8000%" height="15" fill="rgb(223,133,46)" fg:x="0" fg:w="6"/><text x="0.2500%" y="207.50">segmen..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (5 samples, 4.00%)</title><rect x="0.8000%" y="181" width="4.0000%" height="15" fill="rgb(225,104,48)" fg:x="1" fg:w="5"/><text x="1.0500%" y="191.50">&lt;lam..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (5 samples, 4.00%)</title><rect x="0.8000%" y="165" width="4.0000%" height="15" fill="rgb(218,168,32)" fg:x="1" fg:w="5"/><text x="1.0500%" y="175.50">lami..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (2 samples, 1.60%)</title><rect x="3.2000%" y="149" width="1.6000%" height="15" fill="rgb(210,69,31)" fg:x="4" fg:w="2"/><text x="3.4500%" y="159.50"></text></g><g><title>malloc (2 samples, 1.60%)</title><rect x="3.2000%" y="133" width="1.6000%" height="15" fill="rgb(252,150,46)" fg:x="4" fg:w="2"/><text x="3.4500%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 6.40%)</title><rect x="0.0000%" y="277" width="6.4000%" height="15" fill="rgb(225,54,11)" fg:x="0" fg:w="8"/><text x="0.2500%" y="287.50">&lt;alloc::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 6.40%)</title><rect x="0.0000%" y="261" width="6.4000%" height="15" fill="rgb(222,211,49)" fg:x="0" fg:w="8"/><text x="0.2500%" y="271.50">&lt;core::i..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (8 samples, 6.40%)</title><rect x="0.0000%" y="245" width="6.4000%" height="15" fill="rgb(241,28,5)" fg:x="0" fg:w="8"/><text x="0.2500%" y="255.50">criterio..</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (8 samples, 6.40%)</title><rect x="0.0000%" y="229" width="6.4000%" height="15" fill="rgb(246,142,32)" fg:x="0" fg:w="8"/><text x="0.2500%" y="239.50">&lt;tokio::..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (8 samples, 6.40%)</title><rect x="0.0000%" y="213" width="6.4000%" height="15" fill="rgb(250,75,8)" fg:x="0" fg:w="8"/><text x="0.2500%" y="223.50">tokio::r..</text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 1.60%)</title><rect x="4.8000%" y="197" width="1.6000%" height="15" fill="rgb(226,82,6)" fg:x="6" fg:w="2"/><text x="5.0500%" y="207.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (2 samples, 1.60%)</title><rect x="4.8000%" y="181" width="1.6000%" height="15" fill="rgb(247,173,48)" fg:x="6" fg:w="2"/><text x="5.0500%" y="191.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (2 samples, 1.60%)</title><rect x="4.8000%" y="165" width="1.6000%" height="15" fill="rgb(207,175,26)" fg:x="6" fg:w="2"/><text x="5.0500%" y="175.50"></text></g><g><title>std::sys::unix::futex::futex_wait (2 samples, 1.60%)</title><rect x="4.8000%" y="149" width="1.6000%" height="15" fill="rgb(251,114,11)" fg:x="6" fg:w="2"/><text x="5.0500%" y="159.50"></text></g><g><title>syscall (2 samples, 1.60%)</title><rect x="4.8000%" y="133" width="1.6000%" height="15" fill="rgb(237,227,15)" fg:x="6" fg:w="2"/><text x="5.0500%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as laminarmq::common::split::SplitAt&lt;T&gt;&gt;::split_at (2 samples, 1.60%)</title><rect x="7.2000%" y="149" width="1.6000%" height="15" fill="rgb(213,182,23)" fg:x="9" fg:w="2"/><text x="7.4500%" y="159.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (1 samples, 0.80%)</title><rect x="8.8000%" y="149" width="0.8000%" height="15" fill="rgb(216,88,10)" fg:x="11" fg:w="1"/><text x="9.0500%" y="159.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.80%)</title><rect x="8.8000%" y="133" width="0.8000%" height="15" fill="rgb(247,110,12)" fg:x="11" fg:w="1"/><text x="9.0500%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorageError as core::convert::From&lt;std::io::error::Error&gt;&gt;::from (1 samples, 0.80%)</title><rect x="9.6000%" y="149" width="0.8000%" height="15" fill="rgb(222,211,23)" fg:x="12" fg:w="1"/><text x="9.8500%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.80%)</title><rect x="10.4000%" y="149" width="0.8000%" height="15" fill="rgb(236,192,0)" fg:x="13" fg:w="1"/><text x="10.6500%" y="159.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.80%)</title><rect x="12.0000%" y="133" width="0.8000%" height="15" fill="rgb(209,207,6)" fg:x="15" fg:w="1"/><text x="12.2500%" y="143.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (1 samples, 0.80%)</title><rect x="12.0000%" y="117" width="0.8000%" height="15" fill="rgb(208,201,8)" fg:x="15" fg:w="1"/><text x="12.2500%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (8 samples, 6.40%)</title><rect x="13.6000%" y="101" width="6.4000%" height="15" fill="rgb(210,18,21)" fg:x="17" fg:w="8"/><text x="13.8500%" y="111.50">tokio::r..</text></g><g><title>syscall (8 samples, 6.40%)</title><rect x="13.6000%" y="85" width="6.4000%" height="15" fill="rgb(213,155,17)" fg:x="17" fg:w="8"/><text x="13.8500%" y="95.50">syscall</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (11 samples, 8.80%)</title><rect x="12.8000%" y="133" width="8.8000%" height="15" fill="rgb(231,180,40)" fg:x="16" fg:w="11"/><text x="13.0500%" y="143.50">tokio::runti..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (10 samples, 8.00%)</title><rect x="13.6000%" y="117" width="8.0000%" height="15" fill="rgb(245,176,21)" fg:x="17" fg:w="10"/><text x="13.8500%" y="127.50">tokio::runt..</text></g><g><title>tokio::runtime::task::raw::RawTask::new (2 samples, 1.60%)</title><rect x="20.0000%" y="101" width="1.6000%" height="15" fill="rgb(248,11,54)" fg:x="25" fg:w="2"/><text x="20.2500%" y="111.50"></text></g><g><title>__rdl_alloc (2 samples, 1.60%)</title><rect x="20.0000%" y="85" width="1.6000%" height="15" fill="rgb(239,53,9)" fg:x="25" fg:w="2"/><text x="20.2500%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 1.60%)</title><rect x="20.0000%" y="69" width="1.6000%" height="15" fill="rgb(230,193,22)" fg:x="25" fg:w="2"/><text x="20.2500%" y="79.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (2 samples, 1.60%)</title><rect x="20.0000%" y="53" width="1.6000%" height="15" fill="rgb(243,219,23)" fg:x="25" fg:w="2"/><text x="20.2500%" y="63.50"></text></g><g><title>posix_memalign (2 samples, 1.60%)</title><rect x="20.0000%" y="37" width="1.6000%" height="15" fill="rgb(217,92,12)" fg:x="25" fg:w="2"/><text x="20.2500%" y="47.50"></text></g><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (20 samples, 16.00%)</title><rect x="6.4000%" y="197" width="16.0000%" height="15" fill="rgb(240,91,48)" fg:x="8" fg:w="20"/><text x="6.6500%" y="207.50">&lt;futures_lite::stream::Co..</text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (20 samples, 16.00%)</title><rect x="6.4000%" y="181" width="16.0000%" height="15" fill="rgb(239,68,48)" fg:x="8" fg:w="20"/><text x="6.6500%" y="191.50">&lt;async_stream::async_stre..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (19 samples, 15.20%)</title><rect x="7.2000%" y="165" width="15.2000%" height="15" fill="rgb(245,86,10)" fg:x="9" fg:w="19"/><text x="7.4500%" y="175.50">&lt;laminarmq::storage::co..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::read::{{closure}} (14 samples, 11.20%)</title><rect x="11.2000%" y="149" width="11.2000%" height="15" fill="rgb(237,69,40)" fg:x="14" fg:w="14"/><text x="11.4500%" y="159.50">laminarmq::stora..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (1 samples, 0.80%)</title><rect x="21.6000%" y="133" width="0.8000%" height="15" fill="rgb(248,65,40)" fg:x="27" fg:w="1"/><text x="21.8500%" y="143.50"></text></g><g><title>tokio::runtime::park::drop_waker (1 samples, 0.80%)</title><rect x="21.6000%" y="117" width="0.8000%" height="15" fill="rgb(249,12,35)" fg:x="27" fg:w="1"/><text x="21.8500%" y="127.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage as laminarmq::storage::Sizable&gt;::size (1 samples, 0.80%)</title><rect x="23.2000%" y="181" width="0.8000%" height="15" fill="rgb(223,151,36)" fg:x="29" fg:w="1"/><text x="23.4500%" y="191.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (15 samples, 12.00%)</title><rect x="30.4000%" y="165" width="12.0000%" height="15" fill="rgb(245,190,42)" fg:x="38" fg:w="15"/><text x="30.6500%" y="175.50">&lt;futures_lite::str..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (15 samples, 12.00%)</title><rect x="30.4000%" y="149" width="12.0000%" height="15" fill="rgb(208,6,15)" fg:x="38" fg:w="15"/><text x="30.6500%" y="159.50">&lt;crc32fast::Hasher..</text></g><g><title>crc32fast::baseline::update_fast_16 (15 samples, 12.00%)</title><rect x="30.4000%" y="133" width="12.0000%" height="15" fill="rgb(219,103,7)" fg:x="38" fg:w="15"/><text x="30.6500%" y="143.50">crc32fast::baselin..</text></g><g><title>__libc_free (4 samples, 3.20%)</title><rect x="42.4000%" y="165" width="3.2000%" height="15" fill="rgb(232,97,0)" fg:x="53" fg:w="4"/><text x="42.6500%" y="175.50">__l..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (1 samples, 0.80%)</title><rect x="45.6000%" y="165" width="0.8000%" height="15" fill="rgb(231,167,2)" fg:x="57" fg:w="1"/><text x="45.8500%" y="175.50"></text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice::{{closure}} (5 samples, 4.00%)</title><rect x="46.4000%" y="165" width="4.0000%" height="15" fill="rgb(248,140,33)" fg:x="58" fg:w="5"/><text x="46.6500%" y="175.50">lami..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (4 samples, 3.20%)</title><rect x="47.2000%" y="149" width="3.2000%" height="15" fill="rgb(212,200,38)" fg:x="59" fg:w="4"/><text x="47.4500%" y="159.50">&lt;to..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.80%)</title><rect x="49.6000%" y="133" width="0.8000%" height="15" fill="rgb(218,192,13)" fg:x="62" fg:w="1"/><text x="49.8500%" y="143.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.80%)</title><rect x="49.6000%" y="117" width="0.8000%" height="15" fill="rgb(230,138,39)" fg:x="62" fg:w="1"/><text x="49.8500%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1 samples, 0.80%)</title><rect x="49.6000%" y="101" width="0.8000%" height="15" fill="rgb(213,212,32)" fg:x="62" fg:w="1"/><text x="49.8500%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.80%)</title><rect x="49.6000%" y="85" width="0.8000%" height="15" fill="rgb(218,50,45)" fg:x="62" fg:w="1"/><text x="49.8500%" y="95.50"></text></g><g><title>syscall (1 samples, 0.80%)</title><rect x="49.6000%" y="69" width="0.8000%" height="15" fill="rgb(224,130,37)" fg:x="62" fg:w="1"/><text x="49.8500%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.80%)</title><rect x="50.4000%" y="149" width="0.8000%" height="15" fill="rgb(225,89,47)" fg:x="63" fg:w="1"/><text x="50.6500%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.80%)</title><rect x="50.4000%" y="133" width="0.8000%" height="15" fill="rgb(225,190,32)" fg:x="63" fg:w="1"/><text x="50.6500%" y="143.50"></text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (37 samples, 29.60%)</title><rect x="24.0000%" y="181" width="29.6000%" height="15" fill="rgb(228,149,25)" fg:x="30" fg:w="37"/><text x="24.2500%" y="191.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (4 samples, 3.20%)</title><rect x="50.4000%" y="165" width="3.2000%" height="15" fill="rgb(216,218,27)" fg:x="63" fg:w="4"/><text x="50.6500%" y="175.50">lam..</text></g><g><title>malloc (3 samples, 2.40%)</title><rect x="51.2000%" y="149" width="2.4000%" height="15" fill="rgb(233,113,3)" fg:x="64" fg:w="3"/><text x="51.4500%" y="159.50">ma..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice::{{closure}} (1 samples, 0.80%)</title><rect x="53.6000%" y="165" width="0.8000%" height="15" fill="rgb(252,219,19)" fg:x="67" fg:w="1"/><text x="53.8500%" y="175.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (1 samples, 0.80%)</title><rect x="53.6000%" y="149" width="0.8000%" height="15" fill="rgb(228,104,6)" fg:x="67" fg:w="1"/><text x="53.8500%" y="159.50"></text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.80%)</title><rect x="53.6000%" y="133" width="0.8000%" height="15" fill="rgb(250,159,53)" fg:x="67" fg:w="1"/><text x="53.8500%" y="143.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.80%)</title><rect x="53.6000%" y="117" width="0.8000%" height="15" fill="rgb(232,229,35)" fg:x="67" fg:w="1"/><text x="53.8500%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1 samples, 0.80%)</title><rect x="53.6000%" y="101" width="0.8000%" height="15" fill="rgb(240,62,17)" fg:x="67" fg:w="1"/><text x="53.8500%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.80%)</title><rect x="53.6000%" y="85" width="0.8000%" height="15" fill="rgb(208,222,33)" fg:x="67" fg:w="1"/><text x="53.8500%" y="95.50"></text></g><g><title>syscall (1 samples, 0.80%)</title><rect x="53.6000%" y="69" width="0.8000%" height="15" fill="rgb(248,178,1)" fg:x="67" fg:w="1"/><text x="53.8500%" y="79.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (41 samples, 32.80%)</title><rect x="22.4000%" y="197" width="32.8000%" height="15" fill="rgb(214,205,15)" fg:x="28" fg:w="41"/><text x="22.6500%" y="207.50">&lt;laminarmq::storage::commit_log::segmented_log::Segme..</text></g><g><title>laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt;::append::{{closure}} (2 samples, 1.60%)</title><rect x="53.6000%" y="181" width="1.6000%" height="15" fill="rgb(244,43,49)" fg:x="67" fg:w="2"/><text x="53.8500%" y="191.50"></text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (1 samples, 0.80%)</title><rect x="54.4000%" y="165" width="0.8000%" height="15" fill="rgb(238,10,52)" fg:x="68" fg:w="1"/><text x="54.6500%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.80%)</title><rect x="54.4000%" y="149" width="0.8000%" height="15" fill="rgb(233,16,15)" fg:x="68" fg:w="1"/><text x="54.6500%" y="159.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_random_read_segmented_log::{{closure}} (63 samples, 50.40%)</title><rect x="6.4000%" y="213" width="50.4000%" height="15" fill="rgb(240,153,43)" fg:x="8" fg:w="63"/><text x="6.6500%" y="223.50">segmented_log_read_stream::time_tokio_std_random_read_segmented_log::{{closure}}</text></g><g><title>malloc (2 samples, 1.60%)</title><rect x="55.2000%" y="197" width="1.6000%" height="15" fill="rgb(207,13,13)" fg:x="69" fg:w="2"/><text x="55.4500%" y="207.50"></text></g><g><title>std::sys::unix::futex::futex_wait (15 samples, 12.00%)</title><rect x="56.8000%" y="165" width="12.0000%" height="15" fill="rgb(225,130,44)" fg:x="71" fg:w="15"/><text x="57.0500%" y="175.50">std::sys::unix::fu..</text></g><g><title>syscall (15 samples, 12.00%)</title><rect x="56.8000%" y="149" width="12.0000%" height="15" fill="rgb(217,93,42)" fg:x="71" fg:w="15"/><text x="57.0500%" y="159.50">syscall</text></g><g><title>segmented_log_r (87 samples, 69.60%)</title><rect x="0.0000%" y="565" width="69.6000%" height="15" fill="rgb(252,28,10)" fg:x="0" fg:w="87"/><text x="0.2500%" y="575.50">segmented_log_r</text></g><g><title>_start (87 samples, 69.60%)</title><rect x="0.0000%" y="549" width="69.6000%" height="15" fill="rgb(214,60,19)" fg:x="0" fg:w="87"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (87 samples, 69.60%)</title><rect x="0.0000%" y="533" width="69.6000%" height="15" fill="rgb(251,14,32)" fg:x="0" fg:w="87"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (87 samples, 69.60%)</title><rect x="0.0000%" y="517" width="69.6000%" height="15" fill="rgb(225,86,41)" fg:x="0" fg:w="87"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (87 samples, 69.60%)</title><rect x="0.0000%" y="501" width="69.6000%" height="15" fill="rgb(234,165,43)" fg:x="0" fg:w="87"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (87 samples, 69.60%)</title><rect x="0.0000%" y="485" width="69.6000%" height="15" fill="rgb(210,45,29)" fg:x="0" fg:w="87"/><text x="0.2500%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (87 samples, 69.60%)</title><rect x="0.0000%" y="469" width="69.6000%" height="15" fill="rgb(234,44,35)" fg:x="0" fg:w="87"/><text x="0.2500%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (87 samples, 69.60%)</title><rect x="0.0000%" y="453" width="69.6000%" height="15" fill="rgb(227,119,31)" fg:x="0" fg:w="87"/><text x="0.2500%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (87 samples, 69.60%)</title><rect x="0.0000%" y="437" width="69.6000%" height="15" fill="rgb(236,6,34)" fg:x="0" fg:w="87"/><text x="0.2500%" y="447.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (87 samples, 69.60%)</title><rect x="0.0000%" y="421" width="69.6000%" height="15" fill="rgb(231,17,40)" fg:x="0" fg:w="87"/><text x="0.2500%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (87 samples, 69.60%)</title><rect x="0.0000%" y="405" width="69.6000%" height="15" fill="rgb(249,27,13)" fg:x="0" fg:w="87"/><text x="0.2500%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (87 samples, 69.60%)</title><rect x="0.0000%" y="389" width="69.6000%" height="15" fill="rgb(232,103,19)" fg:x="0" fg:w="87"/><text x="0.2500%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (87 samples, 69.60%)</title><rect x="0.0000%" y="373" width="69.6000%" height="15" fill="rgb(213,13,7)" fg:x="0" fg:w="87"/><text x="0.2500%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (87 samples, 69.60%)</title><rect x="0.0000%" y="357" width="69.6000%" height="15" fill="rgb(241,181,14)" fg:x="0" fg:w="87"/><text x="0.2500%" y="367.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (87 samples, 69.60%)</title><rect x="0.0000%" y="341" width="69.6000%" height="15" fill="rgb(205,185,33)" fg:x="0" fg:w="87"/><text x="0.2500%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>segmented_log_read_stream::main (87 samples, 69.60%)</title><rect x="0.0000%" y="325" width="69.6000%" height="15" fill="rgb(224,32,7)" fg:x="0" fg:w="87"/><text x="0.2500%" y="335.50">segmented_log_read_stream::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (87 samples, 69.60%)</title><rect x="0.0000%" y="309" width="69.6000%" height="15" fill="rgb(242,206,24)" fg:x="0" fg:w="87"/><text x="0.2500%" y="319.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (87 samples, 69.60%)</title><rect x="0.0000%" y="293" width="69.6000%" height="15" fill="rgb(229,84,3)" fg:x="0" fg:w="87"/><text x="0.2500%" y="303.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (79 samples, 63.20%)</title><rect x="6.4000%" y="277" width="63.2000%" height="15" fill="rgb(214,68,32)" fg:x="8" fg:w="79"/><text x="6.6500%" y="287.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (79 samples, 63.20%)</title><rect x="6.4000%" y="261" width="63.2000%" height="15" fill="rgb(231,76,8)" fg:x="8" fg:w="79"/><text x="6.6500%" y="271.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (79 samples, 63.20%)</title><rect x="6.4000%" y="245" width="63.2000%" height="15" fill="rgb(222,160,5)" fg:x="8" fg:w="79"/><text x="6.6500%" y="255.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (79 samples, 63.20%)</title><rect x="6.4000%" y="229" width="63.2000%" height="15" fill="rgb(239,34,33)" fg:x="8" fg:w="79"/><text x="6.6500%" y="239.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (16 samples, 12.80%)</title><rect x="56.8000%" y="213" width="12.8000%" height="15" fill="rgb(221,132,45)" fg:x="71" fg:w="16"/><text x="57.0500%" y="223.50">tokio::runtime::par..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (16 samples, 12.80%)</title><rect x="56.8000%" y="197" width="12.8000%" height="15" fill="rgb(218,23,0)" fg:x="71" fg:w="16"/><text x="57.0500%" y="207.50">std::sys::unix::loc..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (16 samples, 12.80%)</title><rect x="56.8000%" y="181" width="12.8000%" height="15" fill="rgb(254,178,38)" fg:x="71" fg:w="16"/><text x="57.0500%" y="191.50">std::sys::unix::loc..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.80%)</title><rect x="68.8000%" y="165" width="0.8000%" height="15" fill="rgb(206,89,41)" fg:x="86" fg:w="1"/><text x="69.0500%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.80%)</title><rect x="68.8000%" y="149" width="0.8000%" height="15" fill="rgb(225,201,12)" fg:x="86" fg:w="1"/><text x="69.0500%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.80%)</title><rect x="68.8000%" y="133" width="0.8000%" height="15" fill="rgb(250,18,48)" fg:x="86" fg:w="1"/><text x="69.0500%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.80%)</title><rect x="72.0000%" y="405" width="0.8000%" height="15" fill="rgb(212,184,32)" fg:x="90" fg:w="1"/><text x="72.2500%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (16 samples, 12.80%)</title><rect x="72.0000%" y="453" width="12.8000%" height="15" fill="rgb(213,154,8)" fg:x="90" fg:w="16"/><text x="72.2500%" y="463.50">std::sys::unix::loc..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (16 samples, 12.80%)</title><rect x="72.0000%" y="437" width="12.8000%" height="15" fill="rgb(237,214,33)" fg:x="90" fg:w="16"/><text x="72.2500%" y="447.50">std::sys::unix::loc..</text></g><g><title>std::sys::unix::futex::futex_wait (16 samples, 12.80%)</title><rect x="72.0000%" y="421" width="12.8000%" height="15" fill="rgb(234,101,53)" fg:x="90" fg:w="16"/><text x="72.2500%" y="431.50">std::sys::unix::fut..</text></g><g><title>syscall (15 samples, 12.00%)</title><rect x="72.8000%" y="405" width="12.0000%" height="15" fill="rgb(241,124,29)" fg:x="91" fg:w="15"/><text x="73.0500%" y="415.50">syscall</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.80%)</title><rect x="84.8000%" y="437" width="0.8000%" height="15" fill="rgb(250,43,33)" fg:x="106" fg:w="1"/><text x="85.0500%" y="447.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.80%)</title><rect x="84.8000%" y="421" width="0.8000%" height="15" fill="rgb(233,13,48)" fg:x="106" fg:w="1"/><text x="85.0500%" y="431.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.80%)</title><rect x="84.8000%" y="405" width="0.8000%" height="15" fill="rgb(215,101,31)" fg:x="106" fg:w="1"/><text x="85.0500%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.80%)</title><rect x="84.8000%" y="389" width="0.8000%" height="15" fill="rgb(251,79,40)" fg:x="106" fg:w="1"/><text x="85.0500%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (1 samples, 0.80%)</title><rect x="84.8000%" y="373" width="0.8000%" height="15" fill="rgb(206,64,19)" fg:x="106" fg:w="1"/><text x="85.0500%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::write (1 samples, 0.80%)</title><rect x="84.8000%" y="357" width="0.8000%" height="15" fill="rgb(253,62,42)" fg:x="106" fg:w="1"/><text x="85.0500%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.80%)</title><rect x="84.8000%" y="341" width="0.8000%" height="15" fill="rgb(207,151,38)" fg:x="106" fg:w="1"/><text x="85.0500%" y="351.50"></text></g><g><title>__write (1 samples, 0.80%)</title><rect x="84.8000%" y="325" width="0.8000%" height="15" fill="rgb(206,119,25)" fg:x="106" fg:w="1"/><text x="85.0500%" y="335.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.80%)</title><rect x="86.4000%" y="389" width="0.8000%" height="15" fill="rgb(223,61,6)" fg:x="108" fg:w="1"/><text x="86.6500%" y="399.50"></text></g><g><title>std::os::unix::fs::FileExt::read_exact_at (9 samples, 7.20%)</title><rect x="87.2000%" y="389" width="7.2000%" height="15" fill="rgb(211,12,1)" fg:x="109" fg:w="9"/><text x="87.4500%" y="399.50">std::os::u..</text></g><g><title>&lt;std::fs::File as std::os::unix::fs::FileExt&gt;::read_at (9 samples, 7.20%)</title><rect x="87.2000%" y="373" width="7.2000%" height="15" fill="rgb(217,99,8)" fg:x="109" fg:w="9"/><text x="87.4500%" y="383.50">&lt;std::fs::..</text></g><g><title>std::sys::unix::fs::File::read_at (9 samples, 7.20%)</title><rect x="87.2000%" y="357" width="7.2000%" height="15" fill="rgb(230,12,19)" fg:x="109" fg:w="9"/><text x="87.4500%" y="367.50">std::sys::..</text></g><g><title>std::sys::unix::fd::FileDesc::read_at (9 samples, 7.20%)</title><rect x="87.2000%" y="341" width="7.2000%" height="15" fill="rgb(227,36,13)" fg:x="109" fg:w="9"/><text x="87.4500%" y="351.50">std::sys::..</text></g><g><title>__pread64 (9 samples, 7.20%)</title><rect x="87.2000%" y="325" width="7.2000%" height="15" fill="rgb(250,48,53)" fg:x="109" fg:w="9"/><text x="87.4500%" y="335.50">__pread64</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (12 samples, 9.60%)</title><rect x="85.6000%" y="437" width="9.6000%" height="15" fill="rgb(249,153,43)" fg:x="107" fg:w="12"/><text x="85.8500%" y="447.50">tokio::runtime..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (12 samples, 9.60%)</title><rect x="85.6000%" y="421" width="9.6000%" height="15" fill="rgb(230,80,49)" fg:x="107" fg:w="12"/><text x="85.8500%" y="431.50">tokio::loom::s..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 9.60%)</title><rect x="85.6000%" y="405" width="9.6000%" height="15" fill="rgb(220,80,36)" fg:x="107" fg:w="12"/><text x="85.8500%" y="415.50">&lt;tokio::runtim..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (1 samples, 0.80%)</title><rect x="94.4000%" y="389" width="0.8000%" height="15" fill="rgb(225,113,13)" fg:x="118" fg:w="1"/><text x="94.6500%" y="399.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (1 samples, 0.80%)</title><rect x="94.4000%" y="373" width="0.8000%" height="15" fill="rgb(241,61,22)" fg:x="118" fg:w="1"/><text x="94.6500%" y="383.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.80%)</title><rect x="94.4000%" y="357" width="0.8000%" height="15" fill="rgb(217,86,9)" fg:x="118" fg:w="1"/><text x="94.6500%" y="367.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.80%)</title><rect x="94.4000%" y="341" width="0.8000%" height="15" fill="rgb(226,160,28)" fg:x="118" fg:w="1"/><text x="94.6500%" y="351.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (1 samples, 0.80%)</title><rect x="94.4000%" y="325" width="0.8000%" height="15" fill="rgb(242,182,34)" fg:x="118" fg:w="1"/><text x="94.6500%" y="335.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (1 samples, 0.80%)</title><rect x="94.4000%" y="309" width="0.8000%" height="15" fill="rgb(229,79,25)" fg:x="118" fg:w="1"/><text x="94.6500%" y="319.50"></text></g><g><title>unlinkat (1 samples, 0.80%)</title><rect x="94.4000%" y="293" width="0.8000%" height="15" fill="rgb(246,202,5)" fg:x="118" fg:w="1"/><text x="94.6500%" y="303.50"></text></g><g><title>all (125 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(233,148,32)" fg:x="0" fg:w="125"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (38 samples, 30.40%)</title><rect x="69.6000%" y="565" width="30.4000%" height="15" fill="rgb(235,86,27)" fg:x="87" fg:w="38"/><text x="69.8500%" y="575.50">tokio-runtime-w</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (37 samples, 29.60%)</title><rect x="70.4000%" y="549" width="29.6000%" height="15" fill="rgb(207,216,8)" fg:x="88" fg:w="37"/><text x="70.6500%" y="559.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (37 samples, 29.60%)</title><rect x="70.4000%" y="533" width="29.6000%" height="15" fill="rgb(235,185,46)" fg:x="88" fg:w="37"/><text x="70.6500%" y="543.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (37 samples, 29.60%)</title><rect x="70.4000%" y="517" width="29.6000%" height="15" fill="rgb(246,174,12)" fg:x="88" fg:w="37"/><text x="70.6500%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (37 samples, 29.60%)</title><rect x="70.4000%" y="501" width="29.6000%" height="15" fill="rgb(221,209,51)" fg:x="88" fg:w="37"/><text x="70.6500%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (37 samples, 29.60%)</title><rect x="70.4000%" y="485" width="29.6000%" height="15" fill="rgb(250,141,48)" fg:x="88" fg:w="37"/><text x="70.6500%" y="495.50">std::sys_common::backtrace::__rust_begin_short_b..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (37 samples, 29.60%)</title><rect x="70.4000%" y="469" width="29.6000%" height="15" fill="rgb(236,131,14)" fg:x="88" fg:w="37"/><text x="70.6500%" y="479.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (19 samples, 15.20%)</title><rect x="84.8000%" y="453" width="15.2000%" height="15" fill="rgb(250,143,20)" fg:x="106" fg:w="19"/><text x="85.0500%" y="463.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (6 samples, 4.80%)</title><rect x="95.2000%" y="437" width="4.8000%" height="15" fill="rgb(205,153,33)" fg:x="119" fg:w="6"/><text x="95.4500%" y="447.50">tokio:..</text></g><g><title>tokio::runtime::park::wake_by_ref (5 samples, 4.00%)</title><rect x="96.0000%" y="421" width="4.0000%" height="15" fill="rgb(242,164,44)" fg:x="120" fg:w="5"/><text x="96.2500%" y="431.50">toki..</text></g><g><title>syscall (5 samples, 4.00%)</title><rect x="96.0000%" y="405" width="4.0000%" height="15" fill="rgb(224,224,7)" fg:x="120" fg:w="5"/><text x="96.2500%" y="415.50">sysc..</text></g></svg></svg>