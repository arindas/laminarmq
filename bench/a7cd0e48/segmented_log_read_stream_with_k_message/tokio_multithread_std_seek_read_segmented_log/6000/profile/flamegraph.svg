<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="117"><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (2 samples, 1.71%)</title><rect x="0.8547%" y="181" width="1.7094%" height="15" fill="rgb(239,157,53)" fg:x="1" fg:w="2"/><text x="1.1047%" y="191.50"></text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 1.71%)</title><rect x="0.8547%" y="165" width="1.7094%" height="15" fill="rgb(249,12,37)" fg:x="1" fg:w="2"/><text x="1.1047%" y="175.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (2 samples, 1.71%)</title><rect x="0.8547%" y="149" width="1.7094%" height="15" fill="rgb(248,166,41)" fg:x="1" fg:w="2"/><text x="1.1047%" y="159.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::read::{{closure}} (2 samples, 1.71%)</title><rect x="0.8547%" y="133" width="1.7094%" height="15" fill="rgb(236,175,46)" fg:x="1" fg:w="2"/><text x="1.1047%" y="143.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (2 samples, 1.71%)</title><rect x="0.8547%" y="117" width="1.7094%" height="15" fill="rgb(222,211,3)" fg:x="1" fg:w="2"/><text x="1.1047%" y="127.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (1 samples, 0.85%)</title><rect x="1.7094%" y="101" width="0.8547%" height="15" fill="rgb(211,163,1)" fg:x="2" fg:w="1"/><text x="1.9594%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.85%)</title><rect x="1.7094%" y="85" width="0.8547%" height="15" fill="rgb(209,41,5)" fg:x="2" fg:w="1"/><text x="1.9594%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.85%)</title><rect x="1.7094%" y="69" width="0.8547%" height="15" fill="rgb(251,33,19)" fg:x="2" fg:w="1"/><text x="1.9594%" y="79.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.85%)</title><rect x="1.7094%" y="53" width="0.8547%" height="15" fill="rgb(242,148,35)" fg:x="2" fg:w="1"/><text x="1.9594%" y="63.50"></text></g><g><title>syscall (1 samples, 0.85%)</title><rect x="1.7094%" y="37" width="0.8547%" height="15" fill="rgb(236,124,52)" fg:x="2" fg:w="1"/><text x="1.9594%" y="47.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (2 samples, 1.71%)</title><rect x="2.5641%" y="149" width="1.7094%" height="15" fill="rgb(217,108,3)" fg:x="3" fg:w="2"/><text x="2.8141%" y="159.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (2 samples, 1.71%)</title><rect x="2.5641%" y="133" width="1.7094%" height="15" fill="rgb(217,178,24)" fg:x="3" fg:w="2"/><text x="2.8141%" y="143.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (2 samples, 1.71%)</title><rect x="2.5641%" y="117" width="1.7094%" height="15" fill="rgb(212,110,1)" fg:x="3" fg:w="2"/><text x="2.8141%" y="127.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{{closure}} (6 samples, 5.13%)</title><rect x="0.8547%" y="197" width="5.1282%" height="15" fill="rgb(224,89,33)" fg:x="1" fg:w="6"/><text x="1.1047%" y="207.50">segmen..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (4 samples, 3.42%)</title><rect x="2.5641%" y="181" width="3.4188%" height="15" fill="rgb(223,108,49)" fg:x="3" fg:w="4"/><text x="2.8141%" y="191.50">&lt;la..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (4 samples, 3.42%)</title><rect x="2.5641%" y="165" width="3.4188%" height="15" fill="rgb(215,121,4)" fg:x="3" fg:w="4"/><text x="2.8141%" y="175.50">lam..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (2 samples, 1.71%)</title><rect x="4.2735%" y="149" width="1.7094%" height="15" fill="rgb(241,151,18)" fg:x="5" fg:w="2"/><text x="4.5235%" y="159.50"></text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (1 samples, 0.85%)</title><rect x="5.1282%" y="133" width="0.8547%" height="15" fill="rgb(207,120,21)" fg:x="6" fg:w="1"/><text x="5.3782%" y="143.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.85%)</title><rect x="5.1282%" y="117" width="0.8547%" height="15" fill="rgb(243,198,24)" fg:x="6" fg:w="1"/><text x="5.3782%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 9.40%)</title><rect x="0.8547%" y="277" width="9.4017%" height="15" fill="rgb(220,154,53)" fg:x="1" fg:w="11"/><text x="1.1047%" y="287.50">&lt;alloc::vec::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 9.40%)</title><rect x="0.8547%" y="261" width="9.4017%" height="15" fill="rgb(251,34,20)" fg:x="1" fg:w="11"/><text x="1.1047%" y="271.50">&lt;core::iter::..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (11 samples, 9.40%)</title><rect x="0.8547%" y="245" width="9.4017%" height="15" fill="rgb(223,128,18)" fg:x="1" fg:w="11"/><text x="1.1047%" y="255.50">criterion::be..</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (11 samples, 9.40%)</title><rect x="0.8547%" y="229" width="9.4017%" height="15" fill="rgb(217,124,25)" fg:x="1" fg:w="11"/><text x="1.1047%" y="239.50">&lt;tokio::runti..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (11 samples, 9.40%)</title><rect x="0.8547%" y="213" width="9.4017%" height="15" fill="rgb(216,187,31)" fg:x="1" fg:w="11"/><text x="1.1047%" y="223.50">tokio::runtim..</text></g><g><title>tokio::runtime::park::Inner::park (5 samples, 4.27%)</title><rect x="5.9829%" y="197" width="4.2735%" height="15" fill="rgb(216,142,4)" fg:x="7" fg:w="5"/><text x="6.2329%" y="207.50">tokio..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (5 samples, 4.27%)</title><rect x="5.9829%" y="181" width="4.2735%" height="15" fill="rgb(240,169,4)" fg:x="7" fg:w="5"/><text x="6.2329%" y="191.50">std::..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (5 samples, 4.27%)</title><rect x="5.9829%" y="165" width="4.2735%" height="15" fill="rgb(245,180,33)" fg:x="7" fg:w="5"/><text x="6.2329%" y="175.50">std::..</text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 4.27%)</title><rect x="5.9829%" y="149" width="4.2735%" height="15" fill="rgb(214,63,48)" fg:x="7" fg:w="5"/><text x="6.2329%" y="159.50">std::..</text></g><g><title>syscall (5 samples, 4.27%)</title><rect x="5.9829%" y="133" width="4.2735%" height="15" fill="rgb(221,4,32)" fg:x="7" fg:w="5"/><text x="6.2329%" y="143.50">sysca..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as laminarmq::common::split::SplitAt&lt;T&gt;&gt;::split_at (1 samples, 0.85%)</title><rect x="12.8205%" y="149" width="0.8547%" height="15" fill="rgb(252,162,30)" fg:x="15" fg:w="1"/><text x="13.0705%" y="159.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (1 samples, 0.85%)</title><rect x="13.6752%" y="149" width="0.8547%" height="15" fill="rgb(230,96,2)" fg:x="16" fg:w="1"/><text x="13.9252%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (5 samples, 4.27%)</title><rect x="16.2393%" y="85" width="4.2735%" height="15" fill="rgb(253,17,3)" fg:x="19" fg:w="5"/><text x="16.4893%" y="95.50">tokio..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (5 samples, 4.27%)</title><rect x="16.2393%" y="69" width="4.2735%" height="15" fill="rgb(211,188,7)" fg:x="19" fg:w="5"/><text x="16.4893%" y="79.50">tokio..</text></g><g><title>syscall (5 samples, 4.27%)</title><rect x="16.2393%" y="53" width="4.2735%" height="15" fill="rgb(225,52,41)" fg:x="19" fg:w="5"/><text x="16.4893%" y="63.50">sysca..</text></g><g><title>&lt;&amp;mut T as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (7 samples, 5.98%)</title><rect x="15.3846%" y="133" width="5.9829%" height="15" fill="rgb(224,16,25)" fg:x="18" fg:w="7"/><text x="15.6346%" y="143.50">&lt;&amp;mut T ..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (7 samples, 5.98%)</title><rect x="15.3846%" y="117" width="5.9829%" height="15" fill="rgb(227,10,53)" fg:x="18" fg:w="7"/><text x="15.6346%" y="127.50">&lt;tokio::..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (7 samples, 5.98%)</title><rect x="15.3846%" y="101" width="5.9829%" height="15" fill="rgb(246,102,0)" fg:x="18" fg:w="7"/><text x="15.6346%" y="111.50">tokio::r..</text></g><g><title>tokio::runtime::context::current::with_current (1 samples, 0.85%)</title><rect x="20.5128%" y="85" width="0.8547%" height="15" fill="rgb(239,2,22)" fg:x="24" fg:w="1"/><text x="20.7628%" y="95.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.85%)</title><rect x="21.3675%" y="117" width="0.8547%" height="15" fill="rgb(215,152,29)" fg:x="25" fg:w="1"/><text x="21.6175%" y="127.50"></text></g><g><title>__rdl_alloc (3 samples, 2.56%)</title><rect x="22.2222%" y="85" width="2.5641%" height="15" fill="rgb(216,176,30)" fg:x="26" fg:w="3"/><text x="22.4722%" y="95.50">__..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 2.56%)</title><rect x="22.2222%" y="69" width="2.5641%" height="15" fill="rgb(245,219,37)" fg:x="26" fg:w="3"/><text x="22.4722%" y="79.50">st..</text></g><g><title>std::sys::unix::alloc::aligned_malloc (3 samples, 2.56%)</title><rect x="22.2222%" y="53" width="2.5641%" height="15" fill="rgb(249,174,28)" fg:x="26" fg:w="3"/><text x="22.4722%" y="63.50">st..</text></g><g><title>posix_memalign (3 samples, 2.56%)</title><rect x="22.2222%" y="37" width="2.5641%" height="15" fill="rgb(214,180,49)" fg:x="26" fg:w="3"/><text x="22.4722%" y="47.50">po..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::read::{{closure}} (16 samples, 13.68%)</title><rect x="14.5299%" y="149" width="13.6752%" height="15" fill="rgb(225,162,53)" fg:x="17" fg:w="16"/><text x="14.7799%" y="159.50">&lt;laminarmq::storage::..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (8 samples, 6.84%)</title><rect x="21.3675%" y="133" width="6.8376%" height="15" fill="rgb(245,23,41)" fg:x="25" fg:w="8"/><text x="21.6175%" y="143.50">&lt;tokio::f..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (7 samples, 5.98%)</title><rect x="22.2222%" y="117" width="5.9829%" height="15" fill="rgb(225,225,31)" fg:x="26" fg:w="7"/><text x="22.4722%" y="127.50">tokio::r..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (7 samples, 5.98%)</title><rect x="22.2222%" y="101" width="5.9829%" height="15" fill="rgb(210,7,26)" fg:x="26" fg:w="7"/><text x="22.4722%" y="111.50">tokio::r..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (4 samples, 3.42%)</title><rect x="24.7863%" y="85" width="3.4188%" height="15" fill="rgb(240,122,10)" fg:x="29" fg:w="4"/><text x="25.0363%" y="95.50">tok..</text></g><g><title>syscall (4 samples, 3.42%)</title><rect x="24.7863%" y="69" width="3.4188%" height="15" fill="rgb(205,36,27)" fg:x="29" fg:w="4"/><text x="25.0363%" y="79.50">sys..</text></g><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (21 samples, 17.95%)</title><rect x="11.1111%" y="197" width="17.9487%" height="15" fill="rgb(238,225,5)" fg:x="13" fg:w="21"/><text x="11.3611%" y="207.50">&lt;futures_lite::stream::Count..</text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (21 samples, 17.95%)</title><rect x="11.1111%" y="181" width="17.9487%" height="15" fill="rgb(224,181,42)" fg:x="13" fg:w="21"/><text x="11.3611%" y="191.50">&lt;async_stream::async_stream:..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (21 samples, 17.95%)</title><rect x="11.1111%" y="165" width="17.9487%" height="15" fill="rgb(207,129,3)" fg:x="13" fg:w="21"/><text x="11.3611%" y="175.50">&lt;laminarmq::storage::commit_..</text></g><g><title>malloc (1 samples, 0.85%)</title><rect x="28.2051%" y="149" width="0.8547%" height="15" fill="rgb(230,189,40)" fg:x="33" fg:w="1"/><text x="28.4551%" y="159.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (4 samples, 3.42%)</title><rect x="33.3333%" y="165" width="3.4188%" height="15" fill="rgb(228,149,14)" fg:x="39" fg:w="4"/><text x="33.5833%" y="175.50">&lt;fu..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (3 samples, 2.56%)</title><rect x="34.1880%" y="149" width="2.5641%" height="15" fill="rgb(233,49,36)" fg:x="40" fg:w="3"/><text x="34.4380%" y="159.50">&lt;c..</text></g><g><title>crc32fast::baseline::update_fast_16 (3 samples, 2.56%)</title><rect x="34.1880%" y="133" width="2.5641%" height="15" fill="rgb(234,170,12)" fg:x="40" fg:w="3"/><text x="34.4380%" y="143.50">cr..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (3 samples, 2.56%)</title><rect x="38.4615%" y="149" width="2.5641%" height="15" fill="rgb(228,86,43)" fg:x="45" fg:w="3"/><text x="38.7115%" y="159.50">&lt;t..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.85%)</title><rect x="40.1709%" y="133" width="0.8547%" height="15" fill="rgb(234,24,45)" fg:x="47" fg:w="1"/><text x="40.4209%" y="143.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.85%)</title><rect x="40.1709%" y="117" width="0.8547%" height="15" fill="rgb(220,206,18)" fg:x="47" fg:w="1"/><text x="40.4209%" y="127.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 2.56%)</title><rect x="41.0256%" y="149" width="2.5641%" height="15" fill="rgb(231,49,5)" fg:x="48" fg:w="3"/><text x="41.2756%" y="159.50">to..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (2 samples, 1.71%)</title><rect x="43.5897%" y="149" width="1.7094%" height="15" fill="rgb(236,47,29)" fg:x="51" fg:w="2"/><text x="43.8397%" y="159.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.85%)</title><rect x="47.0085%" y="133" width="0.8547%" height="15" fill="rgb(246,112,37)" fg:x="55" fg:w="1"/><text x="47.2585%" y="143.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{{closure}} (44 samples, 37.61%)</title><rect x="11.1111%" y="213" width="37.6068%" height="15" fill="rgb(217,225,52)" fg:x="13" fg:w="44"/><text x="11.3611%" y="223.50">segmented_log_read_stream::time_tokio_std_seek_read_segmented..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (23 samples, 19.66%)</title><rect x="29.0598%" y="197" width="19.6581%" height="15" fill="rgb(226,0,42)" fg:x="34" fg:w="23"/><text x="29.3098%" y="207.50">&lt;laminarmq::storage::commit_log..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (22 samples, 18.80%)</title><rect x="29.9145%" y="181" width="18.8034%" height="15" fill="rgb(231,178,33)" fg:x="35" fg:w="22"/><text x="30.1645%" y="191.50">laminarmq::storage::Storage::..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (14 samples, 11.97%)</title><rect x="36.7521%" y="165" width="11.9658%" height="15" fill="rgb(207,73,49)" fg:x="43" fg:w="14"/><text x="37.0021%" y="175.50">&lt;laminarmq::storag..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (4 samples, 3.42%)</title><rect x="45.2991%" y="149" width="3.4188%" height="15" fill="rgb(241,54,23)" fg:x="53" fg:w="4"/><text x="45.5491%" y="159.50">tok..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (1 samples, 0.85%)</title><rect x="47.8632%" y="133" width="0.8547%" height="15" fill="rgb(208,22,40)" fg:x="56" fg:w="1"/><text x="48.1132%" y="143.50"></text></g><g><title>segmented_log_r (71 samples, 60.68%)</title><rect x="0.0000%" y="565" width="60.6838%" height="15" fill="rgb(251,38,4)" fg:x="0" fg:w="71"/><text x="0.2500%" y="575.50">segmented_log_r</text></g><g><title>_start (70 samples, 59.83%)</title><rect x="0.8547%" y="549" width="59.8291%" height="15" fill="rgb(239,126,9)" fg:x="1" fg:w="70"/><text x="1.1047%" y="559.50">_start</text></g><g><title>__libc_start_main (70 samples, 59.83%)</title><rect x="0.8547%" y="533" width="59.8291%" height="15" fill="rgb(251,111,28)" fg:x="1" fg:w="70"/><text x="1.1047%" y="543.50">__libc_start_main</text></g><g><title>main (70 samples, 59.83%)</title><rect x="0.8547%" y="517" width="59.8291%" height="15" fill="rgb(244,132,1)" fg:x="1" fg:w="70"/><text x="1.1047%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (70 samples, 59.83%)</title><rect x="0.8547%" y="501" width="59.8291%" height="15" fill="rgb(241,114,29)" fg:x="1" fg:w="70"/><text x="1.1047%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (70 samples, 59.83%)</title><rect x="0.8547%" y="485" width="59.8291%" height="15" fill="rgb(247,177,18)" fg:x="1" fg:w="70"/><text x="1.1047%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (70 samples, 59.83%)</title><rect x="0.8547%" y="469" width="59.8291%" height="15" fill="rgb(214,57,31)" fg:x="1" fg:w="70"/><text x="1.1047%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (70 samples, 59.83%)</title><rect x="0.8547%" y="453" width="59.8291%" height="15" fill="rgb(242,96,34)" fg:x="1" fg:w="70"/><text x="1.1047%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (70 samples, 59.83%)</title><rect x="0.8547%" y="437" width="59.8291%" height="15" fill="rgb(208,14,46)" fg:x="1" fg:w="70"/><text x="1.1047%" y="447.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (70 samples, 59.83%)</title><rect x="0.8547%" y="421" width="59.8291%" height="15" fill="rgb(220,14,45)" fg:x="1" fg:w="70"/><text x="1.1047%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (70 samples, 59.83%)</title><rect x="0.8547%" y="405" width="59.8291%" height="15" fill="rgb(245,136,27)" fg:x="1" fg:w="70"/><text x="1.1047%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (70 samples, 59.83%)</title><rect x="0.8547%" y="389" width="59.8291%" height="15" fill="rgb(214,167,38)" fg:x="1" fg:w="70"/><text x="1.1047%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (70 samples, 59.83%)</title><rect x="0.8547%" y="373" width="59.8291%" height="15" fill="rgb(212,198,5)" fg:x="1" fg:w="70"/><text x="1.1047%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (70 samples, 59.83%)</title><rect x="0.8547%" y="357" width="59.8291%" height="15" fill="rgb(249,89,8)" fg:x="1" fg:w="70"/><text x="1.1047%" y="367.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (70 samples, 59.83%)</title><rect x="0.8547%" y="341" width="59.8291%" height="15" fill="rgb(241,184,42)" fg:x="1" fg:w="70"/><text x="1.1047%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>segmented_log_read_stream::main (70 samples, 59.83%)</title><rect x="0.8547%" y="325" width="59.8291%" height="15" fill="rgb(212,56,19)" fg:x="1" fg:w="70"/><text x="1.1047%" y="335.50">segmented_log_read_stream::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (70 samples, 59.83%)</title><rect x="0.8547%" y="309" width="59.8291%" height="15" fill="rgb(230,177,40)" fg:x="1" fg:w="70"/><text x="1.1047%" y="319.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (70 samples, 59.83%)</title><rect x="0.8547%" y="293" width="59.8291%" height="15" fill="rgb(244,166,18)" fg:x="1" fg:w="70"/><text x="1.1047%" y="303.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (59 samples, 50.43%)</title><rect x="10.2564%" y="277" width="50.4274%" height="15" fill="rgb(220,148,31)" fg:x="12" fg:w="59"/><text x="10.5064%" y="287.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (59 samples, 50.43%)</title><rect x="10.2564%" y="261" width="50.4274%" height="15" fill="rgb(248,14,38)" fg:x="12" fg:w="59"/><text x="10.5064%" y="271.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (59 samples, 50.43%)</title><rect x="10.2564%" y="245" width="50.4274%" height="15" fill="rgb(208,3,18)" fg:x="12" fg:w="59"/><text x="10.5064%" y="255.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::blo..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (59 samples, 50.43%)</title><rect x="10.2564%" y="229" width="50.4274%" height="15" fill="rgb(229,108,33)" fg:x="12" fg:w="59"/><text x="10.5064%" y="239.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (14 samples, 11.97%)</title><rect x="48.7179%" y="213" width="11.9658%" height="15" fill="rgb(249,73,5)" fg:x="57" fg:w="14"/><text x="48.9679%" y="223.50">tokio::runtime::pa..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (14 samples, 11.97%)</title><rect x="48.7179%" y="197" width="11.9658%" height="15" fill="rgb(218,21,30)" fg:x="57" fg:w="14"/><text x="48.9679%" y="207.50">std::sys::unix::lo..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (14 samples, 11.97%)</title><rect x="48.7179%" y="181" width="11.9658%" height="15" fill="rgb(215,126,34)" fg:x="57" fg:w="14"/><text x="48.9679%" y="191.50">std::sys::unix::lo..</text></g><g><title>std::sys::unix::futex::futex_wait (14 samples, 11.97%)</title><rect x="48.7179%" y="165" width="11.9658%" height="15" fill="rgb(253,67,15)" fg:x="57" fg:w="14"/><text x="48.9679%" y="175.50">std::sys::unix::fu..</text></g><g><title>syscall (14 samples, 11.97%)</title><rect x="48.7179%" y="149" width="11.9658%" height="15" fill="rgb(253,58,47)" fg:x="57" fg:w="14"/><text x="48.9679%" y="159.50">syscall</text></g><g><title>std::sys::unix::futex::futex_wait (21 samples, 17.95%)</title><rect x="61.5385%" y="421" width="17.9487%" height="15" fill="rgb(222,7,12)" fg:x="72" fg:w="21"/><text x="61.7885%" y="431.50">std::sys::unix::futex::futex..</text></g><g><title>syscall (21 samples, 17.95%)</title><rect x="61.5385%" y="405" width="17.9487%" height="15" fill="rgb(213,113,24)" fg:x="72" fg:w="21"/><text x="61.7885%" y="415.50">syscall</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.85%)</title><rect x="79.4872%" y="405" width="0.8547%" height="15" fill="rgb(212,111,5)" fg:x="93" fg:w="1"/><text x="79.7372%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.85%)</title><rect x="79.4872%" y="389" width="0.8547%" height="15" fill="rgb(206,26,32)" fg:x="93" fg:w="1"/><text x="79.7372%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (24 samples, 20.51%)</title><rect x="61.5385%" y="453" width="20.5128%" height="15" fill="rgb(225,32,15)" fg:x="72" fg:w="24"/><text x="61.7885%" y="463.50">std::sys::unix::locks::futex_con..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (24 samples, 20.51%)</title><rect x="61.5385%" y="437" width="20.5128%" height="15" fill="rgb(237,65,46)" fg:x="72" fg:w="24"/><text x="61.7885%" y="447.50">std::sys::unix::locks::futex_con..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (3 samples, 2.56%)</title><rect x="79.4872%" y="421" width="2.5641%" height="15" fill="rgb(210,114,10)" fg:x="93" fg:w="3"/><text x="79.7372%" y="431.50">st..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (2 samples, 1.71%)</title><rect x="80.3419%" y="405" width="1.7094%" height="15" fill="rgb(235,116,19)" fg:x="94" fg:w="2"/><text x="80.5919%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (2 samples, 1.71%)</title><rect x="80.3419%" y="389" width="1.7094%" height="15" fill="rgb(209,50,25)" fg:x="94" fg:w="2"/><text x="80.5919%" y="399.50"></text></g><g><title>core::hint::spin_loop (2 samples, 1.71%)</title><rect x="80.3419%" y="373" width="1.7094%" height="15" fill="rgb(208,156,35)" fg:x="94" fg:w="2"/><text x="80.5919%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (2 samples, 1.71%)</title><rect x="80.3419%" y="357" width="1.7094%" height="15" fill="rgb(208,85,28)" fg:x="94" fg:w="2"/><text x="80.5919%" y="367.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (3 samples, 2.56%)</title><rect x="83.7607%" y="389" width="2.5641%" height="15" fill="rgb(228,19,41)" fg:x="98" fg:w="3"/><text x="84.0107%" y="399.50">&lt;&amp;..</text></g><g><title>std::sys::unix::fs::File::seek (3 samples, 2.56%)</title><rect x="83.7607%" y="373" width="2.5641%" height="15" fill="rgb(233,159,12)" fg:x="98" fg:w="3"/><text x="84.0107%" y="383.50">st..</text></g><g><title>llseek (3 samples, 2.56%)</title><rect x="83.7607%" y="357" width="2.5641%" height="15" fill="rgb(215,46,54)" fg:x="98" fg:w="3"/><text x="84.0107%" y="367.50">ll..</text></g><g><title>std::io::Write::write_all (2 samples, 1.71%)</title><rect x="86.3248%" y="389" width="1.7094%" height="15" fill="rgb(217,73,17)" fg:x="101" fg:w="2"/><text x="86.5748%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (2 samples, 1.71%)</title><rect x="86.3248%" y="373" width="1.7094%" height="15" fill="rgb(246,141,16)" fg:x="101" fg:w="2"/><text x="86.5748%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::write (2 samples, 1.71%)</title><rect x="86.3248%" y="357" width="1.7094%" height="15" fill="rgb(252,6,27)" fg:x="101" fg:w="2"/><text x="86.5748%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 1.71%)</title><rect x="86.3248%" y="341" width="1.7094%" height="15" fill="rgb(250,68,6)" fg:x="101" fg:w="2"/><text x="86.5748%" y="351.50"></text></g><g><title>__write (2 samples, 1.71%)</title><rect x="86.3248%" y="325" width="1.7094%" height="15" fill="rgb(229,91,32)" fg:x="101" fg:w="2"/><text x="86.5748%" y="335.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8 samples, 6.84%)</title><rect x="82.9060%" y="437" width="6.8376%" height="15" fill="rgb(218,113,35)" fg:x="97" fg:w="8"/><text x="83.1560%" y="447.50">&lt;core::pa..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (7 samples, 5.98%)</title><rect x="83.7607%" y="421" width="5.9829%" height="15" fill="rgb(210,150,54)" fg:x="98" fg:w="7"/><text x="84.0107%" y="431.50">tokio::l..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 5.98%)</title><rect x="83.7607%" y="405" width="5.9829%" height="15" fill="rgb(217,197,12)" fg:x="98" fg:w="7"/><text x="84.0107%" y="415.50">&lt;tokio::..</text></g><g><title>tokio::io::blocking::Buf::read_from (2 samples, 1.71%)</title><rect x="88.0342%" y="389" width="1.7094%" height="15" fill="rgb(215,193,46)" fg:x="103" fg:w="2"/><text x="88.2842%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (2 samples, 1.71%)</title><rect x="88.0342%" y="373" width="1.7094%" height="15" fill="rgb(224,183,19)" fg:x="103" fg:w="2"/><text x="88.2842%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::read (2 samples, 1.71%)</title><rect x="88.0342%" y="357" width="1.7094%" height="15" fill="rgb(221,40,53)" fg:x="103" fg:w="2"/><text x="88.2842%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (2 samples, 1.71%)</title><rect x="88.0342%" y="341" width="1.7094%" height="15" fill="rgb(244,141,19)" fg:x="103" fg:w="2"/><text x="88.2842%" y="351.50"></text></g><g><title>__read (2 samples, 1.71%)</title><rect x="88.0342%" y="325" width="1.7094%" height="15" fill="rgb(207,224,41)" fg:x="103" fg:w="2"/><text x="88.2842%" y="335.50"></text></g><g><title>syscall (10 samples, 8.55%)</title><rect x="89.7436%" y="405" width="8.5470%" height="15" fill="rgb(220,54,26)" fg:x="105" fg:w="10"/><text x="89.9936%" y="415.50">syscall</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (45 samples, 38.46%)</title><rect x="60.6838%" y="533" width="38.4615%" height="15" fill="rgb(235,146,25)" fg:x="71" fg:w="45"/><text x="60.9338%" y="543.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (45 samples, 38.46%)</title><rect x="60.6838%" y="517" width="38.4615%" height="15" fill="rgb(253,213,47)" fg:x="71" fg:w="45"/><text x="60.9338%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (45 samples, 38.46%)</title><rect x="60.6838%" y="501" width="38.4615%" height="15" fill="rgb(227,50,41)" fg:x="71" fg:w="45"/><text x="60.9338%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (45 samples, 38.46%)</title><rect x="60.6838%" y="485" width="38.4615%" height="15" fill="rgb(225,214,8)" fg:x="71" fg:w="45"/><text x="60.9338%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (45 samples, 38.46%)</title><rect x="60.6838%" y="469" width="38.4615%" height="15" fill="rgb(249,20,51)" fg:x="71" fg:w="45"/><text x="60.9338%" y="479.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (20 samples, 17.09%)</title><rect x="82.0513%" y="453" width="17.0940%" height="15" fill="rgb(234,10,39)" fg:x="96" fg:w="20"/><text x="82.3013%" y="463.50">tokio::runtime::task::harn..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (11 samples, 9.40%)</title><rect x="89.7436%" y="437" width="9.4017%" height="15" fill="rgb(243,156,44)" fg:x="105" fg:w="11"/><text x="89.9936%" y="447.50">tokio::runtim..</text></g><g><title>tokio::runtime::park::wake_by_ref (11 samples, 9.40%)</title><rect x="89.7436%" y="421" width="9.4017%" height="15" fill="rgb(207,117,26)" fg:x="105" fg:w="11"/><text x="89.9936%" y="431.50">tokio::runtim..</text></g><g><title>tokio::runtime::park::Inner::unpark (1 samples, 0.85%)</title><rect x="98.2906%" y="405" width="0.8547%" height="15" fill="rgb(227,32,25)" fg:x="115" fg:w="1"/><text x="98.5406%" y="415.50"></text></g><g><title>all (117 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(230,102,7)" fg:x="0" fg:w="117"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (46 samples, 39.32%)</title><rect x="60.6838%" y="565" width="39.3162%" height="15" fill="rgb(211,115,50)" fg:x="71" fg:w="46"/><text x="60.9338%" y="575.50">tokio-runtime-w</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (46 samples, 39.32%)</title><rect x="60.6838%" y="549" width="39.3162%" height="15" fill="rgb(242,183,29)" fg:x="71" fg:w="46"/><text x="60.9338%" y="559.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (1 samples, 0.85%)</title><rect x="99.1453%" y="533" width="0.8547%" height="15" fill="rgb(206,5,31)" fg:x="116" fg:w="1"/><text x="99.3953%" y="543.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.85%)</title><rect x="99.1453%" y="517" width="0.8547%" height="15" fill="rgb(240,225,3)" fg:x="116" fg:w="1"/><text x="99.3953%" y="527.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.85%)</title><rect x="99.1453%" y="501" width="0.8547%" height="15" fill="rgb(219,220,44)" fg:x="116" fg:w="1"/><text x="99.3953%" y="511.50"></text></g><g><title>__munmap (1 samples, 0.85%)</title><rect x="99.1453%" y="485" width="0.8547%" height="15" fill="rgb(206,161,27)" fg:x="116" fg:w="1"/><text x="99.3953%" y="495.50"></text></g></svg></svg>