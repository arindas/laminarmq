<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="106"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.94%)</title><rect x="0.0000%" y="261" width="0.9434%" height="15" fill="rgb(239,125,9)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.94%)</title><rect x="0.0000%" y="245" width="0.9434%" height="15" fill="rgb(233,103,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (1 samples, 0.94%)</title><rect x="0.0000%" y="229" width="0.9434%" height="15" fill="rgb(209,223,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (1 samples, 0.94%)</title><rect x="0.0000%" y="213" width="0.9434%" height="15" fill="rgb(234,71,27)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 0.94%)</title><rect x="0.0000%" y="197" width="0.9434%" height="15" fill="rgb(251,202,16)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1 samples, 0.94%)</title><rect x="0.0000%" y="181" width="0.9434%" height="15" fill="rgb(231,180,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>commit_log_append::time_tokio_std_seek_read_segmented_log::{{closure}} (1 samples, 0.94%)</title><rect x="0.0000%" y="165" width="0.9434%" height="15" fill="rgb(223,58,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (1 samples, 0.94%)</title><rect x="0.0000%" y="149" width="0.9434%" height="15" fill="rgb(250,34,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (1 samples, 0.94%)</title><rect x="0.0000%" y="133" width="0.9434%" height="15" fill="rgb(235,24,16)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.94%)</title><rect x="0.0000%" y="117" width="0.9434%" height="15" fill="rgb(219,28,33)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (1 samples, 0.94%)</title><rect x="0.0000%" y="101" width="0.9434%" height="15" fill="rgb(228,150,43)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.94%)</title><rect x="0.0000%" y="85" width="0.9434%" height="15" fill="rgb(221,228,36)" fg:x="0" fg:w="1"/><text x="0.2500%" y="95.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (1 samples, 0.94%)</title><rect x="1.8868%" y="165" width="0.9434%" height="15" fill="rgb(232,116,17)" fg:x="2" fg:w="1"/><text x="2.1368%" y="175.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.94%)</title><rect x="9.4340%" y="149" width="0.9434%" height="15" fill="rgb(220,110,51)" fg:x="10" fg:w="1"/><text x="9.6840%" y="159.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (13 samples, 12.26%)</title><rect x="19.8113%" y="133" width="12.2642%" height="15" fill="rgb(207,26,25)" fg:x="21" fg:w="13"/><text x="20.0613%" y="143.50">&lt;futures_lite::str..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (12 samples, 11.32%)</title><rect x="20.7547%" y="117" width="11.3208%" height="15" fill="rgb(223,58,19)" fg:x="22" fg:w="12"/><text x="21.0047%" y="127.50">&lt;crc32fast::Hashe..</text></g><g><title>crc32fast::baseline::update_fast_16 (12 samples, 11.32%)</title><rect x="20.7547%" y="101" width="11.3208%" height="15" fill="rgb(234,125,39)" fg:x="22" fg:w="12"/><text x="21.0047%" y="111.50">crc32fast::baseli..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (5 samples, 4.72%)</title><rect x="32.0755%" y="133" width="4.7170%" height="15" fill="rgb(241,48,36)" fg:x="34" fg:w="5"/><text x="32.3255%" y="143.50">&lt;lami..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (6 samples, 5.66%)</title><rect x="43.3962%" y="117" width="5.6604%" height="15" fill="rgb(217,148,51)" fg:x="46" fg:w="6"/><text x="43.6462%" y="127.50">&lt;tokio:..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.94%)</title><rect x="48.1132%" y="101" width="0.9434%" height="15" fill="rgb(247,17,25)" fg:x="51" fg:w="1"/><text x="48.3632%" y="111.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (5 samples, 4.72%)</title><rect x="49.0566%" y="117" width="4.7170%" height="15" fill="rgb(219,89,38)" fg:x="52" fg:w="5"/><text x="49.3066%" y="127.50">tokio..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (3 samples, 2.83%)</title><rect x="53.7736%" y="117" width="2.8302%" height="15" fill="rgb(220,145,2)" fg:x="57" fg:w="3"/><text x="54.0236%" y="127.50">to..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (5 samples, 4.72%)</title><rect x="65.0943%" y="101" width="4.7170%" height="15" fill="rgb(244,66,47)" fg:x="69" fg:w="5"/><text x="65.3443%" y="111.50">&lt;toki..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (36 samples, 33.96%)</title><rect x="36.7925%" y="133" width="33.9623%" height="15" fill="rgb(226,182,5)" fg:x="39" fg:w="36"/><text x="37.0425%" y="143.50">&lt;laminarmq::storage::impls::tokio::storage::std_seek_re..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (15 samples, 14.15%)</title><rect x="56.6038%" y="117" width="14.1509%" height="15" fill="rgb(211,98,20)" fg:x="60" fg:w="15"/><text x="56.8538%" y="127.50">tokio::sync::rwlock::..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (1 samples, 0.94%)</title><rect x="69.8113%" y="101" width="0.9434%" height="15" fill="rgb(217,103,52)" fg:x="74" fg:w="1"/><text x="70.0613%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.94%)</title><rect x="70.7547%" y="117" width="0.9434%" height="15" fill="rgb(208,125,52)" fg:x="75" fg:w="1"/><text x="71.0047%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.94%)</title><rect x="70.7547%" y="101" width="0.9434%" height="15" fill="rgb(244,70,13)" fg:x="75" fg:w="1"/><text x="71.0047%" y="111.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (2 samples, 1.89%)</title><rect x="70.7547%" y="133" width="1.8868%" height="15" fill="rgb(253,124,3)" fg:x="75" fg:w="2"/><text x="71.0047%" y="143.50">&lt;..</text></g><g><title>malloc (1 samples, 0.94%)</title><rect x="71.6981%" y="117" width="0.9434%" height="15" fill="rgb(222,145,32)" fg:x="76" fg:w="1"/><text x="71.9481%" y="127.50"></text></g><g><title>__libc_free (4 samples, 3.77%)</title><rect x="72.6415%" y="133" width="3.7736%" height="15" fill="rgb(232,183,47)" fg:x="77" fg:w="4"/><text x="72.8915%" y="143.50">__li..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (71 samples, 66.98%)</title><rect x="10.3774%" y="149" width="66.9811%" height="15" fill="rgb(246,226,4)" fg:x="11" fg:w="71"/><text x="10.6274%" y="159.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}}&gt; (1 samples, 0.94%)</title><rect x="76.4151%" y="133" width="0.9434%" height="15" fill="rgb(228,185,46)" fg:x="81" fg:w="1"/><text x="76.6651%" y="143.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (3 samples, 2.83%)</title><rect x="78.3019%" y="117" width="2.8302%" height="15" fill="rgb(213,196,4)" fg:x="83" fg:w="3"/><text x="78.5519%" y="127.50">&lt;t..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (3 samples, 2.83%)</title><rect x="78.3019%" y="101" width="2.8302%" height="15" fill="rgb(212,2,45)" fg:x="83" fg:w="3"/><text x="78.5519%" y="111.50">to..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (3 samples, 2.83%)</title><rect x="78.3019%" y="85" width="2.8302%" height="15" fill="rgb(217,145,50)" fg:x="83" fg:w="3"/><text x="78.5519%" y="95.50">&lt;t..</text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1 samples, 0.94%)</title><rect x="80.1887%" y="69" width="0.9434%" height="15" fill="rgb(242,10,46)" fg:x="85" fg:w="1"/><text x="80.4387%" y="79.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.94%)</title><rect x="80.1887%" y="53" width="0.9434%" height="15" fill="rgb(252,91,48)" fg:x="85" fg:w="1"/><text x="80.4387%" y="63.50"></text></g><g><title>syscall (1 samples, 0.94%)</title><rect x="80.1887%" y="37" width="0.9434%" height="15" fill="rgb(216,72,13)" fg:x="85" fg:w="1"/><text x="80.4387%" y="47.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (6 samples, 5.66%)</title><rect x="77.3585%" y="133" width="5.6604%" height="15" fill="rgb(219,6,37)" fg:x="82" fg:w="6"/><text x="77.6085%" y="143.50">&lt;lamina..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (2 samples, 1.89%)</title><rect x="81.1321%" y="117" width="1.8868%" height="15" fill="rgb(236,185,40)" fg:x="86" fg:w="2"/><text x="81.3821%" y="127.50">t..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (1 samples, 0.94%)</title><rect x="82.0755%" y="101" width="0.9434%" height="15" fill="rgb(208,81,48)" fg:x="87" fg:w="1"/><text x="82.3255%" y="111.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (1 samples, 0.94%)</title><rect x="83.0189%" y="133" width="0.9434%" height="15" fill="rgb(211,42,33)" fg:x="88" fg:w="1"/><text x="83.2689%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.94%)</title><rect x="83.0189%" y="117" width="0.9434%" height="15" fill="rgb(211,90,39)" fg:x="88" fg:w="1"/><text x="83.2689%" y="127.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (87 samples, 82.08%)</title><rect x="2.8302%" y="165" width="82.0755%" height="15" fill="rgb(218,136,12)" fg:x="3" fg:w="87"/><text x="3.0802%" y="175.50">&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq:..</text></g><g><title>laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt;::append::{{closure}} (8 samples, 7.55%)</title><rect x="77.3585%" y="149" width="7.5472%" height="15" fill="rgb(234,12,32)" fg:x="82" fg:w="8"/><text x="77.6085%" y="159.50">laminarmq:..</text></g><g><title>__libc_free (1 samples, 0.94%)</title><rect x="83.9623%" y="133" width="0.9434%" height="15" fill="rgb(221,164,18)" fg:x="89" fg:w="1"/><text x="84.2123%" y="143.50"></text></g><g><title>__libc_free (2 samples, 1.89%)</title><rect x="84.9057%" y="165" width="1.8868%" height="15" fill="rgb(239,135,14)" fg:x="90" fg:w="2"/><text x="85.1557%" y="175.50">_..</text></g><g><title>laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt;::new::{{closure}} (1 samples, 0.94%)</title><rect x="86.7925%" y="165" width="0.9434%" height="15" fill="rgb(226,198,47)" fg:x="92" fg:w="1"/><text x="87.0425%" y="175.50"></text></g><g><title>&lt;laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt; as laminarmq::storage::commit_log::segmented_log::segment::SegmentStorageProvider&lt;S,Idx&gt;&gt;::obtain_base_indices_of_stored_segments::{{closure}} (1 samples, 0.94%)</title><rect x="86.7925%" y="149" width="0.9434%" height="15" fill="rgb(244,121,47)" fg:x="92" fg:w="1"/><text x="87.0425%" y="159.50"></text></g><g><title>std::sys::unix::fs::readdir (1 samples, 0.94%)</title><rect x="86.7925%" y="133" width="0.9434%" height="15" fill="rgb(226,21,48)" fg:x="92" fg:w="1"/><text x="87.0425%" y="143.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.94%)</title><rect x="86.7925%" y="117" width="0.9434%" height="15" fill="rgb(215,178,47)" fg:x="92" fg:w="1"/><text x="87.0425%" y="127.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.94%)</title><rect x="86.7925%" y="101" width="0.9434%" height="15" fill="rgb(206,212,19)" fg:x="92" fg:w="1"/><text x="87.0425%" y="111.50"></text></g><g><title>std::sys::unix::fs::readdir::{{closure}} (1 samples, 0.94%)</title><rect x="86.7925%" y="85" width="0.9434%" height="15" fill="rgb(230,104,34)" fg:x="92" fg:w="1"/><text x="87.0425%" y="95.50"></text></g><g><title>fstatat (1 samples, 0.94%)</title><rect x="86.7925%" y="69" width="0.9434%" height="15" fill="rgb(210,96,51)" fg:x="92" fg:w="1"/><text x="87.0425%" y="79.50"></text></g><g><title>laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt;::with_storage_directory_path_and_provider (1 samples, 0.94%)</title><rect x="87.7358%" y="165" width="0.9434%" height="15" fill="rgb(229,111,47)" fg:x="93" fg:w="1"/><text x="87.9858%" y="175.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (1 samples, 0.94%)</title><rect x="87.7358%" y="149" width="0.9434%" height="15" fill="rgb(218,174,45)" fg:x="93" fg:w="1"/><text x="87.9858%" y="159.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir (1 samples, 0.94%)</title><rect x="87.7358%" y="133" width="0.9434%" height="15" fill="rgb(215,21,32)" fg:x="93" fg:w="1"/><text x="87.9858%" y="143.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.94%)</title><rect x="87.7358%" y="117" width="0.9434%" height="15" fill="rgb(235,72,21)" fg:x="93" fg:w="1"/><text x="87.9858%" y="127.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.94%)</title><rect x="87.7358%" y="101" width="0.9434%" height="15" fill="rgb(250,113,30)" fg:x="93" fg:w="1"/><text x="87.9858%" y="111.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir::{{closure}} (1 samples, 0.94%)</title><rect x="87.7358%" y="85" width="0.9434%" height="15" fill="rgb(244,136,34)" fg:x="93" fg:w="1"/><text x="87.9858%" y="95.50"></text></g><g><title>mkdir (1 samples, 0.94%)</title><rect x="87.7358%" y="69" width="0.9434%" height="15" fill="rgb(213,226,47)" fg:x="93" fg:w="1"/><text x="87.9858%" y="79.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (97 samples, 91.51%)</title><rect x="0.9434%" y="245" width="91.5094%" height="15" fill="rgb(224,136,40)" fg:x="1" fg:w="97"/><text x="1.1934%" y="255.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (97 samples, 91.51%)</title><rect x="0.9434%" y="229" width="91.5094%" height="15" fill="rgb(253,124,12)" fg:x="1" fg:w="97"/><text x="1.1934%" y="239.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (97 samples, 91.51%)</title><rect x="0.9434%" y="213" width="91.5094%" height="15" fill="rgb(210,67,8)" fg:x="1" fg:w="97"/><text x="1.1934%" y="223.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (97 samples, 91.51%)</title><rect x="0.9434%" y="197" width="91.5094%" height="15" fill="rgb(210,204,0)" fg:x="1" fg:w="97"/><text x="1.1934%" y="207.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>commit_log_append::time_tokio_std_seek_read_segmented_log::{{closure}} (97 samples, 91.51%)</title><rect x="0.9434%" y="181" width="91.5094%" height="15" fill="rgb(217,179,22)" fg:x="1" fg:w="97"/><text x="1.1934%" y="191.50">commit_log_append::time_tokio_std_seek_read_segmented_log::{{closure}}</text></g><g><title>malloc (4 samples, 3.77%)</title><rect x="88.6792%" y="165" width="3.7736%" height="15" fill="rgb(237,192,33)" fg:x="94" fg:w="4"/><text x="88.9292%" y="175.50">mall..</text></g><g><title>_start (99 samples, 93.40%)</title><rect x="0.0000%" y="533" width="93.3962%" height="15" fill="rgb(211,104,28)" fg:x="0" fg:w="99"/><text x="0.2500%" y="543.50">_start</text></g><g><title>__libc_start_main (99 samples, 93.40%)</title><rect x="0.0000%" y="517" width="93.3962%" height="15" fill="rgb(214,75,30)" fg:x="0" fg:w="99"/><text x="0.2500%" y="527.50">__libc_start_main</text></g><g><title>main (99 samples, 93.40%)</title><rect x="0.0000%" y="501" width="93.3962%" height="15" fill="rgb(220,227,12)" fg:x="0" fg:w="99"/><text x="0.2500%" y="511.50">main</text></g><g><title>std::rt::lang_start_internal (99 samples, 93.40%)</title><rect x="0.0000%" y="485" width="93.3962%" height="15" fill="rgb(233,134,28)" fg:x="0" fg:w="99"/><text x="0.2500%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (99 samples, 93.40%)</title><rect x="0.0000%" y="469" width="93.3962%" height="15" fill="rgb(215,146,24)" fg:x="0" fg:w="99"/><text x="0.2500%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (99 samples, 93.40%)</title><rect x="0.0000%" y="453" width="93.3962%" height="15" fill="rgb(248,227,20)" fg:x="0" fg:w="99"/><text x="0.2500%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (99 samples, 93.40%)</title><rect x="0.0000%" y="437" width="93.3962%" height="15" fill="rgb(250,44,42)" fg:x="0" fg:w="99"/><text x="0.2500%" y="447.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (99 samples, 93.40%)</title><rect x="0.0000%" y="421" width="93.3962%" height="15" fill="rgb(219,5,35)" fg:x="0" fg:w="99"/><text x="0.2500%" y="431.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (99 samples, 93.40%)</title><rect x="0.0000%" y="405" width="93.3962%" height="15" fill="rgb(241,132,32)" fg:x="0" fg:w="99"/><text x="0.2500%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (99 samples, 93.40%)</title><rect x="0.0000%" y="389" width="93.3962%" height="15" fill="rgb(234,212,51)" fg:x="0" fg:w="99"/><text x="0.2500%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (99 samples, 93.40%)</title><rect x="0.0000%" y="373" width="93.3962%" height="15" fill="rgb(242,173,29)" fg:x="0" fg:w="99"/><text x="0.2500%" y="383.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (99 samples, 93.40%)</title><rect x="0.0000%" y="357" width="93.3962%" height="15" fill="rgb(212,159,2)" fg:x="0" fg:w="99"/><text x="0.2500%" y="367.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (99 samples, 93.40%)</title><rect x="0.0000%" y="341" width="93.3962%" height="15" fill="rgb(238,165,31)" fg:x="0" fg:w="99"/><text x="0.2500%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (99 samples, 93.40%)</title><rect x="0.0000%" y="325" width="93.3962%" height="15" fill="rgb(241,57,36)" fg:x="0" fg:w="99"/><text x="0.2500%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>commit_log_append::main (99 samples, 93.40%)</title><rect x="0.0000%" y="309" width="93.3962%" height="15" fill="rgb(249,7,4)" fg:x="0" fg:w="99"/><text x="0.2500%" y="319.50">commit_log_append::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (99 samples, 93.40%)</title><rect x="0.0000%" y="293" width="93.3962%" height="15" fill="rgb(250,137,44)" fg:x="0" fg:w="99"/><text x="0.2500%" y="303.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (99 samples, 93.40%)</title><rect x="0.0000%" y="277" width="93.3962%" height="15" fill="rgb(244,185,1)" fg:x="0" fg:w="99"/><text x="0.2500%" y="287.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (98 samples, 92.45%)</title><rect x="0.9434%" y="261" width="92.4528%" height="15" fill="rgb(216,5,53)" fg:x="1" fg:w="98"/><text x="1.1934%" y="271.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up</text></g><g><title>tokio::runtime::builder::Builder::build (1 samples, 0.94%)</title><rect x="92.4528%" y="245" width="0.9434%" height="15" fill="rgb(234,89,21)" fg:x="98" fg:w="1"/><text x="92.7028%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (1 samples, 0.94%)</title><rect x="92.4528%" y="229" width="0.9434%" height="15" fill="rgb(250,81,43)" fg:x="98" fg:w="1"/><text x="92.7028%" y="239.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.94%)</title><rect x="92.4528%" y="213" width="0.9434%" height="15" fill="rgb(243,132,11)" fg:x="98" fg:w="1"/><text x="92.7028%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.94%)</title><rect x="92.4528%" y="197" width="0.9434%" height="15" fill="rgb(253,159,28)" fg:x="98" fg:w="1"/><text x="92.7028%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.94%)</title><rect x="92.4528%" y="181" width="0.9434%" height="15" fill="rgb(237,167,34)" fg:x="98" fg:w="1"/><text x="92.7028%" y="191.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (1 samples, 0.94%)</title><rect x="92.4528%" y="165" width="0.9434%" height="15" fill="rgb(237,16,50)" fg:x="98" fg:w="1"/><text x="92.7028%" y="175.50"></text></g><g><title>std::sys::unix::thread::Thread::new (1 samples, 0.94%)</title><rect x="92.4528%" y="149" width="0.9434%" height="15" fill="rgb(247,125,2)" fg:x="98" fg:w="1"/><text x="92.7028%" y="159.50"></text></g><g><title>pthread_create (1 samples, 0.94%)</title><rect x="92.4528%" y="133" width="0.9434%" height="15" fill="rgb(254,35,3)" fg:x="98" fg:w="1"/><text x="92.7028%" y="143.50"></text></g><g><title>sigaltstack (1 samples, 0.94%)</title><rect x="93.3962%" y="485" width="0.9434%" height="15" fill="rgb(237,209,21)" fg:x="99" fg:w="1"/><text x="93.6462%" y="495.50"></text></g><g><title>commit_log_appe (101 samples, 95.28%)</title><rect x="0.0000%" y="549" width="95.2830%" height="15" fill="rgb(224,122,20)" fg:x="0" fg:w="101"/><text x="0.2500%" y="559.50">commit_log_appe</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 1.89%)</title><rect x="93.3962%" y="533" width="1.8868%" height="15" fill="rgb(224,11,46)" fg:x="99" fg:w="2"/><text x="93.6462%" y="543.50">s..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (2 samples, 1.89%)</title><rect x="93.3962%" y="517" width="1.8868%" height="15" fill="rgb(248,21,33)" fg:x="99" fg:w="2"/><text x="93.6462%" y="527.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (2 samples, 1.89%)</title><rect x="93.3962%" y="501" width="1.8868%" height="15" fill="rgb(222,144,7)" fg:x="99" fg:w="2"/><text x="93.6462%" y="511.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.94%)</title><rect x="94.3396%" y="485" width="0.9434%" height="15" fill="rgb(205,141,37)" fg:x="100" fg:w="1"/><text x="94.5896%" y="495.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.94%)</title><rect x="94.3396%" y="469" width="0.9434%" height="15" fill="rgb(237,130,8)" fg:x="100" fg:w="1"/><text x="94.5896%" y="479.50"></text></g><g><title>__mprotect (1 samples, 0.94%)</title><rect x="94.3396%" y="453" width="0.9434%" height="15" fill="rgb(209,179,39)" fg:x="100" fg:w="1"/><text x="94.5896%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (2 samples, 1.89%)</title><rect x="95.2830%" y="437" width="1.8868%" height="15" fill="rgb(207,52,17)" fg:x="101" fg:w="2"/><text x="95.5330%" y="447.50">s..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (2 samples, 1.89%)</title><rect x="95.2830%" y="421" width="1.8868%" height="15" fill="rgb(253,158,17)" fg:x="101" fg:w="2"/><text x="95.5330%" y="431.50">s..</text></g><g><title>std::sys::unix::futex::futex_wait (2 samples, 1.89%)</title><rect x="95.2830%" y="405" width="1.8868%" height="15" fill="rgb(208,19,53)" fg:x="101" fg:w="2"/><text x="95.5330%" y="415.50">s..</text></g><g><title>syscall (2 samples, 1.89%)</title><rect x="95.2830%" y="389" width="1.8868%" height="15" fill="rgb(233,152,13)" fg:x="101" fg:w="2"/><text x="95.5330%" y="399.50">s..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.94%)</title><rect x="97.1698%" y="437" width="0.9434%" height="15" fill="rgb(231,84,1)" fg:x="103" fg:w="1"/><text x="97.4198%" y="447.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.94%)</title><rect x="97.1698%" y="421" width="0.9434%" height="15" fill="rgb(229,142,48)" fg:x="103" fg:w="1"/><text x="97.4198%" y="431.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.94%)</title><rect x="97.1698%" y="405" width="0.9434%" height="15" fill="rgb(248,70,29)" fg:x="103" fg:w="1"/><text x="97.4198%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (1 samples, 0.94%)</title><rect x="97.1698%" y="389" width="0.9434%" height="15" fill="rgb(250,85,7)" fg:x="103" fg:w="1"/><text x="97.4198%" y="399.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 0.94%)</title><rect x="97.1698%" y="373" width="0.9434%" height="15" fill="rgb(235,140,43)" fg:x="103" fg:w="1"/><text x="97.4198%" y="383.50"></text></g><g><title>tokio::loom::std::rand::seed (1 samples, 0.94%)</title><rect x="97.1698%" y="357" width="0.9434%" height="15" fill="rgb(216,0,5)" fg:x="103" fg:w="1"/><text x="97.4198%" y="367.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::try_initialize (1 samples, 0.94%)</title><rect x="97.1698%" y="341" width="0.9434%" height="15" fill="rgb(223,167,29)" fg:x="103" fg:w="1"/><text x="97.4198%" y="351.50"></text></g><g><title>std::sys::unix::rand::hashmap_random_keys (1 samples, 0.94%)</title><rect x="97.1698%" y="325" width="0.9434%" height="15" fill="rgb(229,150,33)" fg:x="103" fg:w="1"/><text x="97.4198%" y="335.50"></text></g><g><title>std::sys::unix::rand::imp::fill_bytes (1 samples, 0.94%)</title><rect x="97.1698%" y="309" width="0.9434%" height="15" fill="rgb(227,26,52)" fg:x="103" fg:w="1"/><text x="97.4198%" y="319.50"></text></g><g><title>std::sys::unix::rand::imp::getrandom_fill_bytes (1 samples, 0.94%)</title><rect x="97.1698%" y="293" width="0.9434%" height="15" fill="rgb(250,60,52)" fg:x="103" fg:w="1"/><text x="97.4198%" y="303.50"></text></g><g><title>std::sys::unix::rand::imp::getrandom (1 samples, 0.94%)</title><rect x="97.1698%" y="277" width="0.9434%" height="15" fill="rgb(228,81,46)" fg:x="103" fg:w="1"/><text x="97.4198%" y="287.50"></text></g><g><title>std::sys::unix::rand::imp::getrandom::getrandom (1 samples, 0.94%)</title><rect x="97.1698%" y="261" width="0.9434%" height="15" fill="rgb(225,218,31)" fg:x="103" fg:w="1"/><text x="97.4198%" y="271.50"></text></g><g><title>getrandom (1 samples, 0.94%)</title><rect x="97.1698%" y="245" width="0.9434%" height="15" fill="rgb(230,35,16)" fg:x="103" fg:w="1"/><text x="97.4198%" y="255.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::openat_nofollow_dironly (1 samples, 0.94%)</title><rect x="98.1132%" y="277" width="0.9434%" height="15" fill="rgb(247,100,0)" fg:x="104" fg:w="1"/><text x="98.3632%" y="287.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.94%)</title><rect x="98.1132%" y="261" width="0.9434%" height="15" fill="rgb(223,135,11)" fg:x="104" fg:w="1"/><text x="98.3632%" y="271.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::openat_nofollow_dironly::{{closure}} (1 samples, 0.94%)</title><rect x="98.1132%" y="245" width="0.9434%" height="15" fill="rgb(207,136,0)" fg:x="104" fg:w="1"/><text x="98.3632%" y="255.50"></text></g><g><title>openat (1 samples, 0.94%)</title><rect x="98.1132%" y="229" width="0.9434%" height="15" fill="rgb(246,131,25)" fg:x="104" fg:w="1"/><text x="98.3632%" y="239.50"></text></g><g><title>all (106 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(209,47,12)" fg:x="0" fg:w="106"/><text x="0.2500%" y="575.50"></text></g><g><title>tokio-runtime-w (5 samples, 4.72%)</title><rect x="95.2830%" y="549" width="4.7170%" height="15" fill="rgb(221,25,16)" fg:x="101" fg:w="5"/><text x="95.5330%" y="559.50">tokio..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (5 samples, 4.72%)</title><rect x="95.2830%" y="533" width="4.7170%" height="15" fill="rgb(223,164,33)" fg:x="101" fg:w="5"/><text x="95.5330%" y="543.50">std::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5 samples, 4.72%)</title><rect x="95.2830%" y="517" width="4.7170%" height="15" fill="rgb(220,26,23)" fg:x="101" fg:w="5"/><text x="95.5330%" y="527.50">&lt;allo..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5 samples, 4.72%)</title><rect x="95.2830%" y="501" width="4.7170%" height="15" fill="rgb(231,224,1)" fg:x="101" fg:w="5"/><text x="95.5330%" y="511.50">&lt;allo..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (5 samples, 4.72%)</title><rect x="95.2830%" y="485" width="4.7170%" height="15" fill="rgb(229,221,24)" fg:x="101" fg:w="5"/><text x="95.5330%" y="495.50">core:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5 samples, 4.72%)</title><rect x="95.2830%" y="469" width="4.7170%" height="15" fill="rgb(213,34,10)" fg:x="101" fg:w="5"/><text x="95.5330%" y="479.50">std::..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (5 samples, 4.72%)</title><rect x="95.2830%" y="453" width="4.7170%" height="15" fill="rgb(215,33,11)" fg:x="101" fg:w="5"/><text x="95.5330%" y="463.50">tokio..</text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 1.89%)</title><rect x="98.1132%" y="437" width="1.8868%" height="15" fill="rgb(216,20,41)" fg:x="104" fg:w="2"/><text x="98.3632%" y="447.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 1.89%)</title><rect x="98.1132%" y="421" width="1.8868%" height="15" fill="rgb(228,43,31)" fg:x="104" fg:w="2"/><text x="98.3632%" y="431.50">t..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 1.89%)</title><rect x="98.1132%" y="405" width="1.8868%" height="15" fill="rgb(227,83,26)" fg:x="104" fg:w="2"/><text x="98.3632%" y="415.50">t..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 1.89%)</title><rect x="98.1132%" y="389" width="1.8868%" height="15" fill="rgb(217,168,19)" fg:x="104" fg:w="2"/><text x="98.3632%" y="399.50">&lt;..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (2 samples, 1.89%)</title><rect x="98.1132%" y="373" width="1.8868%" height="15" fill="rgb(231,34,33)" fg:x="104" fg:w="2"/><text x="98.3632%" y="383.50">s..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (2 samples, 1.89%)</title><rect x="98.1132%" y="357" width="1.8868%" height="15" fill="rgb(230,120,51)" fg:x="104" fg:w="2"/><text x="98.3632%" y="367.50">s..</text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 1.89%)</title><rect x="98.1132%" y="341" width="1.8868%" height="15" fill="rgb(215,138,27)" fg:x="104" fg:w="2"/><text x="98.3632%" y="351.50">s..</text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 1.89%)</title><rect x="98.1132%" y="325" width="1.8868%" height="15" fill="rgb(246,80,47)" fg:x="104" fg:w="2"/><text x="98.3632%" y="335.50">s..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (2 samples, 1.89%)</title><rect x="98.1132%" y="309" width="1.8868%" height="15" fill="rgb(215,57,53)" fg:x="104" fg:w="2"/><text x="98.3632%" y="319.50">s..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (2 samples, 1.89%)</title><rect x="98.1132%" y="293" width="1.8868%" height="15" fill="rgb(229,137,5)" fg:x="104" fg:w="2"/><text x="98.3632%" y="303.50">s..</text></g><g><title>unlinkat (1 samples, 0.94%)</title><rect x="99.0566%" y="277" width="0.9434%" height="15" fill="rgb(210,86,2)" fg:x="105" fg:w="1"/><text x="99.3066%" y="287.50"></text></g></svg></svg>