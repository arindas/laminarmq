<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="217"><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (1 samples, 0.46%)</title><rect x="0.9217%" y="117" width="0.4608%" height="15" fill="rgb(245,200,44)" fg:x="2" fg:w="1"/><text x="1.1717%" y="127.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.46%)</title><rect x="0.9217%" y="101" width="0.4608%" height="15" fill="rgb(227,62,11)" fg:x="2" fg:w="1"/><text x="1.1717%" y="111.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (3 samples, 1.38%)</title><rect x="0.9217%" y="133" width="1.3825%" height="15" fill="rgb(238,200,30)" fg:x="2" fg:w="3"/><text x="1.1717%" y="143.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (2 samples, 0.92%)</title><rect x="1.3825%" y="117" width="0.9217%" height="15" fill="rgb(245,127,25)" fg:x="3" fg:w="2"/><text x="1.6325%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 0.92%)</title><rect x="1.3825%" y="101" width="0.9217%" height="15" fill="rgb(246,146,35)" fg:x="3" fg:w="2"/><text x="1.6325%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 0.92%)</title><rect x="1.3825%" y="85" width="0.9217%" height="15" fill="rgb(244,21,14)" fg:x="3" fg:w="2"/><text x="1.6325%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.92%)</title><rect x="1.3825%" y="69" width="0.9217%" height="15" fill="rgb(248,80,29)" fg:x="3" fg:w="2"/><text x="1.6325%" y="79.50"></text></g><g><title>syscall (2 samples, 0.92%)</title><rect x="1.3825%" y="53" width="0.9217%" height="15" fill="rgb(218,183,10)" fg:x="3" fg:w="2"/><text x="1.6325%" y="63.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.46%)</title><rect x="2.3041%" y="117" width="0.4608%" height="15" fill="rgb(225,218,14)" fg:x="5" fg:w="1"/><text x="2.5541%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.46%)</title><rect x="2.3041%" y="101" width="0.4608%" height="15" fill="rgb(235,201,3)" fg:x="5" fg:w="1"/><text x="2.5541%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.46%)</title><rect x="2.3041%" y="85" width="0.4608%" height="15" fill="rgb(238,57,26)" fg:x="5" fg:w="1"/><text x="2.5541%" y="95.50"></text></g><g><title>syscall (1 samples, 0.46%)</title><rect x="2.3041%" y="69" width="0.4608%" height="15" fill="rgb(238,45,6)" fg:x="5" fg:w="1"/><text x="2.5541%" y="79.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.92%)</title><rect x="2.3041%" y="133" width="0.9217%" height="15" fill="rgb(237,128,13)" fg:x="5" fg:w="2"/><text x="2.5541%" y="143.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (1 samples, 0.46%)</title><rect x="2.7650%" y="117" width="0.4608%" height="15" fill="rgb(240,105,20)" fg:x="6" fg:w="1"/><text x="3.0150%" y="127.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.46%)</title><rect x="2.7650%" y="101" width="0.4608%" height="15" fill="rgb(222,97,20)" fg:x="6" fg:w="1"/><text x="3.0150%" y="111.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::read::{{closure}} (7 samples, 3.23%)</title><rect x="0.4608%" y="149" width="3.2258%" height="15" fill="rgb(216,71,26)" fg:x="1" fg:w="7"/><text x="0.7108%" y="159.50">&lt;la..</text></g><g><title>__libc_calloc (1 samples, 0.46%)</title><rect x="3.2258%" y="133" width="0.4608%" height="15" fill="rgb(254,145,51)" fg:x="7" fg:w="1"/><text x="3.4758%" y="143.50"></text></g><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (8 samples, 3.69%)</title><rect x="0.4608%" y="197" width="3.6866%" height="15" fill="rgb(225,190,31)" fg:x="1" fg:w="8"/><text x="0.7108%" y="207.50">&lt;fut..</text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (8 samples, 3.69%)</title><rect x="0.4608%" y="181" width="3.6866%" height="15" fill="rgb(229,145,53)" fg:x="1" fg:w="8"/><text x="0.7108%" y="191.50">&lt;asy..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (8 samples, 3.69%)</title><rect x="0.4608%" y="165" width="3.6866%" height="15" fill="rgb(242,58,52)" fg:x="1" fg:w="8"/><text x="0.7108%" y="175.50">&lt;lam..</text></g><g><title>__libc_free (1 samples, 0.46%)</title><rect x="3.6866%" y="149" width="0.4608%" height="15" fill="rgb(209,147,30)" fg:x="8" fg:w="1"/><text x="3.9366%" y="159.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (26 samples, 11.98%)</title><rect x="8.7558%" y="133" width="11.9816%" height="15" fill="rgb(238,158,32)" fg:x="19" fg:w="26"/><text x="9.0058%" y="143.50">crc32fast::baselin..</text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (30 samples, 13.82%)</title><rect x="7.3733%" y="165" width="13.8249%" height="15" fill="rgb(209,111,9)" fg:x="16" fg:w="30"/><text x="7.6233%" y="175.50">&lt;futures_lite::stream..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (27 samples, 12.44%)</title><rect x="8.7558%" y="149" width="12.4424%" height="15" fill="rgb(228,158,44)" fg:x="19" fg:w="27"/><text x="9.0058%" y="159.50">&lt;crc32fast::Hasher ..</text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.46%)</title><rect x="20.7373%" y="133" width="0.4608%" height="15" fill="rgb(250,32,2)" fg:x="45" fg:w="1"/><text x="20.9873%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (1 samples, 0.46%)</title><rect x="21.1982%" y="165" width="0.4608%" height="15" fill="rgb(254,13,24)" fg:x="46" fg:w="1"/><text x="21.4482%" y="175.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (6 samples, 2.76%)</title><rect x="22.5806%" y="149" width="2.7650%" height="15" fill="rgb(242,224,38)" fg:x="49" fg:w="6"/><text x="22.8306%" y="159.50">&lt;t..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (4 samples, 1.84%)</title><rect x="23.5023%" y="133" width="1.8433%" height="15" fill="rgb(220,186,33)" fg:x="51" fg:w="4"/><text x="23.7523%" y="143.50">t..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (4 samples, 1.84%)</title><rect x="23.5023%" y="117" width="1.8433%" height="15" fill="rgb(254,185,39)" fg:x="51" fg:w="4"/><text x="23.7523%" y="127.50">&lt;..</text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1 samples, 0.46%)</title><rect x="24.8848%" y="101" width="0.4608%" height="15" fill="rgb(215,38,50)" fg:x="54" fg:w="1"/><text x="25.1348%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.46%)</title><rect x="24.8848%" y="85" width="0.4608%" height="15" fill="rgb(226,180,4)" fg:x="54" fg:w="1"/><text x="25.1348%" y="95.50"></text></g><g><title>syscall (1 samples, 0.46%)</title><rect x="24.8848%" y="69" width="0.4608%" height="15" fill="rgb(208,157,19)" fg:x="54" fg:w="1"/><text x="25.1348%" y="79.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (5 samples, 2.30%)</title><rect x="25.3456%" y="149" width="2.3041%" height="15" fill="rgb(236,22,41)" fg:x="55" fg:w="5"/><text x="25.5956%" y="159.50">t..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (1 samples, 0.46%)</title><rect x="27.6498%" y="149" width="0.4608%" height="15" fill="rgb(238,3,26)" fg:x="60" fg:w="1"/><text x="27.8998%" y="159.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (7 samples, 3.23%)</title><rect x="29.4931%" y="133" width="3.2258%" height="15" fill="rgb(213,164,12)" fg:x="64" fg:w="7"/><text x="29.7431%" y="143.50">&lt;to..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (30 samples, 13.82%)</title><rect x="21.6590%" y="165" width="13.8249%" height="15" fill="rgb(209,100,39)" fg:x="47" fg:w="30"/><text x="21.9090%" y="175.50">&lt;laminarmq::storage::..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (16 samples, 7.37%)</title><rect x="28.1106%" y="149" width="7.3733%" height="15" fill="rgb(227,37,48)" fg:x="61" fg:w="16"/><text x="28.3606%" y="159.50">tokio::syn..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (6 samples, 2.76%)</title><rect x="32.7189%" y="133" width="2.7650%" height="15" fill="rgb(242,178,17)" fg:x="71" fg:w="6"/><text x="32.9689%" y="143.50">to..</text></g><g><title>__rdl_alloc (1 samples, 0.46%)</title><rect x="35.4839%" y="149" width="0.4608%" height="15" fill="rgb(205,32,24)" fg:x="77" fg:w="1"/><text x="35.7339%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.46%)</title><rect x="35.4839%" y="133" width="0.4608%" height="15" fill="rgb(234,223,35)" fg:x="77" fg:w="1"/><text x="35.7339%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (2 samples, 0.92%)</title><rect x="35.4839%" y="165" width="0.9217%" height="15" fill="rgb(247,120,53)" fg:x="77" fg:w="2"/><text x="35.7339%" y="175.50"></text></g><g><title>malloc (1 samples, 0.46%)</title><rect x="35.9447%" y="149" width="0.4608%" height="15" fill="rgb(213,131,12)" fg:x="78" fg:w="1"/><text x="36.1947%" y="159.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{{closure}} (83 samples, 38.25%)</title><rect x="0.0000%" y="213" width="38.2488%" height="15" fill="rgb(233,186,48)" fg:x="0" fg:w="83"/><text x="0.2500%" y="223.50">segmented_log_read_stream::time_tokio_std_seek_read_segmented_..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (74 samples, 34.10%)</title><rect x="4.1475%" y="197" width="34.1014%" height="15" fill="rgb(254,89,46)" fg:x="9" fg:w="74"/><text x="4.3975%" y="207.50">&lt;laminarmq::storage::commit_log::segmented_log::Segment..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (74 samples, 34.10%)</title><rect x="4.1475%" y="181" width="34.1014%" height="15" fill="rgb(237,34,22)" fg:x="9" fg:w="74"/><text x="4.3975%" y="191.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>__libc_free (4 samples, 1.84%)</title><rect x="36.4055%" y="165" width="1.8433%" height="15" fill="rgb(214,15,28)" fg:x="79" fg:w="4"/><text x="36.6555%" y="175.50">_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (87 samples, 40.09%)</title><rect x="0.0000%" y="293" width="40.0922%" height="15" fill="rgb(209,4,1)" fg:x="0" fg:w="87"/><text x="0.2500%" y="303.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (87 samples, 40.09%)</title><rect x="0.0000%" y="277" width="40.0922%" height="15" fill="rgb(230,166,14)" fg:x="0" fg:w="87"/><text x="0.2500%" y="287.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::itera..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (87 samples, 40.09%)</title><rect x="0.0000%" y="261" width="40.0922%" height="15" fill="rgb(222,127,15)" fg:x="0" fg:w="87"/><text x="0.2500%" y="271.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (87 samples, 40.09%)</title><rect x="0.0000%" y="245" width="40.0922%" height="15" fill="rgb(247,217,44)" fg:x="0" fg:w="87"/><text x="0.2500%" y="255.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::A..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (87 samples, 40.09%)</title><rect x="0.0000%" y="229" width="40.0922%" height="15" fill="rgb(205,29,10)" fg:x="0" fg:w="87"/><text x="0.2500%" y="239.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (4 samples, 1.84%)</title><rect x="38.2488%" y="213" width="1.8433%" height="15" fill="rgb(252,225,18)" fg:x="83" fg:w="4"/><text x="38.4988%" y="223.50">t..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (4 samples, 1.84%)</title><rect x="38.2488%" y="197" width="1.8433%" height="15" fill="rgb(216,134,40)" fg:x="83" fg:w="4"/><text x="38.4988%" y="207.50">s..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (4 samples, 1.84%)</title><rect x="38.2488%" y="181" width="1.8433%" height="15" fill="rgb(251,190,34)" fg:x="83" fg:w="4"/><text x="38.4988%" y="191.50">s..</text></g><g><title>std::sys::unix::futex::futex_wait (4 samples, 1.84%)</title><rect x="38.2488%" y="165" width="1.8433%" height="15" fill="rgb(205,36,19)" fg:x="83" fg:w="4"/><text x="38.4988%" y="175.50">s..</text></g><g><title>syscall (4 samples, 1.84%)</title><rect x="38.2488%" y="149" width="1.8433%" height="15" fill="rgb(208,31,24)" fg:x="83" fg:w="4"/><text x="38.4988%" y="159.50">s..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (1 samples, 0.46%)</title><rect x="40.0922%" y="165" width="0.4608%" height="15" fill="rgb(211,209,38)" fg:x="87" fg:w="1"/><text x="40.3422%" y="175.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.46%)</title><rect x="40.0922%" y="149" width="0.4608%" height="15" fill="rgb(247,142,49)" fg:x="87" fg:w="1"/><text x="40.3422%" y="159.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (1 samples, 0.46%)</title><rect x="41.0138%" y="133" width="0.4608%" height="15" fill="rgb(209,208,36)" fg:x="89" fg:w="1"/><text x="41.2638%" y="143.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.46%)</title><rect x="41.0138%" y="117" width="0.4608%" height="15" fill="rgb(237,192,13)" fg:x="89" fg:w="1"/><text x="41.2638%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (1 samples, 0.46%)</title><rect x="41.0138%" y="101" width="0.4608%" height="15" fill="rgb(228,36,14)" fg:x="89" fg:w="1"/><text x="41.2638%" y="111.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.46%)</title><rect x="41.0138%" y="85" width="0.4608%" height="15" fill="rgb(253,22,23)" fg:x="89" fg:w="1"/><text x="41.2638%" y="95.50"></text></g><g><title>tokio::runtime::park::clone (1 samples, 0.46%)</title><rect x="41.0138%" y="69" width="0.4608%" height="15" fill="rgb(208,0,37)" fg:x="89" fg:w="1"/><text x="41.2638%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.46%)</title><rect x="41.4747%" y="85" width="0.4608%" height="15" fill="rgb(220,9,50)" fg:x="90" fg:w="1"/><text x="41.7247%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.46%)</title><rect x="41.4747%" y="69" width="0.4608%" height="15" fill="rgb(206,148,8)" fg:x="90" fg:w="1"/><text x="41.7247%" y="79.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.46%)</title><rect x="41.4747%" y="53" width="0.4608%" height="15" fill="rgb(217,129,54)" fg:x="90" fg:w="1"/><text x="41.7247%" y="63.50"></text></g><g><title>posix_memalign (1 samples, 0.46%)</title><rect x="41.4747%" y="37" width="0.4608%" height="15" fill="rgb(205,42,46)" fg:x="90" fg:w="1"/><text x="41.7247%" y="47.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (4 samples, 1.84%)</title><rect x="41.0138%" y="149" width="1.8433%" height="15" fill="rgb(220,216,54)" fg:x="89" fg:w="4"/><text x="41.2638%" y="159.50">&lt;..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (3 samples, 1.38%)</title><rect x="41.4747%" y="133" width="1.3825%" height="15" fill="rgb(209,129,44)" fg:x="90" fg:w="3"/><text x="41.7247%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (3 samples, 1.38%)</title><rect x="41.4747%" y="117" width="1.3825%" height="15" fill="rgb(205,56,12)" fg:x="90" fg:w="3"/><text x="41.7247%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (3 samples, 1.38%)</title><rect x="41.4747%" y="101" width="1.3825%" height="15" fill="rgb(236,175,8)" fg:x="90" fg:w="3"/><text x="41.7247%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.92%)</title><rect x="41.9355%" y="85" width="0.9217%" height="15" fill="rgb(236,44,44)" fg:x="91" fg:w="2"/><text x="42.1855%" y="95.50"></text></g><g><title>syscall (2 samples, 0.92%)</title><rect x="41.9355%" y="69" width="0.9217%" height="15" fill="rgb(205,90,37)" fg:x="91" fg:w="2"/><text x="42.1855%" y="79.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.46%)</title><rect x="42.8571%" y="149" width="0.4608%" height="15" fill="rgb(228,12,37)" fg:x="93" fg:w="1"/><text x="43.1071%" y="159.50"></text></g><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (8 samples, 3.69%)</title><rect x="40.0922%" y="213" width="3.6866%" height="15" fill="rgb(223,83,8)" fg:x="87" fg:w="8"/><text x="40.3422%" y="223.50">&lt;fut..</text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (8 samples, 3.69%)</title><rect x="40.0922%" y="197" width="3.6866%" height="15" fill="rgb(217,196,51)" fg:x="87" fg:w="8"/><text x="40.3422%" y="207.50">&lt;asy..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (8 samples, 3.69%)</title><rect x="40.0922%" y="181" width="3.6866%" height="15" fill="rgb(253,124,40)" fg:x="87" fg:w="8"/><text x="40.3422%" y="191.50">&lt;lam..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::read::{{closure}} (7 samples, 3.23%)</title><rect x="40.5530%" y="165" width="3.2258%" height="15" fill="rgb(222,172,11)" fg:x="88" fg:w="7"/><text x="40.8030%" y="175.50">&lt;la..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (1 samples, 0.46%)</title><rect x="43.3180%" y="149" width="0.4608%" height="15" fill="rgb(251,65,52)" fg:x="94" fg:w="1"/><text x="43.5680%" y="159.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (24 samples, 11.06%)</title><rect x="48.3871%" y="181" width="11.0599%" height="15" fill="rgb(219,158,5)" fg:x="105" fg:w="24"/><text x="48.6371%" y="191.50">&lt;futures_lite::s..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (23 samples, 10.60%)</title><rect x="48.8479%" y="165" width="10.5991%" height="15" fill="rgb(234,175,26)" fg:x="106" fg:w="23"/><text x="49.0979%" y="175.50">&lt;crc32fast::Has..</text></g><g><title>crc32fast::baseline::update_fast_16 (23 samples, 10.60%)</title><rect x="48.8479%" y="149" width="10.5991%" height="15" fill="rgb(211,201,27)" fg:x="106" fg:w="23"/><text x="49.0979%" y="159.50">crc32fast::base..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (2 samples, 0.92%)</title><rect x="59.4470%" y="181" width="0.9217%" height="15" fill="rgb(232,0,25)" fg:x="129" fg:w="2"/><text x="59.6970%" y="191.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (4 samples, 1.84%)</title><rect x="61.2903%" y="165" width="1.8433%" height="15" fill="rgb(253,175,30)" fg:x="133" fg:w="4"/><text x="61.5403%" y="175.50">&lt;..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (3 samples, 1.38%)</title><rect x="61.7512%" y="149" width="1.3825%" height="15" fill="rgb(207,228,21)" fg:x="134" fg:w="3"/><text x="62.0012%" y="159.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (3 samples, 1.38%)</title><rect x="61.7512%" y="133" width="1.3825%" height="15" fill="rgb(229,193,19)" fg:x="134" fg:w="3"/><text x="62.0012%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1 samples, 0.46%)</title><rect x="62.6728%" y="117" width="0.4608%" height="15" fill="rgb(242,121,30)" fg:x="136" fg:w="1"/><text x="62.9228%" y="127.50"></text></g><g><title>__rdl_alloc (1 samples, 0.46%)</title><rect x="62.6728%" y="101" width="0.4608%" height="15" fill="rgb(207,195,28)" fg:x="136" fg:w="1"/><text x="62.9228%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.46%)</title><rect x="62.6728%" y="85" width="0.4608%" height="15" fill="rgb(247,97,35)" fg:x="136" fg:w="1"/><text x="62.9228%" y="95.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.46%)</title><rect x="62.6728%" y="69" width="0.4608%" height="15" fill="rgb(220,41,20)" fg:x="136" fg:w="1"/><text x="62.9228%" y="79.50"></text></g><g><title>posix_memalign (1 samples, 0.46%)</title><rect x="62.6728%" y="53" width="0.4608%" height="15" fill="rgb(216,41,6)" fg:x="136" fg:w="1"/><text x="62.9228%" y="63.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (8 samples, 3.69%)</title><rect x="63.1336%" y="165" width="3.6866%" height="15" fill="rgb(217,77,1)" fg:x="137" fg:w="8"/><text x="63.3836%" y="175.50">toki..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (7 samples, 3.23%)</title><rect x="70.5069%" y="149" width="3.2258%" height="15" fill="rgb(252,228,6)" fg:x="153" fg:w="7"/><text x="70.7569%" y="159.50">&lt;to..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (1 samples, 0.46%)</title><rect x="73.7327%" y="149" width="0.4608%" height="15" fill="rgb(231,154,32)" fg:x="160" fg:w="1"/><text x="73.9827%" y="159.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (37 samples, 17.05%)</title><rect x="60.3687%" y="181" width="17.0507%" height="15" fill="rgb(221,201,34)" fg:x="131" fg:w="37"/><text x="60.6187%" y="191.50">&lt;laminarmq::storage::impls..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (23 samples, 10.60%)</title><rect x="66.8203%" y="165" width="10.5991%" height="15" fill="rgb(236,93,36)" fg:x="145" fg:w="23"/><text x="67.0703%" y="175.50">tokio::sync::rw..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (7 samples, 3.23%)</title><rect x="74.1935%" y="149" width="3.2258%" height="15" fill="rgb(240,122,13)" fg:x="161" fg:w="7"/><text x="74.4435%" y="159.50">tok..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (2 samples, 0.92%)</title><rect x="77.4194%" y="181" width="0.9217%" height="15" fill="rgb(211,193,12)" fg:x="168" fg:w="2"/><text x="77.6694%" y="191.50"></text></g><g><title>malloc (2 samples, 0.92%)</title><rect x="77.4194%" y="165" width="0.9217%" height="15" fill="rgb(223,47,42)" fg:x="168" fg:w="2"/><text x="77.6694%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.46%)</title><rect x="78.3410%" y="181" width="0.4608%" height="15" fill="rgb(215,145,40)" fg:x="170" fg:w="1"/><text x="78.5910%" y="191.50"></text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (78 samples, 35.94%)</title><rect x="43.7788%" y="197" width="35.9447%" height="15" fill="rgb(209,222,50)" fg:x="95" fg:w="78"/><text x="44.0288%" y="207.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}}&gt; (2 samples, 0.92%)</title><rect x="78.8018%" y="181" width="0.9217%" height="15" fill="rgb(225,76,22)" fg:x="171" fg:w="2"/><text x="79.0518%" y="191.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt;::rotate_new_write_segment::{{closure}} (1 samples, 0.46%)</title><rect x="79.7235%" y="197" width="0.4608%" height="15" fill="rgb(241,222,31)" fg:x="173" fg:w="1"/><text x="79.9735%" y="207.50"></text></g><g><title>&lt;laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt; as laminarmq::storage::commit_log::segmented_log::segment::SegmentStorageProvider&lt;S,Idx&gt;&gt;::obtain::{{closure}} (1 samples, 0.46%)</title><rect x="79.7235%" y="181" width="0.4608%" height="15" fill="rgb(237,155,18)" fg:x="173" fg:w="1"/><text x="79.9735%" y="191.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorageProvider as laminarmq::storage::impls::common::PathAddressedStorageProvider&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage&gt;&gt;::obtain_storage::{{closure}} (1 samples, 0.46%)</title><rect x="79.7235%" y="165" width="0.4608%" height="15" fill="rgb(253,56,22)" fg:x="173" fg:w="1"/><text x="79.9735%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.46%)</title><rect x="79.7235%" y="149" width="0.4608%" height="15" fill="rgb(210,77,2)" fg:x="173" fg:w="1"/><text x="79.9735%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.46%)</title><rect x="79.7235%" y="133" width="0.4608%" height="15" fill="rgb(231,155,14)" fg:x="173" fg:w="1"/><text x="79.9735%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.46%)</title><rect x="79.7235%" y="117" width="0.4608%" height="15" fill="rgb(225,194,53)" fg:x="173" fg:w="1"/><text x="79.9735%" y="127.50"></text></g><g><title>syscall (1 samples, 0.46%)</title><rect x="79.7235%" y="101" width="0.4608%" height="15" fill="rgb(218,107,3)" fg:x="173" fg:w="1"/><text x="79.9735%" y="111.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (80 samples, 36.87%)</title><rect x="43.7788%" y="213" width="36.8664%" height="15" fill="rgb(253,142,44)" fg:x="95" fg:w="80"/><text x="44.0288%" y="223.50">&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog..</text></g><g><title>laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt;::append::{{closure}} (1 samples, 0.46%)</title><rect x="80.1843%" y="197" width="0.4608%" height="15" fill="rgb(230,139,49)" fg:x="174" fg:w="1"/><text x="80.4343%" y="207.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (1 samples, 0.46%)</title><rect x="80.1843%" y="181" width="0.4608%" height="15" fill="rgb(213,49,26)" fg:x="174" fg:w="1"/><text x="80.4343%" y="191.50"></text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (1 samples, 0.46%)</title><rect x="80.1843%" y="165" width="0.4608%" height="15" fill="rgb(211,176,22)" fg:x="174" fg:w="1"/><text x="80.4343%" y="175.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.46%)</title><rect x="80.1843%" y="149" width="0.4608%" height="15" fill="rgb(209,150,15)" fg:x="174" fg:w="1"/><text x="80.4343%" y="159.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{{closure}} (89 samples, 41.01%)</title><rect x="40.0922%" y="229" width="41.0138%" height="15" fill="rgb(233,93,41)" fg:x="87" fg:w="89"/><text x="40.3422%" y="239.50">segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::..</text></g><g><title>malloc (1 samples, 0.46%)</title><rect x="80.6452%" y="213" width="0.4608%" height="15" fill="rgb(224,214,49)" fg:x="175" fg:w="1"/><text x="80.8952%" y="223.50"></text></g><g><title>segmented_log_r (178 samples, 82.03%)</title><rect x="0.0000%" y="581" width="82.0276%" height="15" fill="rgb(214,54,27)" fg:x="0" fg:w="178"/><text x="0.2500%" y="591.50">segmented_log_r</text></g><g><title>_start (178 samples, 82.03%)</title><rect x="0.0000%" y="565" width="82.0276%" height="15" fill="rgb(209,15,6)" fg:x="0" fg:w="178"/><text x="0.2500%" y="575.50">_start</text></g><g><title>__libc_start_main (178 samples, 82.03%)</title><rect x="0.0000%" y="549" width="82.0276%" height="15" fill="rgb(234,37,53)" fg:x="0" fg:w="178"/><text x="0.2500%" y="559.50">__libc_start_main</text></g><g><title>main (178 samples, 82.03%)</title><rect x="0.0000%" y="533" width="82.0276%" height="15" fill="rgb(231,20,19)" fg:x="0" fg:w="178"/><text x="0.2500%" y="543.50">main</text></g><g><title>std::rt::lang_start_internal (178 samples, 82.03%)</title><rect x="0.0000%" y="517" width="82.0276%" height="15" fill="rgb(223,32,32)" fg:x="0" fg:w="178"/><text x="0.2500%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (178 samples, 82.03%)</title><rect x="0.0000%" y="501" width="82.0276%" height="15" fill="rgb(205,219,3)" fg:x="0" fg:w="178"/><text x="0.2500%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (178 samples, 82.03%)</title><rect x="0.0000%" y="485" width="82.0276%" height="15" fill="rgb(231,15,8)" fg:x="0" fg:w="178"/><text x="0.2500%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (178 samples, 82.03%)</title><rect x="0.0000%" y="469" width="82.0276%" height="15" fill="rgb(240,91,50)" fg:x="0" fg:w="178"/><text x="0.2500%" y="479.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (178 samples, 82.03%)</title><rect x="0.0000%" y="453" width="82.0276%" height="15" fill="rgb(214,35,32)" fg:x="0" fg:w="178"/><text x="0.2500%" y="463.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (178 samples, 82.03%)</title><rect x="0.0000%" y="437" width="82.0276%" height="15" fill="rgb(248,61,22)" fg:x="0" fg:w="178"/><text x="0.2500%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (178 samples, 82.03%)</title><rect x="0.0000%" y="421" width="82.0276%" height="15" fill="rgb(213,209,44)" fg:x="0" fg:w="178"/><text x="0.2500%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (178 samples, 82.03%)</title><rect x="0.0000%" y="405" width="82.0276%" height="15" fill="rgb(225,94,5)" fg:x="0" fg:w="178"/><text x="0.2500%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (178 samples, 82.03%)</title><rect x="0.0000%" y="389" width="82.0276%" height="15" fill="rgb(249,189,15)" fg:x="0" fg:w="178"/><text x="0.2500%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (178 samples, 82.03%)</title><rect x="0.0000%" y="373" width="82.0276%" height="15" fill="rgb(240,70,12)" fg:x="0" fg:w="178"/><text x="0.2500%" y="383.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (178 samples, 82.03%)</title><rect x="0.0000%" y="357" width="82.0276%" height="15" fill="rgb(214,100,53)" fg:x="0" fg:w="178"/><text x="0.2500%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>segmented_log_read_stream::main (178 samples, 82.03%)</title><rect x="0.0000%" y="341" width="82.0276%" height="15" fill="rgb(211,127,15)" fg:x="0" fg:w="178"/><text x="0.2500%" y="351.50">segmented_log_read_stream::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (178 samples, 82.03%)</title><rect x="0.0000%" y="325" width="82.0276%" height="15" fill="rgb(212,202,2)" fg:x="0" fg:w="178"/><text x="0.2500%" y="335.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (178 samples, 82.03%)</title><rect x="0.0000%" y="309" width="82.0276%" height="15" fill="rgb(212,215,37)" fg:x="0" fg:w="178"/><text x="0.2500%" y="319.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (91 samples, 41.94%)</title><rect x="40.0922%" y="293" width="41.9355%" height="15" fill="rgb(228,113,22)" fg:x="87" fg:w="91"/><text x="40.3422%" y="303.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (91 samples, 41.94%)</title><rect x="40.0922%" y="277" width="41.9355%" height="15" fill="rgb(211,143,19)" fg:x="87" fg:w="91"/><text x="40.3422%" y="287.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (91 samples, 41.94%)</title><rect x="40.0922%" y="261" width="41.9355%" height="15" fill="rgb(231,210,13)" fg:x="87" fg:w="91"/><text x="40.3422%" y="271.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::Async..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (91 samples, 41.94%)</title><rect x="40.0922%" y="245" width="41.9355%" height="15" fill="rgb(240,108,7)" fg:x="87" fg:w="91"/><text x="40.3422%" y="255.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 0.92%)</title><rect x="81.1060%" y="229" width="0.9217%" height="15" fill="rgb(208,99,34)" fg:x="176" fg:w="2"/><text x="81.3560%" y="239.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (2 samples, 0.92%)</title><rect x="81.1060%" y="213" width="0.9217%" height="15" fill="rgb(250,182,30)" fg:x="176" fg:w="2"/><text x="81.3560%" y="223.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (2 samples, 0.92%)</title><rect x="81.1060%" y="197" width="0.9217%" height="15" fill="rgb(247,44,12)" fg:x="176" fg:w="2"/><text x="81.3560%" y="207.50"></text></g><g><title>std::sys::unix::futex::futex_wait (2 samples, 0.92%)</title><rect x="81.1060%" y="181" width="0.9217%" height="15" fill="rgb(221,38,27)" fg:x="176" fg:w="2"/><text x="81.3560%" y="191.50"></text></g><g><title>syscall (2 samples, 0.92%)</title><rect x="81.1060%" y="165" width="0.9217%" height="15" fill="rgb(225,7,12)" fg:x="176" fg:w="2"/><text x="81.3560%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.46%)</title><rect x="82.9493%" y="421" width="0.4608%" height="15" fill="rgb(247,114,2)" fg:x="180" fg:w="1"/><text x="83.1993%" y="431.50"></text></g><g><title>std::sys::unix::futex::futex_wait::{{closure}} (1 samples, 0.46%)</title><rect x="82.9493%" y="405" width="0.4608%" height="15" fill="rgb(227,143,15)" fg:x="180" fg:w="1"/><text x="83.1993%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.46%)</title><rect x="82.9493%" y="389" width="0.4608%" height="15" fill="rgb(234,59,2)" fg:x="180" fg:w="1"/><text x="83.1993%" y="399.50"></text></g><g><title>clock_gettime (1 samples, 0.46%)</title><rect x="82.9493%" y="373" width="0.4608%" height="15" fill="rgb(232,36,39)" fg:x="180" fg:w="1"/><text x="83.1993%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (14 samples, 6.45%)</title><rect x="82.4885%" y="469" width="6.4516%" height="15" fill="rgb(222,217,23)" fg:x="179" fg:w="14"/><text x="82.7385%" y="479.50">std::sys..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (14 samples, 6.45%)</title><rect x="82.4885%" y="453" width="6.4516%" height="15" fill="rgb(229,221,40)" fg:x="179" fg:w="14"/><text x="82.7385%" y="463.50">std::sys..</text></g><g><title>std::sys::unix::futex::futex_wait (14 samples, 6.45%)</title><rect x="82.4885%" y="437" width="6.4516%" height="15" fill="rgb(208,36,19)" fg:x="179" fg:w="14"/><text x="82.7385%" y="447.50">std::sys..</text></g><g><title>syscall (12 samples, 5.53%)</title><rect x="83.4101%" y="421" width="5.5300%" height="15" fill="rgb(211,105,4)" fg:x="181" fg:w="12"/><text x="83.6601%" y="431.50">syscall</text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (3 samples, 1.38%)</title><rect x="89.4009%" y="405" width="1.3825%" height="15" fill="rgb(254,19,54)" fg:x="194" fg:w="3"/><text x="89.6509%" y="415.50"></text></g><g><title>std::sys::unix::fs::File::seek (3 samples, 1.38%)</title><rect x="89.4009%" y="389" width="1.3825%" height="15" fill="rgb(250,175,30)" fg:x="194" fg:w="3"/><text x="89.6509%" y="399.50"></text></g><g><title>llseek (3 samples, 1.38%)</title><rect x="89.4009%" y="373" width="1.3825%" height="15" fill="rgb(248,52,48)" fg:x="194" fg:w="3"/><text x="89.6509%" y="383.50"></text></g><g><title>std::io::Write::write_all (3 samples, 1.38%)</title><rect x="90.7834%" y="405" width="1.3825%" height="15" fill="rgb(250,100,23)" fg:x="197" fg:w="3"/><text x="91.0334%" y="415.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (3 samples, 1.38%)</title><rect x="90.7834%" y="389" width="1.3825%" height="15" fill="rgb(206,191,19)" fg:x="197" fg:w="3"/><text x="91.0334%" y="399.50"></text></g><g><title>std::sys::unix::fs::File::write (3 samples, 1.38%)</title><rect x="90.7834%" y="373" width="1.3825%" height="15" fill="rgb(217,81,24)" fg:x="197" fg:w="3"/><text x="91.0334%" y="383.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (3 samples, 1.38%)</title><rect x="90.7834%" y="357" width="1.3825%" height="15" fill="rgb(216,37,24)" fg:x="197" fg:w="3"/><text x="91.0334%" y="367.50"></text></g><g><title>__write (3 samples, 1.38%)</title><rect x="90.7834%" y="341" width="1.3825%" height="15" fill="rgb(209,1,48)" fg:x="197" fg:w="3"/><text x="91.0334%" y="351.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (13 samples, 5.99%)</title><rect x="88.9401%" y="453" width="5.9908%" height="15" fill="rgb(247,42,52)" fg:x="193" fg:w="13"/><text x="89.1901%" y="463.50">&lt;core::p..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (13 samples, 5.99%)</title><rect x="88.9401%" y="437" width="5.9908%" height="15" fill="rgb(236,227,38)" fg:x="193" fg:w="13"/><text x="89.1901%" y="447.50">tokio::l..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 5.53%)</title><rect x="89.4009%" y="421" width="5.5300%" height="15" fill="rgb(242,188,16)" fg:x="194" fg:w="12"/><text x="89.6509%" y="431.50">&lt;tokio:..</text></g><g><title>tokio::io::blocking::Buf::read_from (6 samples, 2.76%)</title><rect x="92.1659%" y="405" width="2.7650%" height="15" fill="rgb(217,119,12)" fg:x="200" fg:w="6"/><text x="92.4159%" y="415.50">to..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (6 samples, 2.76%)</title><rect x="92.1659%" y="389" width="2.7650%" height="15" fill="rgb(239,7,35)" fg:x="200" fg:w="6"/><text x="92.4159%" y="399.50">&lt;&amp;..</text></g><g><title>std::sys::unix::fs::File::read (6 samples, 2.76%)</title><rect x="92.1659%" y="373" width="2.7650%" height="15" fill="rgb(223,215,27)" fg:x="200" fg:w="6"/><text x="92.4159%" y="383.50">st..</text></g><g><title>std::sys::unix::fd::FileDesc::read (6 samples, 2.76%)</title><rect x="92.1659%" y="357" width="2.7650%" height="15" fill="rgb(225,190,18)" fg:x="200" fg:w="6"/><text x="92.4159%" y="367.50">st..</text></g><g><title>__read (6 samples, 2.76%)</title><rect x="92.1659%" y="341" width="2.7650%" height="15" fill="rgb(236,137,2)" fg:x="200" fg:w="6"/><text x="92.4159%" y="351.50">__..</text></g><g><title>__libc_free (1 samples, 0.46%)</title><rect x="94.9309%" y="405" width="0.4608%" height="15" fill="rgb(231,50,2)" fg:x="206" fg:w="1"/><text x="95.1809%" y="415.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3 samples, 1.38%)</title><rect x="94.9309%" y="453" width="1.3825%" height="15" fill="rgb(229,229,10)" fg:x="206" fg:w="3"/><text x="95.1809%" y="463.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3 samples, 1.38%)</title><rect x="94.9309%" y="437" width="1.3825%" height="15" fill="rgb(238,154,6)" fg:x="206" fg:w="3"/><text x="95.1809%" y="447.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.38%)</title><rect x="94.9309%" y="421" width="1.3825%" height="15" fill="rgb(236,25,5)" fg:x="206" fg:w="3"/><text x="95.1809%" y="431.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (2 samples, 0.92%)</title><rect x="95.3917%" y="405" width="0.9217%" height="15" fill="rgb(237,183,54)" fg:x="207" fg:w="2"/><text x="95.6417%" y="415.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (2 samples, 0.92%)</title><rect x="95.3917%" y="389" width="0.9217%" height="15" fill="rgb(223,63,36)" fg:x="207" fg:w="2"/><text x="95.6417%" y="399.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.92%)</title><rect x="95.3917%" y="373" width="0.9217%" height="15" fill="rgb(249,101,13)" fg:x="207" fg:w="2"/><text x="95.6417%" y="383.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.92%)</title><rect x="95.3917%" y="357" width="0.9217%" height="15" fill="rgb(224,212,52)" fg:x="207" fg:w="2"/><text x="95.6417%" y="367.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (2 samples, 0.92%)</title><rect x="95.3917%" y="341" width="0.9217%" height="15" fill="rgb(214,152,36)" fg:x="207" fg:w="2"/><text x="95.6417%" y="351.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (2 samples, 0.92%)</title><rect x="95.3917%" y="325" width="0.9217%" height="15" fill="rgb(217,176,43)" fg:x="207" fg:w="2"/><text x="95.6417%" y="335.50"></text></g><g><title>unlinkat (2 samples, 0.92%)</title><rect x="95.3917%" y="309" width="0.9217%" height="15" fill="rgb(220,54,14)" fg:x="207" fg:w="2"/><text x="95.6417%" y="319.50"></text></g><g><title>all (217 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(232,182,14)" fg:x="0" fg:w="217"/><text x="0.2500%" y="607.50"></text></g><g><title>tokio-runtime-w (39 samples, 17.97%)</title><rect x="82.0276%" y="581" width="17.9724%" height="15" fill="rgb(216,203,23)" fg:x="178" fg:w="39"/><text x="82.2776%" y="591.50">tokio-runtime-w</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (39 samples, 17.97%)</title><rect x="82.0276%" y="565" width="17.9724%" height="15" fill="rgb(233,225,6)" fg:x="178" fg:w="39"/><text x="82.2776%" y="575.50">std::sys::unix::thread::Thre..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (39 samples, 17.97%)</title><rect x="82.0276%" y="549" width="17.9724%" height="15" fill="rgb(252,197,16)" fg:x="178" fg:w="39"/><text x="82.2776%" y="559.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (39 samples, 17.97%)</title><rect x="82.0276%" y="533" width="17.9724%" height="15" fill="rgb(224,213,52)" fg:x="178" fg:w="39"/><text x="82.2776%" y="543.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (39 samples, 17.97%)</title><rect x="82.0276%" y="517" width="17.9724%" height="15" fill="rgb(253,205,5)" fg:x="178" fg:w="39"/><text x="82.2776%" y="527.50">core::ops::function::FnOnce:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (39 samples, 17.97%)</title><rect x="82.0276%" y="501" width="17.9724%" height="15" fill="rgb(205,88,8)" fg:x="178" fg:w="39"/><text x="82.2776%" y="511.50">std::sys_common::backtrace::..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (39 samples, 17.97%)</title><rect x="82.0276%" y="485" width="17.9724%" height="15" fill="rgb(245,47,12)" fg:x="178" fg:w="39"/><text x="82.2776%" y="495.50">tokio::runtime::blocking::po..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (24 samples, 11.06%)</title><rect x="88.9401%" y="469" width="11.0599%" height="15" fill="rgb(240,120,50)" fg:x="193" fg:w="24"/><text x="89.1901%" y="479.50">tokio::runtime::..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (8 samples, 3.69%)</title><rect x="96.3134%" y="453" width="3.6866%" height="15" fill="rgb(230,136,18)" fg:x="209" fg:w="8"/><text x="96.5634%" y="463.50">toki..</text></g><g><title>tokio::runtime::park::wake_by_ref (8 samples, 3.69%)</title><rect x="96.3134%" y="437" width="3.6866%" height="15" fill="rgb(223,75,43)" fg:x="209" fg:w="8"/><text x="96.5634%" y="447.50">toki..</text></g><g><title>syscall (8 samples, 3.69%)</title><rect x="96.3134%" y="421" width="3.6866%" height="15" fill="rgb(254,70,39)" fg:x="209" fg:w="8"/><text x="96.5634%" y="431.50">sysc..</text></g></svg></svg>