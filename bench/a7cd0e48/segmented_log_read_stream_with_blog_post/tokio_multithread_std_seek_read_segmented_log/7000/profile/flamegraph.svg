<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="285"><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.35%)</title><rect x="0.0000%" y="197" width="0.3509%" height="15" fill="rgb(205,109,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (1 samples, 0.35%)</title><rect x="0.3509%" y="101" width="0.3509%" height="15" fill="rgb(229,126,21)" fg:x="1" fg:w="1"/><text x="0.6009%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.35%)</title><rect x="0.3509%" y="85" width="0.3509%" height="15" fill="rgb(224,57,1)" fg:x="1" fg:w="1"/><text x="0.6009%" y="95.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (3 samples, 1.05%)</title><rect x="0.3509%" y="117" width="1.0526%" height="15" fill="rgb(243,104,28)" fg:x="1" fg:w="3"/><text x="0.6009%" y="127.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (2 samples, 0.70%)</title><rect x="0.7018%" y="101" width="0.7018%" height="15" fill="rgb(253,171,53)" fg:x="2" fg:w="2"/><text x="0.9518%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 0.70%)</title><rect x="0.7018%" y="85" width="0.7018%" height="15" fill="rgb(243,216,45)" fg:x="2" fg:w="2"/><text x="0.9518%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 0.70%)</title><rect x="0.7018%" y="69" width="0.7018%" height="15" fill="rgb(248,215,1)" fg:x="2" fg:w="2"/><text x="0.9518%" y="79.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.70%)</title><rect x="0.7018%" y="53" width="0.7018%" height="15" fill="rgb(226,109,40)" fg:x="2" fg:w="2"/><text x="0.9518%" y="63.50"></text></g><g><title>syscall (1 samples, 0.35%)</title><rect x="1.0526%" y="37" width="0.3509%" height="15" fill="rgb(230,12,25)" fg:x="3" fg:w="1"/><text x="1.3026%" y="47.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.70%)</title><rect x="1.4035%" y="117" width="0.7018%" height="15" fill="rgb(251,40,25)" fg:x="4" fg:w="2"/><text x="1.6535%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.35%)</title><rect x="1.7544%" y="101" width="0.3509%" height="15" fill="rgb(231,131,29)" fg:x="5" fg:w="1"/><text x="2.0044%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.35%)</title><rect x="1.7544%" y="85" width="0.3509%" height="15" fill="rgb(219,143,23)" fg:x="5" fg:w="1"/><text x="2.0044%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.35%)</title><rect x="1.7544%" y="69" width="0.3509%" height="15" fill="rgb(244,50,30)" fg:x="5" fg:w="1"/><text x="2.0044%" y="79.50"></text></g><g><title>syscall (1 samples, 0.35%)</title><rect x="1.7544%" y="53" width="0.3509%" height="15" fill="rgb(232,24,1)" fg:x="5" fg:w="1"/><text x="2.0044%" y="63.50"></text></g><g><title>tokio::io::read_buf::slice_to_uninit_mut (1 samples, 0.35%)</title><rect x="2.1053%" y="117" width="0.3509%" height="15" fill="rgb(206,4,34)" fg:x="6" fg:w="1"/><text x="2.3553%" y="127.50"></text></g><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (7 samples, 2.46%)</title><rect x="0.3509%" y="181" width="2.4561%" height="15" fill="rgb(233,27,43)" fg:x="1" fg:w="7"/><text x="0.6009%" y="191.50">&lt;f..</text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (7 samples, 2.46%)</title><rect x="0.3509%" y="165" width="2.4561%" height="15" fill="rgb(220,123,51)" fg:x="1" fg:w="7"/><text x="0.6009%" y="175.50">&lt;a..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (7 samples, 2.46%)</title><rect x="0.3509%" y="149" width="2.4561%" height="15" fill="rgb(205,22,13)" fg:x="1" fg:w="7"/><text x="0.6009%" y="159.50">&lt;l..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::read::{{closure}} (7 samples, 2.46%)</title><rect x="0.3509%" y="133" width="2.4561%" height="15" fill="rgb(253,94,12)" fg:x="1" fg:w="7"/><text x="0.6009%" y="143.50">&lt;l..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 0.35%)</title><rect x="2.4561%" y="117" width="0.3509%" height="15" fill="rgb(247,91,53)" fg:x="7" fg:w="1"/><text x="2.7061%" y="127.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (20 samples, 7.02%)</title><rect x="5.9649%" y="149" width="7.0175%" height="15" fill="rgb(224,92,8)" fg:x="17" fg:w="20"/><text x="6.2149%" y="159.50">&lt;futures_..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (19 samples, 6.67%)</title><rect x="6.3158%" y="133" width="6.6667%" height="15" fill="rgb(223,81,0)" fg:x="18" fg:w="19"/><text x="6.5658%" y="143.50">&lt;crc32fas..</text></g><g><title>crc32fast::baseline::update_fast_16 (19 samples, 6.67%)</title><rect x="6.3158%" y="117" width="6.6667%" height="15" fill="rgb(216,208,6)" fg:x="18" fg:w="19"/><text x="6.5658%" y="127.50">crc32fast..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (1 samples, 0.35%)</title><rect x="12.9825%" y="149" width="0.3509%" height="15" fill="rgb(231,218,4)" fg:x="37" fg:w="1"/><text x="13.2325%" y="159.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (5 samples, 1.75%)</title><rect x="14.3860%" y="133" width="1.7544%" height="15" fill="rgb(232,29,40)" fg:x="41" fg:w="5"/><text x="14.6360%" y="143.50"></text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (4 samples, 1.40%)</title><rect x="14.7368%" y="117" width="1.4035%" height="15" fill="rgb(239,61,12)" fg:x="42" fg:w="4"/><text x="14.9868%" y="127.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (4 samples, 1.40%)</title><rect x="14.7368%" y="101" width="1.4035%" height="15" fill="rgb(224,34,54)" fg:x="42" fg:w="4"/><text x="14.9868%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (3 samples, 1.05%)</title><rect x="15.0877%" y="85" width="1.0526%" height="15" fill="rgb(217,162,13)" fg:x="43" fg:w="3"/><text x="15.3377%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 1.05%)</title><rect x="15.0877%" y="69" width="1.0526%" height="15" fill="rgb(221,82,28)" fg:x="43" fg:w="3"/><text x="15.3377%" y="79.50"></text></g><g><title>syscall (3 samples, 1.05%)</title><rect x="15.0877%" y="53" width="1.0526%" height="15" fill="rgb(222,109,40)" fg:x="43" fg:w="3"/><text x="15.3377%" y="63.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (7 samples, 2.46%)</title><rect x="16.1404%" y="133" width="2.4561%" height="15" fill="rgb(243,19,23)" fg:x="46" fg:w="7"/><text x="16.3904%" y="143.50">to..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (6 samples, 2.11%)</title><rect x="18.5965%" y="133" width="2.1053%" height="15" fill="rgb(209,33,50)" fg:x="53" fg:w="6"/><text x="18.8465%" y="143.50">t..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (23 samples, 8.07%)</title><rect x="13.3333%" y="149" width="8.0702%" height="15" fill="rgb(229,143,25)" fg:x="38" fg:w="23"/><text x="13.5833%" y="159.50">&lt;laminarmq:..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (2 samples, 0.70%)</title><rect x="20.7018%" y="133" width="0.7018%" height="15" fill="rgb(211,122,21)" fg:x="59" fg:w="2"/><text x="20.9518%" y="143.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.70%)</title><rect x="20.7018%" y="117" width="0.7018%" height="15" fill="rgb(239,200,51)" fg:x="59" fg:w="2"/><text x="20.9518%" y="127.50"></text></g><g><title>__libc_free (3 samples, 1.05%)</title><rect x="21.4035%" y="149" width="1.0526%" height="15" fill="rgb(253,149,6)" fg:x="61" fg:w="3"/><text x="21.6535%" y="159.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{{closure}} (64 samples, 22.46%)</title><rect x="0.3509%" y="197" width="22.4561%" height="15" fill="rgb(225,44,24)" fg:x="1" fg:w="64"/><text x="0.6009%" y="207.50">segmented_log_read_stream::time_toki..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (57 samples, 20.00%)</title><rect x="2.8070%" y="181" width="20.0000%" height="15" fill="rgb(253,44,10)" fg:x="8" fg:w="57"/><text x="3.0570%" y="191.50">&lt;laminarmq::storage::commit_log..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (57 samples, 20.00%)</title><rect x="2.8070%" y="165" width="20.0000%" height="15" fill="rgb(242,23,27)" fg:x="8" fg:w="57"/><text x="3.0570%" y="175.50">laminarmq::storage::Storage::ap..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}}&gt; (1 samples, 0.35%)</title><rect x="22.4561%" y="149" width="0.3509%" height="15" fill="rgb(219,151,31)" fg:x="64" fg:w="1"/><text x="22.7061%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (70 samples, 24.56%)</title><rect x="0.0000%" y="277" width="24.5614%" height="15" fill="rgb(220,85,16)" fg:x="0" fg:w="70"/><text x="0.2500%" y="287.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (70 samples, 24.56%)</title><rect x="0.0000%" y="261" width="24.5614%" height="15" fill="rgb(240,48,14)" fg:x="0" fg:w="70"/><text x="0.2500%" y="271.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (70 samples, 24.56%)</title><rect x="0.0000%" y="245" width="24.5614%" height="15" fill="rgb(218,66,11)" fg:x="0" fg:w="70"/><text x="0.2500%" y="255.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::..</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (70 samples, 24.56%)</title><rect x="0.0000%" y="229" width="24.5614%" height="15" fill="rgb(207,120,2)" fg:x="0" fg:w="70"/><text x="0.2500%" y="239.50">&lt;tokio::runtime::runtime::Runtime as cr..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (70 samples, 24.56%)</title><rect x="0.0000%" y="213" width="24.5614%" height="15" fill="rgb(207,226,7)" fg:x="0" fg:w="70"/><text x="0.2500%" y="223.50">tokio::runtime::park::CachedParkThread:..</text></g><g><title>tokio::runtime::park::Inner::park (5 samples, 1.75%)</title><rect x="22.8070%" y="197" width="1.7544%" height="15" fill="rgb(230,220,39)" fg:x="65" fg:w="5"/><text x="23.0570%" y="207.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (5 samples, 1.75%)</title><rect x="22.8070%" y="181" width="1.7544%" height="15" fill="rgb(242,188,29)" fg:x="65" fg:w="5"/><text x="23.0570%" y="191.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (5 samples, 1.75%)</title><rect x="22.8070%" y="165" width="1.7544%" height="15" fill="rgb(229,46,17)" fg:x="65" fg:w="5"/><text x="23.0570%" y="175.50"></text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 1.75%)</title><rect x="22.8070%" y="149" width="1.7544%" height="15" fill="rgb(214,206,22)" fg:x="65" fg:w="5"/><text x="23.0570%" y="159.50"></text></g><g><title>syscall (5 samples, 1.75%)</title><rect x="22.8070%" y="133" width="1.7544%" height="15" fill="rgb(243,122,35)" fg:x="65" fg:w="5"/><text x="23.0570%" y="143.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (1 samples, 0.35%)</title><rect x="25.9649%" y="149" width="0.3509%" height="15" fill="rgb(237,89,20)" fg:x="74" fg:w="1"/><text x="26.2149%" y="159.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.35%)</title><rect x="25.9649%" y="133" width="0.3509%" height="15" fill="rgb(228,211,25)" fg:x="74" fg:w="1"/><text x="26.2149%" y="143.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (2 samples, 0.70%)</title><rect x="27.0175%" y="117" width="0.7018%" height="15" fill="rgb(244,141,24)" fg:x="77" fg:w="2"/><text x="27.2675%" y="127.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.70%)</title><rect x="27.0175%" y="101" width="0.7018%" height="15" fill="rgb(242,135,50)" fg:x="77" fg:w="2"/><text x="27.2675%" y="111.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (1 samples, 0.35%)</title><rect x="27.3684%" y="85" width="0.3509%" height="15" fill="rgb(238,33,53)" fg:x="78" fg:w="1"/><text x="27.6184%" y="95.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (8 samples, 2.81%)</title><rect x="27.0175%" y="133" width="2.8070%" height="15" fill="rgb(220,220,24)" fg:x="77" fg:w="8"/><text x="27.2675%" y="143.50">&lt;&amp;..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (6 samples, 2.11%)</title><rect x="27.7193%" y="117" width="2.1053%" height="15" fill="rgb(220,138,32)" fg:x="79" fg:w="6"/><text x="27.9693%" y="127.50">&lt;..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (6 samples, 2.11%)</title><rect x="27.7193%" y="101" width="2.1053%" height="15" fill="rgb(242,81,5)" fg:x="79" fg:w="6"/><text x="27.9693%" y="111.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (6 samples, 2.11%)</title><rect x="27.7193%" y="85" width="2.1053%" height="15" fill="rgb(252,136,8)" fg:x="79" fg:w="6"/><text x="27.9693%" y="95.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (6 samples, 2.11%)</title><rect x="27.7193%" y="69" width="2.1053%" height="15" fill="rgb(233,38,43)" fg:x="79" fg:w="6"/><text x="27.9693%" y="79.50">t..</text></g><g><title>syscall (6 samples, 2.11%)</title><rect x="27.7193%" y="53" width="2.1053%" height="15" fill="rgb(252,92,51)" fg:x="79" fg:w="6"/><text x="27.9693%" y="63.50">s..</text></g><g><title>__rdl_alloc (1 samples, 0.35%)</title><rect x="30.1754%" y="85" width="0.3509%" height="15" fill="rgb(218,150,54)" fg:x="86" fg:w="1"/><text x="30.4254%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.35%)</title><rect x="30.1754%" y="69" width="0.3509%" height="15" fill="rgb(238,83,28)" fg:x="86" fg:w="1"/><text x="30.4254%" y="79.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.35%)</title><rect x="30.1754%" y="53" width="0.3509%" height="15" fill="rgb(217,200,8)" fg:x="86" fg:w="1"/><text x="30.4254%" y="63.50"></text></g><g><title>posix_memalign (1 samples, 0.35%)</title><rect x="30.1754%" y="37" width="0.3509%" height="15" fill="rgb(208,53,4)" fg:x="86" fg:w="1"/><text x="30.4254%" y="47.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 0.70%)</title><rect x="30.1754%" y="117" width="0.7018%" height="15" fill="rgb(206,104,25)" fg:x="86" fg:w="2"/><text x="30.4254%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 0.70%)</title><rect x="30.1754%" y="101" width="0.7018%" height="15" fill="rgb(233,91,35)" fg:x="86" fg:w="2"/><text x="30.4254%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.35%)</title><rect x="30.5263%" y="85" width="0.3509%" height="15" fill="rgb(251,103,29)" fg:x="87" fg:w="1"/><text x="30.7763%" y="95.50"></text></g><g><title>syscall (1 samples, 0.35%)</title><rect x="30.5263%" y="69" width="0.3509%" height="15" fill="rgb(235,17,31)" fg:x="87" fg:w="1"/><text x="30.7763%" y="79.50"></text></g><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (18 samples, 6.32%)</title><rect x="24.9123%" y="197" width="6.3158%" height="15" fill="rgb(217,96,40)" fg:x="71" fg:w="18"/><text x="25.1623%" y="207.50">&lt;futures..</text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (18 samples, 6.32%)</title><rect x="24.9123%" y="181" width="6.3158%" height="15" fill="rgb(235,60,3)" fg:x="71" fg:w="18"/><text x="25.1623%" y="191.50">&lt;async_s..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (16 samples, 5.61%)</title><rect x="25.6140%" y="165" width="5.6140%" height="15" fill="rgb(245,58,46)" fg:x="73" fg:w="16"/><text x="25.8640%" y="175.50">&lt;lamina..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::read::{{closure}} (14 samples, 4.91%)</title><rect x="26.3158%" y="149" width="4.9123%" height="15" fill="rgb(206,41,46)" fg:x="75" fg:w="14"/><text x="26.5658%" y="159.50">&lt;lamin..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 1.40%)</title><rect x="29.8246%" y="133" width="1.4035%" height="15" fill="rgb(240,49,29)" fg:x="85" fg:w="4"/><text x="30.0746%" y="143.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (1 samples, 0.35%)</title><rect x="30.8772%" y="117" width="0.3509%" height="15" fill="rgb(253,20,0)" fg:x="88" fg:w="1"/><text x="31.1272%" y="127.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (55 samples, 19.30%)</title><rect x="37.5439%" y="165" width="19.2982%" height="15" fill="rgb(209,104,24)" fg:x="107" fg:w="55"/><text x="37.7939%" y="175.50">&lt;futures_lite::stream::NextFut..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (52 samples, 18.25%)</title><rect x="38.5965%" y="149" width="18.2456%" height="15" fill="rgb(230,1,46)" fg:x="110" fg:w="52"/><text x="38.8465%" y="159.50">&lt;crc32fast::Hasher as core::..</text></g><g><title>crc32fast::baseline::update_fast_16 (51 samples, 17.89%)</title><rect x="38.9474%" y="133" width="17.8947%" height="15" fill="rgb(215,4,35)" fg:x="111" fg:w="51"/><text x="39.1974%" y="143.50">crc32fast::baseline::update_..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (2 samples, 0.70%)</title><rect x="56.8421%" y="165" width="0.7018%" height="15" fill="rgb(212,115,30)" fg:x="162" fg:w="2"/><text x="57.0921%" y="175.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (8 samples, 2.81%)</title><rect x="61.4035%" y="149" width="2.8070%" height="15" fill="rgb(227,161,53)" fg:x="175" fg:w="8"/><text x="61.6535%" y="159.50">&lt;t..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.70%)</title><rect x="63.5088%" y="133" width="0.7018%" height="15" fill="rgb(210,191,20)" fg:x="181" fg:w="2"/><text x="63.7588%" y="143.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.70%)</title><rect x="63.5088%" y="117" width="0.7018%" height="15" fill="rgb(210,187,13)" fg:x="181" fg:w="2"/><text x="63.7588%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (2 samples, 0.70%)</title><rect x="63.5088%" y="101" width="0.7018%" height="15" fill="rgb(254,133,44)" fg:x="181" fg:w="2"/><text x="63.7588%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.70%)</title><rect x="63.5088%" y="85" width="0.7018%" height="15" fill="rgb(234,41,47)" fg:x="181" fg:w="2"/><text x="63.7588%" y="95.50"></text></g><g><title>syscall (2 samples, 0.70%)</title><rect x="63.5088%" y="69" width="0.7018%" height="15" fill="rgb(245,163,38)" fg:x="181" fg:w="2"/><text x="63.7588%" y="79.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (14 samples, 4.91%)</title><rect x="64.2105%" y="149" width="4.9123%" height="15" fill="rgb(211,97,52)" fg:x="183" fg:w="14"/><text x="64.4605%" y="159.50">tokio:..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (2 samples, 0.70%)</title><rect x="69.1228%" y="149" width="0.7018%" height="15" fill="rgb(239,32,50)" fg:x="197" fg:w="2"/><text x="69.3728%" y="159.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (11 samples, 3.86%)</title><rect x="71.9298%" y="133" width="3.8596%" height="15" fill="rgb(246,139,27)" fg:x="205" fg:w="11"/><text x="72.1798%" y="143.50">&lt;tok..</text></g><g><title>tokio::runtime::park::wake_by_ref (1 samples, 0.35%)</title><rect x="75.4386%" y="117" width="0.3509%" height="15" fill="rgb(205,206,3)" fg:x="215" fg:w="1"/><text x="75.6886%" y="127.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (55 samples, 19.30%)</title><rect x="57.5439%" y="165" width="19.2982%" height="15" fill="rgb(227,142,39)" fg:x="164" fg:w="55"/><text x="57.7939%" y="175.50">&lt;laminarmq::storage::impls::to..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (20 samples, 7.02%)</title><rect x="69.8246%" y="149" width="7.0175%" height="15" fill="rgb(218,210,13)" fg:x="199" fg:w="20"/><text x="70.0746%" y="159.50">tokio::sy..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (3 samples, 1.05%)</title><rect x="75.7895%" y="133" width="1.0526%" height="15" fill="rgb(219,194,3)" fg:x="216" fg:w="3"/><text x="76.0395%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (3 samples, 1.05%)</title><rect x="76.8421%" y="165" width="1.0526%" height="15" fill="rgb(254,165,50)" fg:x="219" fg:w="3"/><text x="77.0921%" y="175.50"></text></g><g><title>malloc (3 samples, 1.05%)</title><rect x="76.8421%" y="149" width="1.0526%" height="15" fill="rgb(242,175,39)" fg:x="219" fg:w="3"/><text x="77.0921%" y="159.50"></text></g><g><title>__libc_free (8 samples, 2.81%)</title><rect x="77.8947%" y="165" width="2.8070%" height="15" fill="rgb(235,139,38)" fg:x="222" fg:w="8"/><text x="78.1447%" y="175.50">__..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (145 samples, 50.88%)</title><rect x="31.2281%" y="197" width="50.8772%" height="15" fill="rgb(244,201,18)" fg:x="89" fg:w="145"/><text x="31.4781%" y="207.50">&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminar..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (142 samples, 49.82%)</title><rect x="32.2807%" y="181" width="49.8246%" height="15" fill="rgb(217,72,35)" fg:x="92" fg:w="142"/><text x="32.5307%" y="191.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}}&gt; (4 samples, 1.40%)</title><rect x="80.7018%" y="165" width="1.4035%" height="15" fill="rgb(222,168,51)" fg:x="230" fg:w="4"/><text x="80.9518%" y="175.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{{closure}} (164 samples, 57.54%)</title><rect x="24.9123%" y="213" width="57.5439%" height="15" fill="rgb(230,34,24)" fg:x="71" fg:w="164"/><text x="25.1623%" y="223.50">segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{{closure}}</text></g><g><title>__libc_free (1 samples, 0.35%)</title><rect x="82.1053%" y="197" width="0.3509%" height="15" fill="rgb(224,222,42)" fg:x="234" fg:w="1"/><text x="82.3553%" y="207.50"></text></g><g><title>segmented_log_r (239 samples, 83.86%)</title><rect x="0.0000%" y="565" width="83.8596%" height="15" fill="rgb(210,48,40)" fg:x="0" fg:w="239"/><text x="0.2500%" y="575.50">segmented_log_r</text></g><g><title>_start (239 samples, 83.86%)</title><rect x="0.0000%" y="549" width="83.8596%" height="15" fill="rgb(250,59,32)" fg:x="0" fg:w="239"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (239 samples, 83.86%)</title><rect x="0.0000%" y="533" width="83.8596%" height="15" fill="rgb(218,167,40)" fg:x="0" fg:w="239"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (239 samples, 83.86%)</title><rect x="0.0000%" y="517" width="83.8596%" height="15" fill="rgb(205,102,37)" fg:x="0" fg:w="239"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (239 samples, 83.86%)</title><rect x="0.0000%" y="501" width="83.8596%" height="15" fill="rgb(209,53,10)" fg:x="0" fg:w="239"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (239 samples, 83.86%)</title><rect x="0.0000%" y="485" width="83.8596%" height="15" fill="rgb(237,207,8)" fg:x="0" fg:w="239"/><text x="0.2500%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (239 samples, 83.86%)</title><rect x="0.0000%" y="469" width="83.8596%" height="15" fill="rgb(251,114,37)" fg:x="0" fg:w="239"/><text x="0.2500%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (239 samples, 83.86%)</title><rect x="0.0000%" y="453" width="83.8596%" height="15" fill="rgb(249,57,43)" fg:x="0" fg:w="239"/><text x="0.2500%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (239 samples, 83.86%)</title><rect x="0.0000%" y="437" width="83.8596%" height="15" fill="rgb(205,8,32)" fg:x="0" fg:w="239"/><text x="0.2500%" y="447.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (239 samples, 83.86%)</title><rect x="0.0000%" y="421" width="83.8596%" height="15" fill="rgb(245,157,27)" fg:x="0" fg:w="239"/><text x="0.2500%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (239 samples, 83.86%)</title><rect x="0.0000%" y="405" width="83.8596%" height="15" fill="rgb(229,93,45)" fg:x="0" fg:w="239"/><text x="0.2500%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (239 samples, 83.86%)</title><rect x="0.0000%" y="389" width="83.8596%" height="15" fill="rgb(233,137,18)" fg:x="0" fg:w="239"/><text x="0.2500%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (239 samples, 83.86%)</title><rect x="0.0000%" y="373" width="83.8596%" height="15" fill="rgb(254,125,48)" fg:x="0" fg:w="239"/><text x="0.2500%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (239 samples, 83.86%)</title><rect x="0.0000%" y="357" width="83.8596%" height="15" fill="rgb(249,169,27)" fg:x="0" fg:w="239"/><text x="0.2500%" y="367.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (239 samples, 83.86%)</title><rect x="0.0000%" y="341" width="83.8596%" height="15" fill="rgb(225,167,30)" fg:x="0" fg:w="239"/><text x="0.2500%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>segmented_log_read_stream::main (239 samples, 83.86%)</title><rect x="0.0000%" y="325" width="83.8596%" height="15" fill="rgb(248,109,32)" fg:x="0" fg:w="239"/><text x="0.2500%" y="335.50">segmented_log_read_stream::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (239 samples, 83.86%)</title><rect x="0.0000%" y="309" width="83.8596%" height="15" fill="rgb(249,80,21)" fg:x="0" fg:w="239"/><text x="0.2500%" y="319.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (239 samples, 83.86%)</title><rect x="0.0000%" y="293" width="83.8596%" height="15" fill="rgb(232,166,47)" fg:x="0" fg:w="239"/><text x="0.2500%" y="303.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (169 samples, 59.30%)</title><rect x="24.5614%" y="277" width="59.2982%" height="15" fill="rgb(240,98,48)" fg:x="70" fg:w="169"/><text x="24.8114%" y="287.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (169 samples, 59.30%)</title><rect x="24.5614%" y="261" width="59.2982%" height="15" fill="rgb(231,66,14)" fg:x="70" fg:w="169"/><text x="24.8114%" y="271.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (169 samples, 59.30%)</title><rect x="24.5614%" y="245" width="59.2982%" height="15" fill="rgb(237,183,2)" fg:x="70" fg:w="169"/><text x="24.8114%" y="255.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (169 samples, 59.30%)</title><rect x="24.5614%" y="229" width="59.2982%" height="15" fill="rgb(246,213,43)" fg:x="70" fg:w="169"/><text x="24.8114%" y="239.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (4 samples, 1.40%)</title><rect x="82.4561%" y="213" width="1.4035%" height="15" fill="rgb(213,111,12)" fg:x="235" fg:w="4"/><text x="82.7061%" y="223.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (4 samples, 1.40%)</title><rect x="82.4561%" y="197" width="1.4035%" height="15" fill="rgb(216,83,53)" fg:x="235" fg:w="4"/><text x="82.7061%" y="207.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (4 samples, 1.40%)</title><rect x="82.4561%" y="181" width="1.4035%" height="15" fill="rgb(254,101,32)" fg:x="235" fg:w="4"/><text x="82.7061%" y="191.50"></text></g><g><title>std::sys::unix::futex::futex_wait (4 samples, 1.40%)</title><rect x="82.4561%" y="165" width="1.4035%" height="15" fill="rgb(208,174,46)" fg:x="235" fg:w="4"/><text x="82.7061%" y="175.50"></text></g><g><title>syscall (4 samples, 1.40%)</title><rect x="82.4561%" y="149" width="1.4035%" height="15" fill="rgb(247,164,8)" fg:x="235" fg:w="4"/><text x="82.7061%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.70%)</title><rect x="84.2105%" y="405" width="0.7018%" height="15" fill="rgb(251,127,23)" fg:x="240" fg:w="2"/><text x="84.4605%" y="415.50"></text></g><g><title>std::sys::unix::futex::futex_wait::{{closure}} (2 samples, 0.70%)</title><rect x="84.2105%" y="389" width="0.7018%" height="15" fill="rgb(213,38,53)" fg:x="240" fg:w="2"/><text x="84.4605%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.70%)</title><rect x="84.2105%" y="373" width="0.7018%" height="15" fill="rgb(212,148,52)" fg:x="240" fg:w="2"/><text x="84.4605%" y="383.50"></text></g><g><title>clock_gettime (1 samples, 0.35%)</title><rect x="84.5614%" y="357" width="0.3509%" height="15" fill="rgb(252,226,52)" fg:x="241" fg:w="1"/><text x="84.8114%" y="367.50"></text></g><g><title>std::sys::unix::futex::futex_wait (17 samples, 5.96%)</title><rect x="84.2105%" y="421" width="5.9649%" height="15" fill="rgb(212,193,21)" fg:x="240" fg:w="17"/><text x="84.4605%" y="431.50">std::sys..</text></g><g><title>syscall (15 samples, 5.26%)</title><rect x="84.9123%" y="405" width="5.2632%" height="15" fill="rgb(239,203,48)" fg:x="242" fg:w="15"/><text x="85.1623%" y="415.50">syscall</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.35%)</title><rect x="90.1754%" y="405" width="0.3509%" height="15" fill="rgb(219,206,48)" fg:x="257" fg:w="1"/><text x="90.4254%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.35%)</title><rect x="90.1754%" y="389" width="0.3509%" height="15" fill="rgb(214,162,43)" fg:x="257" fg:w="1"/><text x="90.4254%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (19 samples, 6.67%)</title><rect x="84.2105%" y="453" width="6.6667%" height="15" fill="rgb(206,177,3)" fg:x="240" fg:w="19"/><text x="84.4605%" y="463.50">std::sys:..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (19 samples, 6.67%)</title><rect x="84.2105%" y="437" width="6.6667%" height="15" fill="rgb(253,130,0)" fg:x="240" fg:w="19"/><text x="84.4605%" y="447.50">std::sys:..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (2 samples, 0.70%)</title><rect x="90.1754%" y="421" width="0.7018%" height="15" fill="rgb(246,190,44)" fg:x="257" fg:w="2"/><text x="90.4254%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (1 samples, 0.35%)</title><rect x="90.5263%" y="405" width="0.3509%" height="15" fill="rgb(222,216,9)" fg:x="258" fg:w="1"/><text x="90.7763%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (1 samples, 0.35%)</title><rect x="90.5263%" y="389" width="0.3509%" height="15" fill="rgb(236,149,30)" fg:x="258" fg:w="1"/><text x="90.7763%" y="399.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.35%)</title><rect x="90.5263%" y="373" width="0.3509%" height="15" fill="rgb(227,224,5)" fg:x="258" fg:w="1"/><text x="90.7763%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.35%)</title><rect x="90.5263%" y="357" width="0.3509%" height="15" fill="rgb(208,135,52)" fg:x="258" fg:w="1"/><text x="90.7763%" y="367.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (5 samples, 1.75%)</title><rect x="91.5789%" y="389" width="1.7544%" height="15" fill="rgb(232,103,1)" fg:x="261" fg:w="5"/><text x="91.8289%" y="399.50"></text></g><g><title>std::sys::unix::fs::File::seek (5 samples, 1.75%)</title><rect x="91.5789%" y="373" width="1.7544%" height="15" fill="rgb(223,110,27)" fg:x="261" fg:w="5"/><text x="91.8289%" y="383.50"></text></g><g><title>llseek (5 samples, 1.75%)</title><rect x="91.5789%" y="357" width="1.7544%" height="15" fill="rgb(239,26,20)" fg:x="261" fg:w="5"/><text x="91.8289%" y="367.50"></text></g><g><title>std::io::Write::write_all (3 samples, 1.05%)</title><rect x="93.3333%" y="389" width="1.0526%" height="15" fill="rgb(219,144,37)" fg:x="266" fg:w="3"/><text x="93.5833%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (3 samples, 1.05%)</title><rect x="93.3333%" y="373" width="1.0526%" height="15" fill="rgb(235,121,45)" fg:x="266" fg:w="3"/><text x="93.5833%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::write (3 samples, 1.05%)</title><rect x="93.3333%" y="357" width="1.0526%" height="15" fill="rgb(209,31,30)" fg:x="266" fg:w="3"/><text x="93.5833%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (3 samples, 1.05%)</title><rect x="93.3333%" y="341" width="1.0526%" height="15" fill="rgb(232,209,7)" fg:x="266" fg:w="3"/><text x="93.5833%" y="351.50"></text></g><g><title>__write (3 samples, 1.05%)</title><rect x="93.3333%" y="325" width="1.0526%" height="15" fill="rgb(216,51,36)" fg:x="266" fg:w="3"/><text x="93.5833%" y="335.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (11 samples, 3.86%)</title><rect x="90.8772%" y="437" width="3.8596%" height="15" fill="rgb(205,179,2)" fg:x="259" fg:w="11"/><text x="91.1272%" y="447.50">&lt;cor..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (10 samples, 3.51%)</title><rect x="91.2281%" y="421" width="3.5088%" height="15" fill="rgb(224,178,13)" fg:x="260" fg:w="10"/><text x="91.4781%" y="431.50">tok..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 3.16%)</title><rect x="91.5789%" y="405" width="3.1579%" height="15" fill="rgb(245,111,52)" fg:x="261" fg:w="9"/><text x="91.8289%" y="415.50">&lt;to..</text></g><g><title>tokio::io::blocking::Buf::read_from (1 samples, 0.35%)</title><rect x="94.3860%" y="389" width="0.3509%" height="15" fill="rgb(240,176,12)" fg:x="269" fg:w="1"/><text x="94.6360%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (1 samples, 0.35%)</title><rect x="94.3860%" y="373" width="0.3509%" height="15" fill="rgb(236,162,23)" fg:x="269" fg:w="1"/><text x="94.6360%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.35%)</title><rect x="94.3860%" y="357" width="0.3509%" height="15" fill="rgb(221,202,48)" fg:x="269" fg:w="1"/><text x="94.6360%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.35%)</title><rect x="94.3860%" y="341" width="0.3509%" height="15" fill="rgb(231,214,22)" fg:x="269" fg:w="1"/><text x="94.6360%" y="351.50"></text></g><g><title>__read (1 samples, 0.35%)</title><rect x="94.3860%" y="325" width="0.3509%" height="15" fill="rgb(214,73,37)" fg:x="269" fg:w="1"/><text x="94.6360%" y="335.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 0.70%)</title><rect x="94.7368%" y="437" width="0.7018%" height="15" fill="rgb(231,33,19)" fg:x="270" fg:w="2"/><text x="94.9868%" y="447.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.70%)</title><rect x="94.7368%" y="421" width="0.7018%" height="15" fill="rgb(229,192,20)" fg:x="270" fg:w="2"/><text x="94.9868%" y="431.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.70%)</title><rect x="94.7368%" y="405" width="0.7018%" height="15" fill="rgb(243,185,53)" fg:x="270" fg:w="2"/><text x="94.9868%" y="415.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (2 samples, 0.70%)</title><rect x="94.7368%" y="389" width="0.7018%" height="15" fill="rgb(249,221,26)" fg:x="270" fg:w="2"/><text x="94.9868%" y="399.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (2 samples, 0.70%)</title><rect x="94.7368%" y="373" width="0.7018%" height="15" fill="rgb(226,183,3)" fg:x="270" fg:w="2"/><text x="94.9868%" y="383.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.70%)</title><rect x="94.7368%" y="357" width="0.7018%" height="15" fill="rgb(219,39,34)" fg:x="270" fg:w="2"/><text x="94.9868%" y="367.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.70%)</title><rect x="94.7368%" y="341" width="0.7018%" height="15" fill="rgb(248,32,32)" fg:x="270" fg:w="2"/><text x="94.9868%" y="351.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (2 samples, 0.70%)</title><rect x="94.7368%" y="325" width="0.7018%" height="15" fill="rgb(219,135,28)" fg:x="270" fg:w="2"/><text x="94.9868%" y="335.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (2 samples, 0.70%)</title><rect x="94.7368%" y="309" width="0.7018%" height="15" fill="rgb(237,170,34)" fg:x="270" fg:w="2"/><text x="94.9868%" y="319.50"></text></g><g><title>unlinkat (2 samples, 0.70%)</title><rect x="94.7368%" y="293" width="0.7018%" height="15" fill="rgb(238,220,21)" fg:x="270" fg:w="2"/><text x="94.9868%" y="303.50"></text></g><g><title>syscall (10 samples, 3.51%)</title><rect x="96.1404%" y="405" width="3.5088%" height="15" fill="rgb(209,178,8)" fg:x="274" fg:w="10"/><text x="96.3904%" y="415.50">sys..</text></g><g><title>all (285 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(252,218,7)" fg:x="0" fg:w="285"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (46 samples, 16.14%)</title><rect x="83.8596%" y="565" width="16.1404%" height="15" fill="rgb(232,14,23)" fg:x="239" fg:w="46"/><text x="84.1096%" y="575.50">tokio-runtime-w</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (46 samples, 16.14%)</title><rect x="83.8596%" y="549" width="16.1404%" height="15" fill="rgb(212,121,53)" fg:x="239" fg:w="46"/><text x="84.1096%" y="559.50">std::sys::unix::thread::T..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 16.14%)</title><rect x="83.8596%" y="533" width="16.1404%" height="15" fill="rgb(205,187,53)" fg:x="239" fg:w="46"/><text x="84.1096%" y="543.50">&lt;alloc::boxed::Box&lt;F,A&gt; a..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 16.14%)</title><rect x="83.8596%" y="517" width="16.1404%" height="15" fill="rgb(216,63,0)" fg:x="239" fg:w="46"/><text x="84.1096%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; a..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (46 samples, 16.14%)</title><rect x="83.8596%" y="501" width="16.1404%" height="15" fill="rgb(244,43,51)" fg:x="239" fg:w="46"/><text x="84.1096%" y="511.50">core::ops::function::FnOn..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (46 samples, 16.14%)</title><rect x="83.8596%" y="485" width="16.1404%" height="15" fill="rgb(232,25,47)" fg:x="239" fg:w="46"/><text x="84.1096%" y="495.50">std::sys_common::backtrac..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (46 samples, 16.14%)</title><rect x="83.8596%" y="469" width="16.1404%" height="15" fill="rgb(231,75,21)" fg:x="239" fg:w="46"/><text x="84.1096%" y="479.50">tokio::runtime::blocking:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (26 samples, 9.12%)</title><rect x="90.8772%" y="453" width="9.1228%" height="15" fill="rgb(218,168,25)" fg:x="259" fg:w="26"/><text x="91.1272%" y="463.50">tokio::runtim..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (13 samples, 4.56%)</title><rect x="95.4386%" y="437" width="4.5614%" height="15" fill="rgb(216,121,50)" fg:x="272" fg:w="13"/><text x="95.6886%" y="447.50">tokio..</text></g><g><title>tokio::runtime::park::wake_by_ref (11 samples, 3.86%)</title><rect x="96.1404%" y="421" width="3.8596%" height="15" fill="rgb(242,115,27)" fg:x="274" fg:w="11"/><text x="96.3904%" y="431.50">toki..</text></g><g><title>tokio::runtime::park::Inner::unpark (1 samples, 0.35%)</title><rect x="99.6491%" y="405" width="0.3509%" height="15" fill="rgb(228,173,45)" fg:x="284" fg:w="1"/><text x="99.8991%" y="415.50"></text></g></svg></svg>