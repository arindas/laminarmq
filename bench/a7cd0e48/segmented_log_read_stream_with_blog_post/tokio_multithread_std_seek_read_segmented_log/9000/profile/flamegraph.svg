<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="282"><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.35%)</title><rect x="0.3546%" y="229" width="0.3546%" height="15" fill="rgb(218,136,19)" fg:x="1" fg:w="1"/><text x="0.6046%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as laminarmq::common::split::SplitAt&lt;T&gt;&gt;::split_at (2 samples, 0.71%)</title><rect x="1.0638%" y="165" width="0.7092%" height="15" fill="rgb(209,86,37)" fg:x="3" fg:w="2"/><text x="1.3138%" y="175.50"></text></g><g><title>malloc (1 samples, 0.35%)</title><rect x="1.4184%" y="149" width="0.3546%" height="15" fill="rgb(229,37,51)" fg:x="4" fg:w="1"/><text x="1.6684%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.35%)</title><rect x="1.7730%" y="85" width="0.3546%" height="15" fill="rgb(220,48,32)" fg:x="5" fg:w="1"/><text x="2.0230%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.35%)</title><rect x="1.7730%" y="69" width="0.3546%" height="15" fill="rgb(212,219,16)" fg:x="5" fg:w="1"/><text x="2.0230%" y="79.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.35%)</title><rect x="1.7730%" y="53" width="0.3546%" height="15" fill="rgb(228,218,5)" fg:x="5" fg:w="1"/><text x="2.0230%" y="63.50"></text></g><g><title>posix_memalign (1 samples, 0.35%)</title><rect x="1.7730%" y="37" width="0.3546%" height="15" fill="rgb(218,206,50)" fg:x="5" fg:w="1"/><text x="2.0230%" y="47.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (2 samples, 0.71%)</title><rect x="1.7730%" y="149" width="0.7092%" height="15" fill="rgb(206,171,29)" fg:x="5" fg:w="2"/><text x="2.0230%" y="159.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (2 samples, 0.71%)</title><rect x="1.7730%" y="133" width="0.7092%" height="15" fill="rgb(211,36,0)" fg:x="5" fg:w="2"/><text x="2.0230%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 0.71%)</title><rect x="1.7730%" y="117" width="0.7092%" height="15" fill="rgb(239,105,30)" fg:x="5" fg:w="2"/><text x="2.0230%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 0.71%)</title><rect x="1.7730%" y="101" width="0.7092%" height="15" fill="rgb(243,219,0)" fg:x="5" fg:w="2"/><text x="2.0230%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.35%)</title><rect x="2.1277%" y="85" width="0.3546%" height="15" fill="rgb(244,39,49)" fg:x="6" fg:w="1"/><text x="2.3777%" y="95.50"></text></g><g><title>syscall (1 samples, 0.35%)</title><rect x="2.1277%" y="69" width="0.3546%" height="15" fill="rgb(247,114,35)" fg:x="6" fg:w="1"/><text x="2.3777%" y="79.50"></text></g><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (9 samples, 3.19%)</title><rect x="1.0638%" y="213" width="3.1915%" height="15" fill="rgb(211,137,46)" fg:x="3" fg:w="9"/><text x="1.3138%" y="223.50">&lt;fu..</text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (9 samples, 3.19%)</title><rect x="1.0638%" y="197" width="3.1915%" height="15" fill="rgb(247,225,37)" fg:x="3" fg:w="9"/><text x="1.3138%" y="207.50">&lt;as..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (9 samples, 3.19%)</title><rect x="1.0638%" y="181" width="3.1915%" height="15" fill="rgb(238,11,9)" fg:x="3" fg:w="9"/><text x="1.3138%" y="191.50">&lt;la..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::read::{{closure}} (7 samples, 2.48%)</title><rect x="1.7730%" y="165" width="2.4823%" height="15" fill="rgb(210,68,29)" fg:x="5" fg:w="7"/><text x="2.0230%" y="175.50">&lt;l..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 1.77%)</title><rect x="2.4823%" y="149" width="1.7730%" height="15" fill="rgb(254,42,23)" fg:x="7" fg:w="5"/><text x="2.7323%" y="159.50">&lt;..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (5 samples, 1.77%)</title><rect x="2.4823%" y="133" width="1.7730%" height="15" fill="rgb(221,119,9)" fg:x="7" fg:w="5"/><text x="2.7323%" y="143.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (5 samples, 1.77%)</title><rect x="2.4823%" y="117" width="1.7730%" height="15" fill="rgb(248,33,21)" fg:x="7" fg:w="5"/><text x="2.7323%" y="127.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (5 samples, 1.77%)</title><rect x="2.4823%" y="101" width="1.7730%" height="15" fill="rgb(213,201,27)" fg:x="7" fg:w="5"/><text x="2.7323%" y="111.50">t..</text></g><g><title>syscall (5 samples, 1.77%)</title><rect x="2.4823%" y="85" width="1.7730%" height="15" fill="rgb(252,126,17)" fg:x="7" fg:w="5"/><text x="2.7323%" y="95.50">s..</text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (40 samples, 14.18%)</title><rect x="9.9291%" y="181" width="14.1844%" height="15" fill="rgb(229,222,24)" fg:x="28" fg:w="40"/><text x="10.1791%" y="191.50">&lt;futures_lite::stream:..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (39 samples, 13.83%)</title><rect x="10.2837%" y="165" width="13.8298%" height="15" fill="rgb(230,165,37)" fg:x="29" fg:w="39"/><text x="10.5337%" y="175.50">&lt;crc32fast::Hasher as..</text></g><g><title>crc32fast::baseline::update_fast_16 (36 samples, 12.77%)</title><rect x="11.3475%" y="149" width="12.7660%" height="15" fill="rgb(233,14,41)" fg:x="32" fg:w="36"/><text x="11.5975%" y="159.50">crc32fast::baseline..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (6 samples, 2.13%)</title><rect x="24.1135%" y="181" width="2.1277%" height="15" fill="rgb(220,124,36)" fg:x="68" fg:w="6"/><text x="24.3635%" y="191.50">&lt;..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (5 samples, 1.77%)</title><rect x="29.4326%" y="165" width="1.7730%" height="15" fill="rgb(247,210,52)" fg:x="83" fg:w="5"/><text x="29.6826%" y="175.50">&lt;..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.71%)</title><rect x="30.4965%" y="149" width="0.7092%" height="15" fill="rgb(210,219,20)" fg:x="86" fg:w="2"/><text x="30.7465%" y="159.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.71%)</title><rect x="30.4965%" y="133" width="0.7092%" height="15" fill="rgb(219,142,31)" fg:x="86" fg:w="2"/><text x="30.7465%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (2 samples, 0.71%)</title><rect x="30.4965%" y="117" width="0.7092%" height="15" fill="rgb(246,3,32)" fg:x="86" fg:w="2"/><text x="30.7465%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.71%)</title><rect x="30.4965%" y="101" width="0.7092%" height="15" fill="rgb(248,14,6)" fg:x="86" fg:w="2"/><text x="30.7465%" y="111.50"></text></g><g><title>syscall (2 samples, 0.71%)</title><rect x="30.4965%" y="85" width="0.7092%" height="15" fill="rgb(232,69,28)" fg:x="86" fg:w="2"/><text x="30.7465%" y="95.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (4 samples, 1.42%)</title><rect x="31.2057%" y="165" width="1.4184%" height="15" fill="rgb(225,157,41)" fg:x="88" fg:w="4"/><text x="31.4557%" y="175.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (5 samples, 1.77%)</title><rect x="32.6241%" y="165" width="1.7730%" height="15" fill="rgb(207,133,46)" fg:x="92" fg:w="5"/><text x="32.8741%" y="175.50">t..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (5 samples, 1.77%)</title><rect x="35.4610%" y="149" width="1.7730%" height="15" fill="rgb(218,225,29)" fg:x="100" fg:w="5"/><text x="35.7110%" y="159.50">&lt;..</text></g><g><title>tokio::runtime::park::wake_by_ref (1 samples, 0.35%)</title><rect x="36.8794%" y="133" width="0.3546%" height="15" fill="rgb(242,38,40)" fg:x="104" fg:w="1"/><text x="37.1294%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (35 samples, 12.41%)</title><rect x="26.2411%" y="181" width="12.4113%" height="15" fill="rgb(211,177,32)" fg:x="74" fg:w="35"/><text x="26.4911%" y="191.50">&lt;laminarmq::storage..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (12 samples, 4.26%)</title><rect x="34.3972%" y="165" width="4.2553%" height="15" fill="rgb(251,139,41)" fg:x="97" fg:w="12"/><text x="34.6472%" y="175.50">tokio..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (4 samples, 1.42%)</title><rect x="37.2340%" y="149" width="1.4184%" height="15" fill="rgb(211,182,47)" fg:x="105" fg:w="4"/><text x="37.4840%" y="159.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (3 samples, 1.06%)</title><rect x="38.6525%" y="181" width="1.0638%" height="15" fill="rgb(227,108,6)" fg:x="109" fg:w="3"/><text x="38.9025%" y="191.50"></text></g><g><title>malloc (3 samples, 1.06%)</title><rect x="38.6525%" y="165" width="1.0638%" height="15" fill="rgb(206,4,36)" fg:x="109" fg:w="3"/><text x="38.9025%" y="175.50"></text></g><g><title>__libc_free (5 samples, 1.77%)</title><rect x="39.7163%" y="181" width="1.7730%" height="15" fill="rgb(232,107,21)" fg:x="112" fg:w="5"/><text x="39.9663%" y="191.50">_..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (106 samples, 37.59%)</title><rect x="4.2553%" y="197" width="37.5887%" height="15" fill="rgb(236,11,10)" fg:x="12" fg:w="106"/><text x="4.5053%" y="207.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}}&gt; (1 samples, 0.35%)</title><rect x="41.4894%" y="181" width="0.3546%" height="15" fill="rgb(238,201,34)" fg:x="117" fg:w="1"/><text x="41.7394%" y="191.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{{closure}} (118 samples, 41.84%)</title><rect x="0.7092%" y="229" width="41.8440%" height="15" fill="rgb(232,56,27)" fg:x="2" fg:w="118"/><text x="0.9592%" y="239.50">segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (108 samples, 38.30%)</title><rect x="4.2553%" y="213" width="38.2979%" height="15" fill="rgb(253,86,41)" fg:x="12" fg:w="108"/><text x="4.5053%" y="223.50">&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S..</text></g><g><title>laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt;::append::{{closure}} (2 samples, 0.71%)</title><rect x="41.8440%" y="197" width="0.7092%" height="15" fill="rgb(216,169,7)" fg:x="118" fg:w="2"/><text x="42.0940%" y="207.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (1 samples, 0.35%)</title><rect x="42.1986%" y="181" width="0.3546%" height="15" fill="rgb(245,222,25)" fg:x="119" fg:w="1"/><text x="42.4486%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (123 samples, 43.62%)</title><rect x="0.0000%" y="309" width="43.6170%" height="15" fill="rgb(210,222,40)" fg:x="0" fg:w="123"/><text x="0.2500%" y="319.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (123 samples, 43.62%)</title><rect x="0.0000%" y="293" width="43.6170%" height="15" fill="rgb(214,122,0)" fg:x="0" fg:w="123"/><text x="0.2500%" y="303.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::I..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (123 samples, 43.62%)</title><rect x="0.0000%" y="277" width="43.6170%" height="15" fill="rgb(206,77,31)" fg:x="0" fg:w="123"/><text x="0.2500%" y="287.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (123 samples, 43.62%)</title><rect x="0.0000%" y="261" width="43.6170%" height="15" fill="rgb(233,8,28)" fg:x="0" fg:w="123"/><text x="0.2500%" y="271.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncEx..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (123 samples, 43.62%)</title><rect x="0.0000%" y="245" width="43.6170%" height="15" fill="rgb(241,89,47)" fg:x="0" fg:w="123"/><text x="0.2500%" y="255.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (3 samples, 1.06%)</title><rect x="42.5532%" y="229" width="1.0638%" height="15" fill="rgb(247,43,42)" fg:x="120" fg:w="3"/><text x="42.8032%" y="239.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (3 samples, 1.06%)</title><rect x="42.5532%" y="213" width="1.0638%" height="15" fill="rgb(251,69,26)" fg:x="120" fg:w="3"/><text x="42.8032%" y="223.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (3 samples, 1.06%)</title><rect x="42.5532%" y="197" width="1.0638%" height="15" fill="rgb(254,154,19)" fg:x="120" fg:w="3"/><text x="42.8032%" y="207.50"></text></g><g><title>std::sys::unix::futex::futex_wait (3 samples, 1.06%)</title><rect x="42.5532%" y="181" width="1.0638%" height="15" fill="rgb(225,34,44)" fg:x="120" fg:w="3"/><text x="42.8032%" y="191.50"></text></g><g><title>syscall (3 samples, 1.06%)</title><rect x="42.5532%" y="165" width="1.0638%" height="15" fill="rgb(253,106,18)" fg:x="120" fg:w="3"/><text x="42.8032%" y="175.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (2 samples, 0.71%)</title><rect x="44.6809%" y="181" width="0.7092%" height="15" fill="rgb(213,52,17)" fg:x="126" fg:w="2"/><text x="44.9309%" y="191.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (2 samples, 0.71%)</title><rect x="44.6809%" y="165" width="0.7092%" height="15" fill="rgb(240,102,9)" fg:x="126" fg:w="2"/><text x="44.9309%" y="175.50"></text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 2.13%)</title><rect x="44.6809%" y="213" width="2.1277%" height="15" fill="rgb(209,113,39)" fg:x="126" fg:w="6"/><text x="44.9309%" y="223.50">&lt;..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (6 samples, 2.13%)</title><rect x="44.6809%" y="197" width="2.1277%" height="15" fill="rgb(227,2,2)" fg:x="126" fg:w="6"/><text x="44.9309%" y="207.50">&lt;..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::read::{{closure}} (4 samples, 1.42%)</title><rect x="45.3901%" y="181" width="1.4184%" height="15" fill="rgb(218,64,9)" fg:x="128" fg:w="4"/><text x="45.6401%" y="191.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (4 samples, 1.42%)</title><rect x="45.3901%" y="165" width="1.4184%" height="15" fill="rgb(241,221,14)" fg:x="128" fg:w="4"/><text x="45.6401%" y="175.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (4 samples, 1.42%)</title><rect x="45.3901%" y="149" width="1.4184%" height="15" fill="rgb(251,117,52)" fg:x="128" fg:w="4"/><text x="45.6401%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (4 samples, 1.42%)</title><rect x="45.3901%" y="133" width="1.4184%" height="15" fill="rgb(232,147,16)" fg:x="128" fg:w="4"/><text x="45.6401%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (4 samples, 1.42%)</title><rect x="45.3901%" y="117" width="1.4184%" height="15" fill="rgb(250,20,12)" fg:x="128" fg:w="4"/><text x="45.6401%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (4 samples, 1.42%)</title><rect x="45.3901%" y="101" width="1.4184%" height="15" fill="rgb(253,217,21)" fg:x="128" fg:w="4"/><text x="45.6401%" y="111.50"></text></g><g><title>syscall (4 samples, 1.42%)</title><rect x="45.3901%" y="85" width="1.4184%" height="15" fill="rgb(219,83,9)" fg:x="128" fg:w="4"/><text x="45.6401%" y="95.50"></text></g><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (8 samples, 2.84%)</title><rect x="44.3262%" y="229" width="2.8369%" height="15" fill="rgb(216,98,2)" fg:x="125" fg:w="8"/><text x="44.5762%" y="239.50">&lt;f..</text></g><g><title>__libc_free (1 samples, 0.35%)</title><rect x="46.8085%" y="213" width="0.3546%" height="15" fill="rgb(245,118,47)" fg:x="132" fg:w="1"/><text x="47.0585%" y="223.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.35%)</title><rect x="47.5177%" y="213" width="0.3546%" height="15" fill="rgb(213,171,13)" fg:x="134" fg:w="1"/><text x="47.7677%" y="223.50"></text></g><g><title>malloc (1 samples, 0.35%)</title><rect x="47.5177%" y="197" width="0.3546%" height="15" fill="rgb(234,181,49)" fg:x="134" fg:w="1"/><text x="47.7677%" y="207.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (38 samples, 13.48%)</title><rect x="50.3546%" y="197" width="13.4752%" height="15" fill="rgb(245,88,45)" fg:x="142" fg:w="38"/><text x="50.6046%" y="207.50">&lt;futures_lite::strea..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (37 samples, 13.12%)</title><rect x="50.7092%" y="181" width="13.1206%" height="15" fill="rgb(248,136,45)" fg:x="143" fg:w="37"/><text x="50.9592%" y="191.50">&lt;crc32fast::Hasher a..</text></g><g><title>crc32fast::baseline::update_fast_16 (34 samples, 12.06%)</title><rect x="51.7730%" y="165" width="12.0567%" height="15" fill="rgb(250,10,39)" fg:x="146" fg:w="34"/><text x="52.0230%" y="175.50">crc32fast::baselin..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (7 samples, 2.48%)</title><rect x="63.8298%" y="197" width="2.4823%" height="15" fill="rgb(209,70,2)" fg:x="180" fg:w="7"/><text x="64.0798%" y="207.50">&lt;l..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (8 samples, 2.84%)</title><rect x="68.4397%" y="181" width="2.8369%" height="15" fill="rgb(231,185,18)" fg:x="193" fg:w="8"/><text x="68.6897%" y="191.50">&lt;t..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (5 samples, 1.77%)</title><rect x="69.5035%" y="165" width="1.7730%" height="15" fill="rgb(243,183,3)" fg:x="196" fg:w="5"/><text x="69.7535%" y="175.50">t..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (5 samples, 1.77%)</title><rect x="69.5035%" y="149" width="1.7730%" height="15" fill="rgb(248,22,54)" fg:x="196" fg:w="5"/><text x="69.7535%" y="159.50">&lt;..</text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (4 samples, 1.42%)</title><rect x="69.8582%" y="133" width="1.4184%" height="15" fill="rgb(211,27,22)" fg:x="197" fg:w="4"/><text x="70.1082%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (4 samples, 1.42%)</title><rect x="69.8582%" y="117" width="1.4184%" height="15" fill="rgb(219,21,25)" fg:x="197" fg:w="4"/><text x="70.1082%" y="127.50"></text></g><g><title>syscall (2 samples, 0.71%)</title><rect x="70.5674%" y="101" width="0.7092%" height="15" fill="rgb(218,96,19)" fg:x="199" fg:w="2"/><text x="70.8174%" y="111.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (6 samples, 2.13%)</title><rect x="71.2766%" y="181" width="2.1277%" height="15" fill="rgb(253,78,51)" fg:x="201" fg:w="6"/><text x="71.5266%" y="191.50">t..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (8 samples, 2.84%)</title><rect x="73.4043%" y="181" width="2.8369%" height="15" fill="rgb(213,90,50)" fg:x="207" fg:w="8"/><text x="73.6543%" y="191.50">to..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.71%)</title><rect x="78.0142%" y="165" width="0.7092%" height="15" fill="rgb(224,22,44)" fg:x="220" fg:w="2"/><text x="78.2642%" y="175.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (1 samples, 0.35%)</title><rect x="78.7234%" y="165" width="0.3546%" height="15" fill="rgb(232,71,38)" fg:x="222" fg:w="1"/><text x="78.9734%" y="175.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (39 samples, 13.83%)</title><rect x="66.3121%" y="197" width="13.8298%" height="15" fill="rgb(216,41,1)" fg:x="187" fg:w="39"/><text x="66.5621%" y="207.50">&lt;laminarmq::storage::..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (11 samples, 3.90%)</title><rect x="76.2411%" y="181" width="3.9007%" height="15" fill="rgb(235,166,38)" fg:x="215" fg:w="11"/><text x="76.4911%" y="191.50">toki..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (3 samples, 1.06%)</title><rect x="79.0780%" y="165" width="1.0638%" height="15" fill="rgb(249,3,4)" fg:x="223" fg:w="3"/><text x="79.3280%" y="175.50"></text></g><g><title>__libc_free (5 samples, 1.77%)</title><rect x="80.1418%" y="197" width="1.7730%" height="15" fill="rgb(244,38,41)" fg:x="226" fg:w="5"/><text x="80.3918%" y="207.50">_..</text></g><g><title>segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{{closure}} (109 samples, 38.65%)</title><rect x="43.6170%" y="245" width="38.6525%" height="15" fill="rgb(233,211,6)" fg:x="123" fg:w="109"/><text x="43.8670%" y="255.50">segmented_log_read_stream::time_tokio_std_seek_read_segmented_l..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (99 samples, 35.11%)</title><rect x="47.1631%" y="229" width="35.1064%" height="15" fill="rgb(245,164,5)" fg:x="133" fg:w="99"/><text x="47.4131%" y="239.50">&lt;laminarmq::storage::commit_log::segmented_log::Segmented..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (97 samples, 34.40%)</title><rect x="47.8723%" y="213" width="34.3972%" height="15" fill="rgb(218,122,42)" fg:x="135" fg:w="97"/><text x="48.1223%" y="223.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}}&gt; (1 samples, 0.35%)</title><rect x="81.9149%" y="197" width="0.3546%" height="15" fill="rgb(236,8,10)" fg:x="231" fg:w="1"/><text x="82.1649%" y="207.50"></text></g><g><title>segmented_log_r (239 samples, 84.75%)</title><rect x="0.0000%" y="597" width="84.7518%" height="15" fill="rgb(236,78,24)" fg:x="0" fg:w="239"/><text x="0.2500%" y="607.50">segmented_log_r</text></g><g><title>_start (239 samples, 84.75%)</title><rect x="0.0000%" y="581" width="84.7518%" height="15" fill="rgb(234,150,25)" fg:x="0" fg:w="239"/><text x="0.2500%" y="591.50">_start</text></g><g><title>__libc_start_main (239 samples, 84.75%)</title><rect x="0.0000%" y="565" width="84.7518%" height="15" fill="rgb(235,169,24)" fg:x="0" fg:w="239"/><text x="0.2500%" y="575.50">__libc_start_main</text></g><g><title>main (239 samples, 84.75%)</title><rect x="0.0000%" y="549" width="84.7518%" height="15" fill="rgb(234,196,14)" fg:x="0" fg:w="239"/><text x="0.2500%" y="559.50">main</text></g><g><title>std::rt::lang_start_internal (239 samples, 84.75%)</title><rect x="0.0000%" y="533" width="84.7518%" height="15" fill="rgb(225,157,20)" fg:x="0" fg:w="239"/><text x="0.2500%" y="543.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (239 samples, 84.75%)</title><rect x="0.0000%" y="517" width="84.7518%" height="15" fill="rgb(225,1,52)" fg:x="0" fg:w="239"/><text x="0.2500%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (239 samples, 84.75%)</title><rect x="0.0000%" y="501" width="84.7518%" height="15" fill="rgb(247,66,21)" fg:x="0" fg:w="239"/><text x="0.2500%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (239 samples, 84.75%)</title><rect x="0.0000%" y="485" width="84.7518%" height="15" fill="rgb(229,217,39)" fg:x="0" fg:w="239"/><text x="0.2500%" y="495.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (239 samples, 84.75%)</title><rect x="0.0000%" y="469" width="84.7518%" height="15" fill="rgb(220,38,19)" fg:x="0" fg:w="239"/><text x="0.2500%" y="479.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (239 samples, 84.75%)</title><rect x="0.0000%" y="453" width="84.7518%" height="15" fill="rgb(208,61,35)" fg:x="0" fg:w="239"/><text x="0.2500%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (239 samples, 84.75%)</title><rect x="0.0000%" y="437" width="84.7518%" height="15" fill="rgb(244,203,9)" fg:x="0" fg:w="239"/><text x="0.2500%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (239 samples, 84.75%)</title><rect x="0.0000%" y="421" width="84.7518%" height="15" fill="rgb(220,75,2)" fg:x="0" fg:w="239"/><text x="0.2500%" y="431.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (239 samples, 84.75%)</title><rect x="0.0000%" y="405" width="84.7518%" height="15" fill="rgb(212,149,10)" fg:x="0" fg:w="239"/><text x="0.2500%" y="415.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (239 samples, 84.75%)</title><rect x="0.0000%" y="389" width="84.7518%" height="15" fill="rgb(253,3,13)" fg:x="0" fg:w="239"/><text x="0.2500%" y="399.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (239 samples, 84.75%)</title><rect x="0.0000%" y="373" width="84.7518%" height="15" fill="rgb(248,54,46)" fg:x="0" fg:w="239"/><text x="0.2500%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>segmented_log_read_stream::main (239 samples, 84.75%)</title><rect x="0.0000%" y="357" width="84.7518%" height="15" fill="rgb(233,156,8)" fg:x="0" fg:w="239"/><text x="0.2500%" y="367.50">segmented_log_read_stream::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (239 samples, 84.75%)</title><rect x="0.0000%" y="341" width="84.7518%" height="15" fill="rgb(248,224,12)" fg:x="0" fg:w="239"/><text x="0.2500%" y="351.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (239 samples, 84.75%)</title><rect x="0.0000%" y="325" width="84.7518%" height="15" fill="rgb(242,6,14)" fg:x="0" fg:w="239"/><text x="0.2500%" y="335.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (116 samples, 41.13%)</title><rect x="43.6170%" y="309" width="41.1348%" height="15" fill="rgb(250,143,0)" fg:x="123" fg:w="116"/><text x="43.8670%" y="319.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (116 samples, 41.13%)</title><rect x="43.6170%" y="293" width="41.1348%" height="15" fill="rgb(253,168,13)" fg:x="123" fg:w="116"/><text x="43.8670%" y="303.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (116 samples, 41.13%)</title><rect x="43.6170%" y="277" width="41.1348%" height="15" fill="rgb(215,95,25)" fg:x="123" fg:w="116"/><text x="43.8670%" y="287.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::Asy..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (116 samples, 41.13%)</title><rect x="43.6170%" y="261" width="41.1348%" height="15" fill="rgb(219,76,4)" fg:x="123" fg:w="116"/><text x="43.8670%" y="271.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (7 samples, 2.48%)</title><rect x="82.2695%" y="245" width="2.4823%" height="15" fill="rgb(227,10,21)" fg:x="232" fg:w="7"/><text x="82.5195%" y="255.50">to..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (6 samples, 2.13%)</title><rect x="82.6241%" y="229" width="2.1277%" height="15" fill="rgb(254,118,37)" fg:x="233" fg:w="6"/><text x="82.8741%" y="239.50">s..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (6 samples, 2.13%)</title><rect x="82.6241%" y="213" width="2.1277%" height="15" fill="rgb(228,41,8)" fg:x="233" fg:w="6"/><text x="82.8741%" y="223.50">s..</text></g><g><title>std::sys::unix::futex::futex_wait (6 samples, 2.13%)</title><rect x="82.6241%" y="197" width="2.1277%" height="15" fill="rgb(242,165,47)" fg:x="233" fg:w="6"/><text x="82.8741%" y="207.50">s..</text></g><g><title>syscall (6 samples, 2.13%)</title><rect x="82.6241%" y="181" width="2.1277%" height="15" fill="rgb(251,194,46)" fg:x="233" fg:w="6"/><text x="82.8741%" y="191.50">s..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.35%)</title><rect x="85.8156%" y="437" width="0.3546%" height="15" fill="rgb(206,36,40)" fg:x="242" fg:w="1"/><text x="86.0656%" y="447.50"></text></g><g><title>std::sys::unix::futex::futex_wait::{{closure}} (1 samples, 0.35%)</title><rect x="85.8156%" y="421" width="0.3546%" height="15" fill="rgb(245,81,24)" fg:x="242" fg:w="1"/><text x="86.0656%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.35%)</title><rect x="85.8156%" y="405" width="0.3546%" height="15" fill="rgb(247,150,27)" fg:x="242" fg:w="1"/><text x="86.0656%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (13 samples, 4.61%)</title><rect x="85.1064%" y="485" width="4.6099%" height="15" fill="rgb(254,170,14)" fg:x="240" fg:w="13"/><text x="85.3564%" y="495.50">std::..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (13 samples, 4.61%)</title><rect x="85.1064%" y="469" width="4.6099%" height="15" fill="rgb(220,12,27)" fg:x="240" fg:w="13"/><text x="85.3564%" y="479.50">std::..</text></g><g><title>std::sys::unix::futex::futex_wait (13 samples, 4.61%)</title><rect x="85.1064%" y="453" width="4.6099%" height="15" fill="rgb(217,14,38)" fg:x="240" fg:w="13"/><text x="85.3564%" y="463.50">std::..</text></g><g><title>syscall (10 samples, 3.55%)</title><rect x="86.1702%" y="437" width="3.5461%" height="15" fill="rgb(252,43,25)" fg:x="243" fg:w="10"/><text x="86.4202%" y="447.50">sysc..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (5 samples, 1.77%)</title><rect x="89.7163%" y="421" width="1.7730%" height="15" fill="rgb(239,29,10)" fg:x="253" fg:w="5"/><text x="89.9663%" y="431.50">&lt;..</text></g><g><title>std::sys::unix::fs::File::seek (4 samples, 1.42%)</title><rect x="90.0709%" y="405" width="1.4184%" height="15" fill="rgb(244,192,9)" fg:x="254" fg:w="4"/><text x="90.3209%" y="415.50"></text></g><g><title>llseek (4 samples, 1.42%)</title><rect x="90.0709%" y="389" width="1.4184%" height="15" fill="rgb(211,95,9)" fg:x="254" fg:w="4"/><text x="90.3209%" y="399.50"></text></g><g><title>std::io::Write::write_all (4 samples, 1.42%)</title><rect x="91.4894%" y="421" width="1.4184%" height="15" fill="rgb(214,192,51)" fg:x="258" fg:w="4"/><text x="91.7394%" y="431.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (4 samples, 1.42%)</title><rect x="91.4894%" y="405" width="1.4184%" height="15" fill="rgb(218,34,7)" fg:x="258" fg:w="4"/><text x="91.7394%" y="415.50"></text></g><g><title>std::sys::unix::fs::File::write (4 samples, 1.42%)</title><rect x="91.4894%" y="389" width="1.4184%" height="15" fill="rgb(225,69,23)" fg:x="258" fg:w="4"/><text x="91.7394%" y="399.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (4 samples, 1.42%)</title><rect x="91.4894%" y="373" width="1.4184%" height="15" fill="rgb(211,171,28)" fg:x="258" fg:w="4"/><text x="91.7394%" y="383.50"></text></g><g><title>__write (4 samples, 1.42%)</title><rect x="91.4894%" y="357" width="1.4184%" height="15" fill="rgb(253,130,49)" fg:x="258" fg:w="4"/><text x="91.7394%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (17 samples, 6.03%)</title><rect x="89.7163%" y="469" width="6.0284%" height="15" fill="rgb(244,194,0)" fg:x="253" fg:w="17"/><text x="89.9663%" y="479.50">&lt;core::p..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (17 samples, 6.03%)</title><rect x="89.7163%" y="453" width="6.0284%" height="15" fill="rgb(209,141,22)" fg:x="253" fg:w="17"/><text x="89.9663%" y="463.50">tokio::l..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 6.03%)</title><rect x="89.7163%" y="437" width="6.0284%" height="15" fill="rgb(215,161,48)" fg:x="253" fg:w="17"/><text x="89.9663%" y="447.50">&lt;tokio::..</text></g><g><title>tokio::io::blocking::Buf::read_from (8 samples, 2.84%)</title><rect x="92.9078%" y="421" width="2.8369%" height="15" fill="rgb(214,193,33)" fg:x="262" fg:w="8"/><text x="93.1578%" y="431.50">to..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (7 samples, 2.48%)</title><rect x="93.2624%" y="405" width="2.4823%" height="15" fill="rgb(234,47,14)" fg:x="263" fg:w="7"/><text x="93.5124%" y="415.50">&lt;&amp;..</text></g><g><title>std::sys::unix::fs::File::read (7 samples, 2.48%)</title><rect x="93.2624%" y="389" width="2.4823%" height="15" fill="rgb(250,117,46)" fg:x="263" fg:w="7"/><text x="93.5124%" y="399.50">st..</text></g><g><title>std::sys::unix::fd::FileDesc::read (7 samples, 2.48%)</title><rect x="93.2624%" y="373" width="2.4823%" height="15" fill="rgb(233,178,46)" fg:x="263" fg:w="7"/><text x="93.5124%" y="383.50">st..</text></g><g><title>__read (7 samples, 2.48%)</title><rect x="93.2624%" y="357" width="2.4823%" height="15" fill="rgb(227,174,37)" fg:x="263" fg:w="7"/><text x="93.5124%" y="367.50">__..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 0.71%)</title><rect x="95.7447%" y="469" width="0.7092%" height="15" fill="rgb(211,188,26)" fg:x="270" fg:w="2"/><text x="95.9947%" y="479.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.71%)</title><rect x="95.7447%" y="453" width="0.7092%" height="15" fill="rgb(243,83,42)" fg:x="270" fg:w="2"/><text x="95.9947%" y="463.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.71%)</title><rect x="95.7447%" y="437" width="0.7092%" height="15" fill="rgb(223,104,8)" fg:x="270" fg:w="2"/><text x="95.9947%" y="447.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (2 samples, 0.71%)</title><rect x="95.7447%" y="421" width="0.7092%" height="15" fill="rgb(252,86,25)" fg:x="270" fg:w="2"/><text x="95.9947%" y="431.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (2 samples, 0.71%)</title><rect x="95.7447%" y="405" width="0.7092%" height="15" fill="rgb(252,215,51)" fg:x="270" fg:w="2"/><text x="95.9947%" y="415.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.71%)</title><rect x="95.7447%" y="389" width="0.7092%" height="15" fill="rgb(247,152,50)" fg:x="270" fg:w="2"/><text x="95.9947%" y="399.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.71%)</title><rect x="95.7447%" y="373" width="0.7092%" height="15" fill="rgb(212,89,50)" fg:x="270" fg:w="2"/><text x="95.9947%" y="383.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (2 samples, 0.71%)</title><rect x="95.7447%" y="357" width="0.7092%" height="15" fill="rgb(244,123,42)" fg:x="270" fg:w="2"/><text x="95.9947%" y="367.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (2 samples, 0.71%)</title><rect x="95.7447%" y="341" width="0.7092%" height="15" fill="rgb(231,12,46)" fg:x="270" fg:w="2"/><text x="95.9947%" y="351.50"></text></g><g><title>unlinkat (2 samples, 0.71%)</title><rect x="95.7447%" y="325" width="0.7092%" height="15" fill="rgb(217,54,54)" fg:x="270" fg:w="2"/><text x="95.9947%" y="335.50"></text></g><g><title>all (282 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(209,136,12)" fg:x="0" fg:w="282"/><text x="0.2500%" y="623.50"></text></g><g><title>tokio-runtime-w (43 samples, 15.25%)</title><rect x="84.7518%" y="597" width="15.2482%" height="15" fill="rgb(215,90,51)" fg:x="239" fg:w="43"/><text x="85.0018%" y="607.50">tokio-runtime-w</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (43 samples, 15.25%)</title><rect x="84.7518%" y="581" width="15.2482%" height="15" fill="rgb(252,175,12)" fg:x="239" fg:w="43"/><text x="85.0018%" y="591.50">std::sys::unix::thread:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (43 samples, 15.25%)</title><rect x="84.7518%" y="565" width="15.2482%" height="15" fill="rgb(244,46,16)" fg:x="239" fg:w="43"/><text x="85.0018%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (43 samples, 15.25%)</title><rect x="84.7518%" y="549" width="15.2482%" height="15" fill="rgb(206,9,54)" fg:x="239" fg:w="43"/><text x="85.0018%" y="559.50">&lt;alloc::boxed::Box&lt;F,A&gt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (43 samples, 15.25%)</title><rect x="84.7518%" y="533" width="15.2482%" height="15" fill="rgb(231,126,49)" fg:x="239" fg:w="43"/><text x="85.0018%" y="543.50">core::ops::function::Fn..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (43 samples, 15.25%)</title><rect x="84.7518%" y="517" width="15.2482%" height="15" fill="rgb(247,216,4)" fg:x="239" fg:w="43"/><text x="85.0018%" y="527.50">std::sys_common::backtr..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (43 samples, 15.25%)</title><rect x="84.7518%" y="501" width="15.2482%" height="15" fill="rgb(228,161,21)" fg:x="239" fg:w="43"/><text x="85.0018%" y="511.50">tokio::runtime::blockin..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (29 samples, 10.28%)</title><rect x="89.7163%" y="485" width="10.2837%" height="15" fill="rgb(238,30,10)" fg:x="253" fg:w="29"/><text x="89.9663%" y="495.50">tokio::runtime:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (10 samples, 3.55%)</title><rect x="96.4539%" y="469" width="3.5461%" height="15" fill="rgb(244,83,13)" fg:x="272" fg:w="10"/><text x="96.7039%" y="479.50">toki..</text></g><g><title>tokio::runtime::park::wake_by_ref (9 samples, 3.19%)</title><rect x="96.8085%" y="453" width="3.1915%" height="15" fill="rgb(252,18,31)" fg:x="273" fg:w="9"/><text x="97.0585%" y="463.50">tok..</text></g><g><title>syscall (9 samples, 3.19%)</title><rect x="96.8085%" y="437" width="3.1915%" height="15" fill="rgb(249,176,11)" fg:x="273" fg:w="9"/><text x="97.0585%" y="447.50">sys..</text></g></svg></svg>