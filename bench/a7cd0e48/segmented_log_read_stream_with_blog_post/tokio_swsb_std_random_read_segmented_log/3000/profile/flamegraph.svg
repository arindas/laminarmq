<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="160"><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.62%)</title><rect x="0.0000%" y="181" width="0.6250%" height="15" fill="rgb(252,20,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.62%)</title><rect x="0.0000%" y="165" width="0.6250%" height="15" fill="rgb(250,222,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (1 samples, 0.62%)</title><rect x="0.0000%" y="149" width="0.6250%" height="15" fill="rgb(212,216,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::read::{{closure}} (1 samples, 0.62%)</title><rect x="0.0000%" y="133" width="0.6250%" height="15" fill="rgb(222,112,11)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.62%)</title><rect x="0.0000%" y="117" width="0.6250%" height="15" fill="rgb(229,37,22)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.62%)</title><rect x="0.0000%" y="101" width="0.6250%" height="15" fill="rgb(211,211,44)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.62%)</title><rect x="0.0000%" y="85" width="0.6250%" height="15" fill="rgb(207,126,48)" fg:x="0" fg:w="1"/><text x="0.2500%" y="95.50"></text></g><g><title>syscall (1 samples, 0.62%)</title><rect x="0.0000%" y="69" width="0.6250%" height="15" fill="rgb(226,154,49)" fg:x="0" fg:w="1"/><text x="0.2500%" y="79.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (10 samples, 6.25%)</title><rect x="1.8750%" y="149" width="6.2500%" height="15" fill="rgb(214,86,6)" fg:x="3" fg:w="10"/><text x="2.1250%" y="159.50">&lt;futures..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (9 samples, 5.62%)</title><rect x="2.5000%" y="133" width="5.6250%" height="15" fill="rgb(244,64,6)" fg:x="4" fg:w="9"/><text x="2.7500%" y="143.50">&lt;crc32f..</text></g><g><title>crc32fast::baseline::update_fast_16 (9 samples, 5.62%)</title><rect x="2.5000%" y="117" width="5.6250%" height="15" fill="rgb(245,186,46)" fg:x="4" fg:w="9"/><text x="2.7500%" y="127.50">crc32fa..</text></g><g><title>__libc_free (1 samples, 0.62%)</title><rect x="8.1250%" y="149" width="0.6250%" height="15" fill="rgb(239,214,48)" fg:x="13" fg:w="1"/><text x="8.3750%" y="159.50"></text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (1 samples, 0.62%)</title><rect x="8.7500%" y="149" width="0.6250%" height="15" fill="rgb(222,209,29)" fg:x="14" fg:w="1"/><text x="9.0000%" y="159.50"></text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice::{{closure}} (9 samples, 5.62%)</title><rect x="9.3750%" y="149" width="5.6250%" height="15" fill="rgb(218,61,54)" fg:x="15" fg:w="9"/><text x="9.6250%" y="159.50">laminar..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (8 samples, 5.00%)</title><rect x="10.0000%" y="133" width="5.0000%" height="15" fill="rgb(247,53,46)" fg:x="16" fg:w="8"/><text x="10.2500%" y="143.50">&lt;tokio..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (2 samples, 1.25%)</title><rect x="13.7500%" y="117" width="1.2500%" height="15" fill="rgb(220,225,32)" fg:x="22" fg:w="2"/><text x="14.0000%" y="127.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 1.25%)</title><rect x="13.7500%" y="101" width="1.2500%" height="15" fill="rgb(241,134,24)" fg:x="22" fg:w="2"/><text x="14.0000%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (2 samples, 1.25%)</title><rect x="13.7500%" y="85" width="1.2500%" height="15" fill="rgb(227,205,12)" fg:x="22" fg:w="2"/><text x="14.0000%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 1.25%)</title><rect x="13.7500%" y="69" width="1.2500%" height="15" fill="rgb(210,92,17)" fg:x="22" fg:w="2"/><text x="14.0000%" y="79.50"></text></g><g><title>syscall (2 samples, 1.25%)</title><rect x="13.7500%" y="53" width="1.2500%" height="15" fill="rgb(231,222,51)" fg:x="22" fg:w="2"/><text x="14.0000%" y="63.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_random_read_segmented_log::{{closure}} (26 samples, 16.25%)</title><rect x="0.0000%" y="197" width="16.2500%" height="15" fill="rgb(209,93,11)" fg:x="0" fg:w="26"/><text x="0.2500%" y="207.50">segmented_log_read_stream..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (25 samples, 15.62%)</title><rect x="0.6250%" y="181" width="15.6250%" height="15" fill="rgb(211,34,41)" fg:x="1" fg:w="25"/><text x="0.8750%" y="191.50">&lt;laminarmq::storage::com..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (25 samples, 15.62%)</title><rect x="0.6250%" y="165" width="15.6250%" height="15" fill="rgb(242,26,40)" fg:x="1" fg:w="25"/><text x="0.8750%" y="175.50">laminarmq::storage::Stor..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (2 samples, 1.25%)</title><rect x="15.0000%" y="149" width="1.2500%" height="15" fill="rgb(225,177,3)" fg:x="24" fg:w="2"/><text x="15.2500%" y="159.50"></text></g><g><title>malloc (2 samples, 1.25%)</title><rect x="15.0000%" y="133" width="1.2500%" height="15" fill="rgb(252,193,10)" fg:x="24" fg:w="2"/><text x="15.2500%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 16.88%)</title><rect x="0.0000%" y="277" width="16.8750%" height="15" fill="rgb(247,24,27)" fg:x="0" fg:w="27"/><text x="0.2500%" y="287.50">&lt;alloc::vec::Vec&lt;T&gt; as all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 16.88%)</title><rect x="0.0000%" y="261" width="16.8750%" height="15" fill="rgb(240,116,41)" fg:x="0" fg:w="27"/><text x="0.2500%" y="271.50">&lt;core::iter::adapters::map..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (27 samples, 16.88%)</title><rect x="0.0000%" y="245" width="16.8750%" height="15" fill="rgb(218,136,33)" fg:x="0" fg:w="27"/><text x="0.2500%" y="255.50">criterion::bencher::AsyncB..</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (27 samples, 16.88%)</title><rect x="0.0000%" y="229" width="16.8750%" height="15" fill="rgb(242,167,18)" fg:x="0" fg:w="27"/><text x="0.2500%" y="239.50">&lt;tokio::runtime::runtime::..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (27 samples, 16.88%)</title><rect x="0.0000%" y="213" width="16.8750%" height="15" fill="rgb(248,229,12)" fg:x="0" fg:w="27"/><text x="0.2500%" y="223.50">tokio::runtime::park::Cach..</text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.62%)</title><rect x="16.2500%" y="197" width="0.6250%" height="15" fill="rgb(243,229,12)" fg:x="26" fg:w="1"/><text x="16.5000%" y="207.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (1 samples, 0.62%)</title><rect x="16.2500%" y="181" width="0.6250%" height="15" fill="rgb(219,193,50)" fg:x="26" fg:w="1"/><text x="16.5000%" y="191.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (1 samples, 0.62%)</title><rect x="16.2500%" y="165" width="0.6250%" height="15" fill="rgb(233,43,45)" fg:x="26" fg:w="1"/><text x="16.5000%" y="175.50"></text></g><g><title>std::sys::unix::futex::futex_wait (1 samples, 0.62%)</title><rect x="16.2500%" y="149" width="0.6250%" height="15" fill="rgb(231,102,19)" fg:x="26" fg:w="1"/><text x="16.5000%" y="159.50"></text></g><g><title>syscall (1 samples, 0.62%)</title><rect x="16.2500%" y="133" width="0.6250%" height="15" fill="rgb(214,49,28)" fg:x="26" fg:w="1"/><text x="16.5000%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as laminarmq::common::split::SplitAt&lt;T&gt;&gt;::split_at (2 samples, 1.25%)</title><rect x="17.5000%" y="149" width="1.2500%" height="15" fill="rgb(230,67,25)" fg:x="28" fg:w="2"/><text x="17.7500%" y="159.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (2 samples, 1.25%)</title><rect x="18.7500%" y="149" width="1.2500%" height="15" fill="rgb(242,94,11)" fg:x="30" fg:w="2"/><text x="19.0000%" y="159.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (2 samples, 1.25%)</title><rect x="18.7500%" y="133" width="1.2500%" height="15" fill="rgb(223,88,28)" fg:x="30" fg:w="2"/><text x="19.0000%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.62%)</title><rect x="20.0000%" y="133" width="0.6250%" height="15" fill="rgb(209,130,47)" fg:x="32" fg:w="1"/><text x="20.2500%" y="143.50"></text></g><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (6 samples, 3.75%)</title><rect x="17.5000%" y="197" width="3.7500%" height="15" fill="rgb(250,144,21)" fg:x="28" fg:w="6"/><text x="17.7500%" y="207.50">&lt;fut..</text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 3.75%)</title><rect x="17.5000%" y="181" width="3.7500%" height="15" fill="rgb(242,221,50)" fg:x="28" fg:w="6"/><text x="17.7500%" y="191.50">&lt;asy..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (6 samples, 3.75%)</title><rect x="17.5000%" y="165" width="3.7500%" height="15" fill="rgb(218,136,3)" fg:x="28" fg:w="6"/><text x="17.7500%" y="175.50">&lt;lam..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::read::{{closure}} (2 samples, 1.25%)</title><rect x="20.0000%" y="149" width="1.2500%" height="15" fill="rgb(216,205,2)" fg:x="32" fg:w="2"/><text x="20.2500%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.62%)</title><rect x="20.6250%" y="133" width="0.6250%" height="15" fill="rgb(247,66,40)" fg:x="33" fg:w="1"/><text x="20.8750%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.62%)</title><rect x="20.6250%" y="117" width="0.6250%" height="15" fill="rgb(205,30,36)" fg:x="33" fg:w="1"/><text x="20.8750%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.62%)</title><rect x="20.6250%" y="101" width="0.6250%" height="15" fill="rgb(248,18,29)" fg:x="33" fg:w="1"/><text x="20.8750%" y="111.50"></text></g><g><title>syscall (1 samples, 0.62%)</title><rect x="20.6250%" y="85" width="0.6250%" height="15" fill="rgb(250,115,44)" fg:x="33" fg:w="1"/><text x="20.8750%" y="95.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (60 samples, 37.50%)</title><rect x="31.2500%" y="165" width="37.5000%" height="15" fill="rgb(239,131,42)" fg:x="50" fg:w="60"/><text x="31.5000%" y="175.50">&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future:..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (54 samples, 33.75%)</title><rect x="35.0000%" y="149" width="33.7500%" height="15" fill="rgb(234,66,40)" fg:x="56" fg:w="54"/><text x="35.2500%" y="159.50">&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write</text></g><g><title>crc32fast::baseline::update_fast_16 (53 samples, 33.12%)</title><rect x="35.6250%" y="133" width="33.1250%" height="15" fill="rgb(250,94,19)" fg:x="57" fg:w="53"/><text x="35.8750%" y="143.50">crc32fast::baseline::update_fast_16</text></g><g><title>__libc_free (5 samples, 3.12%)</title><rect x="68.7500%" y="165" width="3.1250%" height="15" fill="rgb(248,26,26)" fg:x="110" fg:w="5"/><text x="69.0000%" y="175.50">__l..</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (3 samples, 1.88%)</title><rect x="71.8750%" y="165" width="1.8750%" height="15" fill="rgb(214,113,27)" fg:x="115" fg:w="3"/><text x="72.1250%" y="175.50">l..</text></g><g><title>__libc_free (1 samples, 0.62%)</title><rect x="80.6250%" y="101" width="0.6250%" height="15" fill="rgb(227,220,7)" fg:x="129" fg:w="1"/><text x="80.8750%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.62%)</title><rect x="81.2500%" y="85" width="0.6250%" height="15" fill="rgb(249,87,48)" fg:x="130" fg:w="1"/><text x="81.5000%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.62%)</title><rect x="81.2500%" y="69" width="0.6250%" height="15" fill="rgb(227,59,9)" fg:x="130" fg:w="1"/><text x="81.5000%" y="79.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.62%)</title><rect x="81.2500%" y="53" width="0.6250%" height="15" fill="rgb(239,172,13)" fg:x="130" fg:w="1"/><text x="81.5000%" y="63.50"></text></g><g><title>posix_memalign (1 samples, 0.62%)</title><rect x="81.2500%" y="37" width="0.6250%" height="15" fill="rgb(216,198,3)" fg:x="130" fg:w="1"/><text x="81.5000%" y="47.50"></text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice::{{closure}} (14 samples, 8.75%)</title><rect x="73.7500%" y="165" width="8.7500%" height="15" fill="rgb(221,177,27)" fg:x="118" fg:w="14"/><text x="74.0000%" y="175.50">laminarmq::s..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (9 samples, 5.62%)</title><rect x="76.8750%" y="149" width="5.6250%" height="15" fill="rgb(216,98,2)" fg:x="123" fg:w="9"/><text x="77.1250%" y="159.50">&lt;tokio:..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (3 samples, 1.88%)</title><rect x="80.6250%" y="133" width="1.8750%" height="15" fill="rgb(234,45,33)" fg:x="129" fg:w="3"/><text x="80.8750%" y="143.50">t..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (3 samples, 1.88%)</title><rect x="80.6250%" y="117" width="1.8750%" height="15" fill="rgb(254,73,30)" fg:x="129" fg:w="3"/><text x="80.8750%" y="127.50">&lt;..</text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (2 samples, 1.25%)</title><rect x="81.2500%" y="101" width="1.2500%" height="15" fill="rgb(232,189,41)" fg:x="130" fg:w="2"/><text x="81.5000%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.62%)</title><rect x="81.8750%" y="85" width="0.6250%" height="15" fill="rgb(211,159,51)" fg:x="131" fg:w="1"/><text x="82.1250%" y="95.50"></text></g><g><title>syscall (1 samples, 0.62%)</title><rect x="81.8750%" y="69" width="0.6250%" height="15" fill="rgb(214,26,10)" fg:x="131" fg:w="1"/><text x="82.1250%" y="79.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_random_read_segmented_log::{{closure}} (106 samples, 66.25%)</title><rect x="16.8750%" y="213" width="66.2500%" height="15" fill="rgb(236,218,37)" fg:x="27" fg:w="106"/><text x="17.1250%" y="223.50">segmented_log_read_stream::time_tokio_std_random_read_segmented_log::{{closure}}</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (99 samples, 61.88%)</title><rect x="21.2500%" y="197" width="61.8750%" height="15" fill="rgb(205,53,43)" fg:x="34" fg:w="99"/><text x="21.5000%" y="207.50">&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizab..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (99 samples, 61.88%)</title><rect x="21.2500%" y="181" width="61.8750%" height="15" fill="rgb(241,195,28)" fg:x="34" fg:w="99"/><text x="21.5000%" y="191.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>laminarmq::storage::impls::tokio::storage::std_random_read::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::std_random_read::StdRandomReadFileStorage&gt;::append_slice (1 samples, 0.62%)</title><rect x="82.5000%" y="165" width="0.6250%" height="15" fill="rgb(237,131,39)" fg:x="132" fg:w="1"/><text x="82.7500%" y="175.50"></text></g><g><title>malloc (1 samples, 0.62%)</title><rect x="82.5000%" y="149" width="0.6250%" height="15" fill="rgb(228,99,23)" fg:x="132" fg:w="1"/><text x="82.7500%" y="159.50"></text></g><g><title>segmented_log_r (137 samples, 85.62%)</title><rect x="0.0000%" y="565" width="85.6250%" height="15" fill="rgb(251,102,15)" fg:x="0" fg:w="137"/><text x="0.2500%" y="575.50">segmented_log_r</text></g><g><title>_start (137 samples, 85.62%)</title><rect x="0.0000%" y="549" width="85.6250%" height="15" fill="rgb(222,143,50)" fg:x="0" fg:w="137"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (137 samples, 85.62%)</title><rect x="0.0000%" y="533" width="85.6250%" height="15" fill="rgb(208,228,18)" fg:x="0" fg:w="137"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (137 samples, 85.62%)</title><rect x="0.0000%" y="517" width="85.6250%" height="15" fill="rgb(220,58,36)" fg:x="0" fg:w="137"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (137 samples, 85.62%)</title><rect x="0.0000%" y="501" width="85.6250%" height="15" fill="rgb(230,95,3)" fg:x="0" fg:w="137"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (137 samples, 85.62%)</title><rect x="0.0000%" y="485" width="85.6250%" height="15" fill="rgb(213,166,36)" fg:x="0" fg:w="137"/><text x="0.2500%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (137 samples, 85.62%)</title><rect x="0.0000%" y="469" width="85.6250%" height="15" fill="rgb(233,27,37)" fg:x="0" fg:w="137"/><text x="0.2500%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (137 samples, 85.62%)</title><rect x="0.0000%" y="453" width="85.6250%" height="15" fill="rgb(222,193,13)" fg:x="0" fg:w="137"/><text x="0.2500%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (137 samples, 85.62%)</title><rect x="0.0000%" y="437" width="85.6250%" height="15" fill="rgb(231,36,27)" fg:x="0" fg:w="137"/><text x="0.2500%" y="447.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (137 samples, 85.62%)</title><rect x="0.0000%" y="421" width="85.6250%" height="15" fill="rgb(222,214,0)" fg:x="0" fg:w="137"/><text x="0.2500%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (137 samples, 85.62%)</title><rect x="0.0000%" y="405" width="85.6250%" height="15" fill="rgb(239,179,19)" fg:x="0" fg:w="137"/><text x="0.2500%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (137 samples, 85.62%)</title><rect x="0.0000%" y="389" width="85.6250%" height="15" fill="rgb(225,1,41)" fg:x="0" fg:w="137"/><text x="0.2500%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (137 samples, 85.62%)</title><rect x="0.0000%" y="373" width="85.6250%" height="15" fill="rgb(238,97,16)" fg:x="0" fg:w="137"/><text x="0.2500%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (137 samples, 85.62%)</title><rect x="0.0000%" y="357" width="85.6250%" height="15" fill="rgb(248,192,50)" fg:x="0" fg:w="137"/><text x="0.2500%" y="367.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (137 samples, 85.62%)</title><rect x="0.0000%" y="341" width="85.6250%" height="15" fill="rgb(214,143,48)" fg:x="0" fg:w="137"/><text x="0.2500%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>segmented_log_read_stream::main (137 samples, 85.62%)</title><rect x="0.0000%" y="325" width="85.6250%" height="15" fill="rgb(221,132,50)" fg:x="0" fg:w="137"/><text x="0.2500%" y="335.50">segmented_log_read_stream::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (137 samples, 85.62%)</title><rect x="0.0000%" y="309" width="85.6250%" height="15" fill="rgb(212,78,9)" fg:x="0" fg:w="137"/><text x="0.2500%" y="319.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (137 samples, 85.62%)</title><rect x="0.0000%" y="293" width="85.6250%" height="15" fill="rgb(213,104,49)" fg:x="0" fg:w="137"/><text x="0.2500%" y="303.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (110 samples, 68.75%)</title><rect x="16.8750%" y="277" width="68.7500%" height="15" fill="rgb(226,16,13)" fg:x="27" fg:w="110"/><text x="17.1250%" y="287.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (110 samples, 68.75%)</title><rect x="16.8750%" y="261" width="68.7500%" height="15" fill="rgb(233,137,27)" fg:x="27" fg:w="110"/><text x="17.1250%" y="271.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (110 samples, 68.75%)</title><rect x="16.8750%" y="245" width="68.7500%" height="15" fill="rgb(223,117,15)" fg:x="27" fg:w="110"/><text x="17.1250%" y="255.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (110 samples, 68.75%)</title><rect x="16.8750%" y="229" width="68.7500%" height="15" fill="rgb(219,174,48)" fg:x="27" fg:w="110"/><text x="17.1250%" y="239.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (4 samples, 2.50%)</title><rect x="83.1250%" y="213" width="2.5000%" height="15" fill="rgb(230,8,36)" fg:x="133" fg:w="4"/><text x="83.3750%" y="223.50">to..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (3 samples, 1.88%)</title><rect x="83.7500%" y="197" width="1.8750%" height="15" fill="rgb(231,189,15)" fg:x="134" fg:w="3"/><text x="84.0000%" y="207.50">s..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (3 samples, 1.88%)</title><rect x="83.7500%" y="181" width="1.8750%" height="15" fill="rgb(246,202,8)" fg:x="134" fg:w="3"/><text x="84.0000%" y="191.50">s..</text></g><g><title>std::sys::unix::futex::futex_wait (3 samples, 1.88%)</title><rect x="83.7500%" y="165" width="1.8750%" height="15" fill="rgb(249,0,12)" fg:x="134" fg:w="3"/><text x="84.0000%" y="175.50">s..</text></g><g><title>syscall (2 samples, 1.25%)</title><rect x="84.3750%" y="149" width="1.2500%" height="15" fill="rgb(246,53,46)" fg:x="135" fg:w="2"/><text x="84.6250%" y="159.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (5 samples, 3.12%)</title><rect x="86.2500%" y="453" width="3.1250%" height="15" fill="rgb(244,109,35)" fg:x="138" fg:w="5"/><text x="86.5000%" y="463.50">std..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (5 samples, 3.12%)</title><rect x="86.2500%" y="437" width="3.1250%" height="15" fill="rgb(224,49,9)" fg:x="138" fg:w="5"/><text x="86.5000%" y="447.50">std..</text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 3.12%)</title><rect x="86.2500%" y="421" width="3.1250%" height="15" fill="rgb(231,110,41)" fg:x="138" fg:w="5"/><text x="86.5000%" y="431.50">std..</text></g><g><title>syscall (5 samples, 3.12%)</title><rect x="86.2500%" y="405" width="3.1250%" height="15" fill="rgb(230,100,50)" fg:x="138" fg:w="5"/><text x="86.5000%" y="415.50">sys..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.62%)</title><rect x="89.3750%" y="405" width="0.6250%" height="15" fill="rgb(225,102,36)" fg:x="143" fg:w="1"/><text x="89.6250%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.62%)</title><rect x="89.3750%" y="389" width="0.6250%" height="15" fill="rgb(254,3,5)" fg:x="143" fg:w="1"/><text x="89.6250%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (1 samples, 0.62%)</title><rect x="89.3750%" y="373" width="0.6250%" height="15" fill="rgb(252,74,39)" fg:x="143" fg:w="1"/><text x="89.6250%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::write (1 samples, 0.62%)</title><rect x="89.3750%" y="357" width="0.6250%" height="15" fill="rgb(242,23,6)" fg:x="143" fg:w="1"/><text x="89.6250%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.62%)</title><rect x="89.3750%" y="341" width="0.6250%" height="15" fill="rgb(229,153,37)" fg:x="143" fg:w="1"/><text x="89.6250%" y="351.50"></text></g><g><title>__write (1 samples, 0.62%)</title><rect x="89.3750%" y="325" width="0.6250%" height="15" fill="rgb(247,177,8)" fg:x="143" fg:w="1"/><text x="89.6250%" y="335.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 1.25%)</title><rect x="89.3750%" y="437" width="1.2500%" height="15" fill="rgb(245,183,2)" fg:x="143" fg:w="2"/><text x="89.6250%" y="447.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 1.25%)</title><rect x="89.3750%" y="421" width="1.2500%" height="15" fill="rgb(248,95,51)" fg:x="143" fg:w="2"/><text x="89.6250%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (1 samples, 0.62%)</title><rect x="90.0000%" y="405" width="0.6250%" height="15" fill="rgb(233,107,36)" fg:x="144" fg:w="1"/><text x="90.2500%" y="415.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 0.62%)</title><rect x="90.0000%" y="389" width="0.6250%" height="15" fill="rgb(248,90,24)" fg:x="144" fg:w="1"/><text x="90.2500%" y="399.50"></text></g><g><title>tokio::loom::std::rand::seed (1 samples, 0.62%)</title><rect x="90.0000%" y="373" width="0.6250%" height="15" fill="rgb(241,216,47)" fg:x="144" fg:w="1"/><text x="90.2500%" y="383.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::try_initialize (1 samples, 0.62%)</title><rect x="90.0000%" y="357" width="0.6250%" height="15" fill="rgb(225,51,16)" fg:x="144" fg:w="1"/><text x="90.2500%" y="367.50"></text></g><g><title>__libc_calloc (1 samples, 0.62%)</title><rect x="91.8750%" y="389" width="0.6250%" height="15" fill="rgb(226,32,7)" fg:x="147" fg:w="1"/><text x="92.1250%" y="399.50"></text></g><g><title>std::os::unix::fs::FileExt::read_exact_at (1 samples, 0.62%)</title><rect x="92.5000%" y="389" width="0.6250%" height="15" fill="rgb(251,23,31)" fg:x="148" fg:w="1"/><text x="92.7500%" y="399.50"></text></g><g><title>&lt;std::fs::File as std::os::unix::fs::FileExt&gt;::read_at (1 samples, 0.62%)</title><rect x="92.5000%" y="373" width="0.6250%" height="15" fill="rgb(234,62,9)" fg:x="148" fg:w="1"/><text x="92.7500%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::read_at (1 samples, 0.62%)</title><rect x="92.5000%" y="357" width="0.6250%" height="15" fill="rgb(221,150,42)" fg:x="148" fg:w="1"/><text x="92.7500%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_at (1 samples, 0.62%)</title><rect x="92.5000%" y="341" width="0.6250%" height="15" fill="rgb(229,124,16)" fg:x="148" fg:w="1"/><text x="92.7500%" y="351.50"></text></g><g><title>__pread64 (1 samples, 0.62%)</title><rect x="92.5000%" y="325" width="0.6250%" height="15" fill="rgb(208,221,24)" fg:x="148" fg:w="1"/><text x="92.7500%" y="335.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 3.75%)</title><rect x="91.2500%" y="405" width="3.7500%" height="15" fill="rgb(213,133,13)" fg:x="146" fg:w="6"/><text x="91.5000%" y="415.50">&lt;tok..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (3 samples, 1.88%)</title><rect x="93.1250%" y="389" width="1.8750%" height="15" fill="rgb(218,14,1)" fg:x="149" fg:w="3"/><text x="93.3750%" y="399.50">s..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (3 samples, 1.88%)</title><rect x="93.1250%" y="373" width="1.8750%" height="15" fill="rgb(205,208,2)" fg:x="149" fg:w="3"/><text x="93.3750%" y="383.50">s..</text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 1.88%)</title><rect x="93.1250%" y="357" width="1.8750%" height="15" fill="rgb(223,142,51)" fg:x="149" fg:w="3"/><text x="93.3750%" y="367.50">s..</text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 1.88%)</title><rect x="93.1250%" y="341" width="1.8750%" height="15" fill="rgb(247,95,41)" fg:x="149" fg:w="3"/><text x="93.3750%" y="351.50">s..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (3 samples, 1.88%)</title><rect x="93.1250%" y="325" width="1.8750%" height="15" fill="rgb(247,76,31)" fg:x="149" fg:w="3"/><text x="93.3750%" y="335.50">s..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (3 samples, 1.88%)</title><rect x="93.1250%" y="309" width="1.8750%" height="15" fill="rgb(227,9,15)" fg:x="149" fg:w="3"/><text x="93.3750%" y="319.50">s..</text></g><g><title>unlinkat (3 samples, 1.88%)</title><rect x="93.1250%" y="293" width="1.8750%" height="15" fill="rgb(211,201,42)" fg:x="149" fg:w="3"/><text x="93.3750%" y="303.50">u..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (8 samples, 5.00%)</title><rect x="90.6250%" y="437" width="5.0000%" height="15" fill="rgb(206,77,51)" fg:x="145" fg:w="8"/><text x="90.8750%" y="447.50">tokio:..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (7 samples, 4.38%)</title><rect x="91.2500%" y="421" width="4.3750%" height="15" fill="rgb(245,191,1)" fg:x="146" fg:w="7"/><text x="91.5000%" y="431.50">tokio..</text></g><g><title>tokio::runtime::coop::Budget::decrement (1 samples, 0.62%)</title><rect x="95.0000%" y="405" width="0.6250%" height="15" fill="rgb(222,75,17)" fg:x="152" fg:w="1"/><text x="95.2500%" y="415.50"></text></g><g><title>tokio::runtime::park::wake_by_ref (4 samples, 2.50%)</title><rect x="96.8750%" y="421" width="2.5000%" height="15" fill="rgb(222,51,17)" fg:x="155" fg:w="4"/><text x="97.1250%" y="431.50">to..</text></g><g><title>syscall (4 samples, 2.50%)</title><rect x="96.8750%" y="405" width="2.5000%" height="15" fill="rgb(240,190,27)" fg:x="155" fg:w="4"/><text x="97.1250%" y="415.50">sy..</text></g><g><title>all (160 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(214,203,49)" fg:x="0" fg:w="160"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (23 samples, 14.38%)</title><rect x="85.6250%" y="565" width="14.3750%" height="15" fill="rgb(249,57,15)" fg:x="137" fg:w="23"/><text x="85.8750%" y="575.50">tokio-runtime-w</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (23 samples, 14.38%)</title><rect x="85.6250%" y="549" width="14.3750%" height="15" fill="rgb(252,31,14)" fg:x="137" fg:w="23"/><text x="85.8750%" y="559.50">std::sys::unix::thread..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (23 samples, 14.38%)</title><rect x="85.6250%" y="533" width="14.3750%" height="15" fill="rgb(214,40,48)" fg:x="137" fg:w="23"/><text x="85.8750%" y="543.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (23 samples, 14.38%)</title><rect x="85.6250%" y="517" width="14.3750%" height="15" fill="rgb(253,93,8)" fg:x="137" fg:w="23"/><text x="85.8750%" y="527.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (23 samples, 14.38%)</title><rect x="85.6250%" y="501" width="14.3750%" height="15" fill="rgb(220,214,14)" fg:x="137" fg:w="23"/><text x="85.8750%" y="511.50">core::ops::function::F..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (23 samples, 14.38%)</title><rect x="85.6250%" y="485" width="14.3750%" height="15" fill="rgb(226,36,45)" fg:x="137" fg:w="23"/><text x="85.8750%" y="495.50">std::sys_common::backt..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (23 samples, 14.38%)</title><rect x="85.6250%" y="469" width="14.3750%" height="15" fill="rgb(243,225,35)" fg:x="137" fg:w="23"/><text x="85.8750%" y="479.50">tokio::runtime::blocki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (17 samples, 10.62%)</title><rect x="89.3750%" y="453" width="10.6250%" height="15" fill="rgb(248,68,11)" fg:x="143" fg:w="17"/><text x="89.6250%" y="463.50">tokio::runtime::..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (7 samples, 4.38%)</title><rect x="95.6250%" y="437" width="4.3750%" height="15" fill="rgb(206,75,31)" fg:x="153" fg:w="7"/><text x="95.8750%" y="447.50">tokio..</text></g><g><title>tokio::runtime::task::state::State::transition_to_complete (1 samples, 0.62%)</title><rect x="99.3750%" y="421" width="0.6250%" height="15" fill="rgb(212,190,49)" fg:x="159" fg:w="1"/><text x="99.6250%" y="431.50"></text></g></svg></svg>