<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="246"><g><title>&lt;&amp;mut T as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (2 samples, 0.81%)</title><rect x="0.4065%" y="117" width="0.8130%" height="15" fill="rgb(205,91,5)" fg:x="1" fg:w="2"/><text x="0.6565%" y="127.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (1 samples, 0.41%)</title><rect x="0.8130%" y="101" width="0.4065%" height="15" fill="rgb(221,28,49)" fg:x="2" fg:w="1"/><text x="1.0630%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.41%)</title><rect x="0.8130%" y="85" width="0.4065%" height="15" fill="rgb(239,55,2)" fg:x="2" fg:w="1"/><text x="1.0630%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.41%)</title><rect x="0.8130%" y="69" width="0.4065%" height="15" fill="rgb(228,57,27)" fg:x="2" fg:w="1"/><text x="1.0630%" y="79.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.41%)</title><rect x="0.8130%" y="53" width="0.4065%" height="15" fill="rgb(212,220,53)" fg:x="2" fg:w="1"/><text x="1.0630%" y="63.50"></text></g><g><title>syscall (1 samples, 0.41%)</title><rect x="0.8130%" y="37" width="0.4065%" height="15" fill="rgb(239,102,24)" fg:x="2" fg:w="1"/><text x="1.0630%" y="47.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.41%)</title><rect x="1.2195%" y="101" width="0.4065%" height="15" fill="rgb(231,196,5)" fg:x="3" fg:w="1"/><text x="1.4695%" y="111.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::read::{{closure}} (6 samples, 2.44%)</title><rect x="0.0000%" y="133" width="2.4390%" height="15" fill="rgb(224,173,46)" fg:x="0" fg:w="6"/><text x="0.2500%" y="143.50">&lt;l..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 1.22%)</title><rect x="1.2195%" y="117" width="1.2195%" height="15" fill="rgb(247,116,2)" fg:x="3" fg:w="3"/><text x="1.4695%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 0.81%)</title><rect x="1.6260%" y="101" width="0.8130%" height="15" fill="rgb(220,62,44)" fg:x="4" fg:w="2"/><text x="1.8760%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 0.81%)</title><rect x="1.6260%" y="85" width="0.8130%" height="15" fill="rgb(219,60,8)" fg:x="4" fg:w="2"/><text x="1.8760%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.81%)</title><rect x="1.6260%" y="69" width="0.8130%" height="15" fill="rgb(219,115,7)" fg:x="4" fg:w="2"/><text x="1.8760%" y="79.50"></text></g><g><title>syscall (2 samples, 0.81%)</title><rect x="1.6260%" y="53" width="0.8130%" height="15" fill="rgb(212,25,29)" fg:x="4" fg:w="2"/><text x="1.8760%" y="63.50"></text></g><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (7 samples, 2.85%)</title><rect x="0.0000%" y="181" width="2.8455%" height="15" fill="rgb(229,101,9)" fg:x="0" fg:w="7"/><text x="0.2500%" y="191.50">&lt;f..</text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (7 samples, 2.85%)</title><rect x="0.0000%" y="165" width="2.8455%" height="15" fill="rgb(243,115,50)" fg:x="0" fg:w="7"/><text x="0.2500%" y="175.50">&lt;a..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (7 samples, 2.85%)</title><rect x="0.0000%" y="149" width="2.8455%" height="15" fill="rgb(239,72,14)" fg:x="0" fg:w="7"/><text x="0.2500%" y="159.50">&lt;l..</text></g><g><title>__libc_free (1 samples, 0.41%)</title><rect x="2.4390%" y="133" width="0.4065%" height="15" fill="rgb(241,190,48)" fg:x="6" fg:w="1"/><text x="2.6890%" y="143.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (19 samples, 7.72%)</title><rect x="8.5366%" y="117" width="7.7236%" height="15" fill="rgb(221,51,7)" fg:x="21" fg:w="19"/><text x="8.7866%" y="127.50">crc32fast::..</text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (22 samples, 8.94%)</title><rect x="7.7236%" y="149" width="8.9431%" height="15" fill="rgb(250,197,36)" fg:x="19" fg:w="22"/><text x="7.9736%" y="159.50">&lt;futures_lite..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (21 samples, 8.54%)</title><rect x="8.1301%" y="133" width="8.5366%" height="15" fill="rgb(229,152,47)" fg:x="20" fg:w="21"/><text x="8.3801%" y="143.50">&lt;crc32fast::..</text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.41%)</title><rect x="16.2602%" y="117" width="0.4065%" height="15" fill="rgb(224,73,0)" fg:x="40" fg:w="1"/><text x="16.5102%" y="127.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (4 samples, 1.63%)</title><rect x="16.6667%" y="149" width="1.6260%" height="15" fill="rgb(251,86,25)" fg:x="41" fg:w="4"/><text x="16.9167%" y="159.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (3 samples, 1.22%)</title><rect x="19.5122%" y="133" width="1.2195%" height="15" fill="rgb(250,77,25)" fg:x="48" fg:w="3"/><text x="19.7622%" y="143.50"></text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.41%)</title><rect x="20.3252%" y="117" width="0.4065%" height="15" fill="rgb(215,172,37)" fg:x="50" fg:w="1"/><text x="20.5752%" y="127.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.41%)</title><rect x="20.3252%" y="101" width="0.4065%" height="15" fill="rgb(220,52,10)" fg:x="50" fg:w="1"/><text x="20.5752%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1 samples, 0.41%)</title><rect x="20.3252%" y="85" width="0.4065%" height="15" fill="rgb(212,208,4)" fg:x="50" fg:w="1"/><text x="20.5752%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.41%)</title><rect x="20.3252%" y="69" width="0.4065%" height="15" fill="rgb(216,140,17)" fg:x="50" fg:w="1"/><text x="20.5752%" y="79.50"></text></g><g><title>syscall (1 samples, 0.41%)</title><rect x="20.3252%" y="53" width="0.4065%" height="15" fill="rgb(233,206,53)" fg:x="50" fg:w="1"/><text x="20.5752%" y="63.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (6 samples, 2.44%)</title><rect x="20.7317%" y="133" width="2.4390%" height="15" fill="rgb(210,194,49)" fg:x="51" fg:w="6"/><text x="20.9817%" y="143.50">to..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (2 samples, 0.81%)</title><rect x="23.1707%" y="133" width="0.8130%" height="15" fill="rgb(234,11,32)" fg:x="57" fg:w="2"/><text x="23.4207%" y="143.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.81%)</title><rect x="27.2358%" y="117" width="0.8130%" height="15" fill="rgb(236,18,51)" fg:x="67" fg:w="2"/><text x="27.4858%" y="127.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (26 samples, 10.57%)</title><rect x="18.2927%" y="149" width="10.5691%" height="15" fill="rgb(231,18,44)" fg:x="45" fg:w="26"/><text x="18.5427%" y="159.50">&lt;laminarmq::sto..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (12 samples, 4.88%)</title><rect x="23.9837%" y="133" width="4.8780%" height="15" fill="rgb(217,112,11)" fg:x="59" fg:w="12"/><text x="24.2337%" y="143.50">tokio:..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (2 samples, 0.81%)</title><rect x="28.0488%" y="117" width="0.8130%" height="15" fill="rgb(208,120,51)" fg:x="69" fg:w="2"/><text x="28.2988%" y="127.50"></text></g><g><title>__rdl_alloc (1 samples, 0.41%)</title><rect x="28.8618%" y="133" width="0.4065%" height="15" fill="rgb(241,190,12)" fg:x="71" fg:w="1"/><text x="29.1118%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.41%)</title><rect x="28.8618%" y="117" width="0.4065%" height="15" fill="rgb(211,24,13)" fg:x="71" fg:w="1"/><text x="29.1118%" y="127.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (2 samples, 0.81%)</title><rect x="28.8618%" y="149" width="0.8130%" height="15" fill="rgb(254,15,24)" fg:x="71" fg:w="2"/><text x="29.1118%" y="159.50"></text></g><g><title>malloc (1 samples, 0.41%)</title><rect x="29.2683%" y="133" width="0.4065%" height="15" fill="rgb(211,103,53)" fg:x="72" fg:w="1"/><text x="29.5183%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.81%)</title><rect x="29.6748%" y="149" width="0.8130%" height="15" fill="rgb(210,201,28)" fg:x="73" fg:w="2"/><text x="29.9248%" y="159.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{{closure}} (77 samples, 31.30%)</title><rect x="0.0000%" y="197" width="31.3008%" height="15" fill="rgb(243,154,40)" fg:x="0" fg:w="77"/><text x="0.2500%" y="207.50">segmented_log_read_stream::time_tokio_std_seek_read..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (70 samples, 28.46%)</title><rect x="2.8455%" y="181" width="28.4553%" height="15" fill="rgb(233,32,4)" fg:x="7" fg:w="70"/><text x="3.0955%" y="191.50">&lt;laminarmq::storage::commit_log::segmented_log..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (70 samples, 28.46%)</title><rect x="2.8455%" y="165" width="28.4553%" height="15" fill="rgb(217,173,49)" fg:x="7" fg:w="70"/><text x="3.0955%" y="175.50">laminarmq::storage::Storage::append::{{closure..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}}&gt; (2 samples, 0.81%)</title><rect x="30.4878%" y="149" width="0.8130%" height="15" fill="rgb(208,6,29)" fg:x="75" fg:w="2"/><text x="30.7378%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (80 samples, 32.52%)</title><rect x="0.0000%" y="277" width="32.5203%" height="15" fill="rgb(249,90,43)" fg:x="0" fg:w="80"/><text x="0.2500%" y="287.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::Sp..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (80 samples, 32.52%)</title><rect x="0.0000%" y="261" width="32.5203%" height="15" fill="rgb(246,197,32)" fg:x="0" fg:w="80"/><text x="0.2500%" y="271.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::t..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (80 samples, 32.52%)</title><rect x="0.0000%" y="245" width="32.5203%" height="15" fill="rgb(206,13,14)" fg:x="0" fg:w="80"/><text x="0.2500%" y="255.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (80 samples, 32.52%)</title><rect x="0.0000%" y="229" width="32.5203%" height="15" fill="rgb(205,176,20)" fg:x="0" fg:w="80"/><text x="0.2500%" y="239.50">&lt;tokio::runtime::runtime::Runtime as criterion::async..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (80 samples, 32.52%)</title><rect x="0.0000%" y="213" width="32.5203%" height="15" fill="rgb(229,187,23)" fg:x="0" fg:w="80"/><text x="0.2500%" y="223.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (3 samples, 1.22%)</title><rect x="31.3008%" y="197" width="1.2195%" height="15" fill="rgb(222,106,10)" fg:x="77" fg:w="3"/><text x="31.5508%" y="207.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (3 samples, 1.22%)</title><rect x="31.3008%" y="181" width="1.2195%" height="15" fill="rgb(218,87,43)" fg:x="77" fg:w="3"/><text x="31.5508%" y="191.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (3 samples, 1.22%)</title><rect x="31.3008%" y="165" width="1.2195%" height="15" fill="rgb(251,218,22)" fg:x="77" fg:w="3"/><text x="31.5508%" y="175.50"></text></g><g><title>std::sys::unix::futex::futex_wait (3 samples, 1.22%)</title><rect x="31.3008%" y="149" width="1.2195%" height="15" fill="rgb(213,9,35)" fg:x="77" fg:w="3"/><text x="31.5508%" y="159.50"></text></g><g><title>syscall (3 samples, 1.22%)</title><rect x="31.3008%" y="133" width="1.2195%" height="15" fill="rgb(228,38,18)" fg:x="77" fg:w="3"/><text x="31.5508%" y="143.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (1 samples, 0.41%)</title><rect x="32.5203%" y="149" width="0.4065%" height="15" fill="rgb(240,169,18)" fg:x="80" fg:w="1"/><text x="32.7703%" y="159.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.41%)</title><rect x="32.5203%" y="133" width="0.4065%" height="15" fill="rgb(253,40,30)" fg:x="80" fg:w="1"/><text x="32.7703%" y="143.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (1 samples, 0.41%)</title><rect x="32.9268%" y="133" width="0.4065%" height="15" fill="rgb(247,13,4)" fg:x="81" fg:w="1"/><text x="33.1768%" y="143.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (1 samples, 0.41%)</title><rect x="32.9268%" y="117" width="0.4065%" height="15" fill="rgb(242,178,45)" fg:x="81" fg:w="1"/><text x="33.1768%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.41%)</title><rect x="32.9268%" y="101" width="0.4065%" height="15" fill="rgb(237,38,28)" fg:x="81" fg:w="1"/><text x="33.1768%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.41%)</title><rect x="32.9268%" y="85" width="0.4065%" height="15" fill="rgb(252,22,50)" fg:x="81" fg:w="1"/><text x="33.1768%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.41%)</title><rect x="32.9268%" y="69" width="0.4065%" height="15" fill="rgb(241,213,31)" fg:x="81" fg:w="1"/><text x="33.1768%" y="79.50"></text></g><g><title>syscall (1 samples, 0.41%)</title><rect x="32.9268%" y="53" width="0.4065%" height="15" fill="rgb(222,124,13)" fg:x="81" fg:w="1"/><text x="33.1768%" y="63.50"></text></g><g><title>&lt;futures_lite::stream::CountFuture&lt;S&gt; as core::future::future::Future&gt;::poll (4 samples, 1.63%)</title><rect x="32.5203%" y="197" width="1.6260%" height="15" fill="rgb(231,127,49)" fg:x="80" fg:w="4"/><text x="32.7703%" y="207.50"></text></g><g><title>&lt;async_stream::async_stream::AsyncStream&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 1.63%)</title><rect x="32.5203%" y="181" width="1.6260%" height="15" fill="rgb(242,104,46)" fg:x="80" fg:w="4"/><text x="32.7703%" y="191.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncIndexedRead&gt;::read::{{closure}} (4 samples, 1.63%)</title><rect x="32.5203%" y="165" width="1.6260%" height="15" fill="rgb(249,200,42)" fg:x="80" fg:w="4"/><text x="32.7703%" y="175.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::read::{{closure}} (3 samples, 1.22%)</title><rect x="32.9268%" y="149" width="1.2195%" height="15" fill="rgb(249,3,46)" fg:x="81" fg:w="3"/><text x="33.1768%" y="159.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.81%)</title><rect x="33.3333%" y="133" width="0.8130%" height="15" fill="rgb(234,81,2)" fg:x="82" fg:w="2"/><text x="33.5833%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 0.81%)</title><rect x="33.3333%" y="117" width="0.8130%" height="15" fill="rgb(220,213,6)" fg:x="82" fg:w="2"/><text x="33.5833%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 0.81%)</title><rect x="33.3333%" y="101" width="0.8130%" height="15" fill="rgb(224,2,37)" fg:x="82" fg:w="2"/><text x="33.5833%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.81%)</title><rect x="33.3333%" y="85" width="0.8130%" height="15" fill="rgb(238,170,33)" fg:x="82" fg:w="2"/><text x="33.5833%" y="95.50"></text></g><g><title>syscall (1 samples, 0.41%)</title><rect x="33.7398%" y="69" width="0.4065%" height="15" fill="rgb(249,112,15)" fg:x="83" fg:w="1"/><text x="33.9898%" y="79.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (32 samples, 13.01%)</title><rect x="42.2764%" y="133" width="13.0081%" height="15" fill="rgb(250,102,38)" fg:x="104" fg:w="32"/><text x="42.5264%" y="143.50">crc32fast::baseline:..</text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (38 samples, 15.45%)</title><rect x="40.2439%" y="165" width="15.4472%" height="15" fill="rgb(226,99,29)" fg:x="99" fg:w="38"/><text x="40.4939%" y="175.50">&lt;futures_lite::stream::N..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (35 samples, 14.23%)</title><rect x="41.4634%" y="149" width="14.2276%" height="15" fill="rgb(252,123,29)" fg:x="102" fg:w="35"/><text x="41.7134%" y="159.50">&lt;crc32fast::Hasher as ..</text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.41%)</title><rect x="55.2846%" y="133" width="0.4065%" height="15" fill="rgb(207,27,3)" fg:x="136" fg:w="1"/><text x="55.5346%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (2 samples, 0.81%)</title><rect x="55.6911%" y="165" width="0.8130%" height="15" fill="rgb(214,7,6)" fg:x="137" fg:w="2"/><text x="55.9411%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.41%)</title><rect x="60.5691%" y="85" width="0.4065%" height="15" fill="rgb(234,92,31)" fg:x="149" fg:w="1"/><text x="60.8191%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.41%)</title><rect x="60.5691%" y="69" width="0.4065%" height="15" fill="rgb(211,162,7)" fg:x="149" fg:w="1"/><text x="60.8191%" y="79.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.41%)</title><rect x="60.5691%" y="53" width="0.4065%" height="15" fill="rgb(210,164,26)" fg:x="149" fg:w="1"/><text x="60.8191%" y="63.50"></text></g><g><title>posix_memalign (1 samples, 0.41%)</title><rect x="60.5691%" y="37" width="0.4065%" height="15" fill="rgb(248,56,46)" fg:x="149" fg:w="1"/><text x="60.8191%" y="47.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (7 samples, 2.85%)</title><rect x="59.7561%" y="149" width="2.8455%" height="15" fill="rgb(231,143,31)" fg:x="147" fg:w="7"/><text x="60.0061%" y="159.50">&lt;t..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (5 samples, 2.03%)</title><rect x="60.5691%" y="133" width="2.0325%" height="15" fill="rgb(248,196,45)" fg:x="149" fg:w="5"/><text x="60.8191%" y="143.50">t..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (5 samples, 2.03%)</title><rect x="60.5691%" y="117" width="2.0325%" height="15" fill="rgb(253,43,44)" fg:x="149" fg:w="5"/><text x="60.8191%" y="127.50">&lt;..</text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (5 samples, 2.03%)</title><rect x="60.5691%" y="101" width="2.0325%" height="15" fill="rgb(214,186,24)" fg:x="149" fg:w="5"/><text x="60.8191%" y="111.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (4 samples, 1.63%)</title><rect x="60.9756%" y="85" width="1.6260%" height="15" fill="rgb(217,217,22)" fg:x="150" fg:w="4"/><text x="61.2256%" y="95.50"></text></g><g><title>syscall (4 samples, 1.63%)</title><rect x="60.9756%" y="69" width="1.6260%" height="15" fill="rgb(246,83,37)" fg:x="150" fg:w="4"/><text x="61.2256%" y="79.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (7 samples, 2.85%)</title><rect x="62.6016%" y="149" width="2.8455%" height="15" fill="rgb(206,215,51)" fg:x="154" fg:w="7"/><text x="62.8516%" y="159.50">to..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (6 samples, 2.44%)</title><rect x="65.4472%" y="149" width="2.4390%" height="15" fill="rgb(244,52,26)" fg:x="161" fg:w="6"/><text x="65.6972%" y="159.50">to..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (8 samples, 3.25%)</title><rect x="70.3252%" y="133" width="3.2520%" height="15" fill="rgb(217,112,40)" fg:x="173" fg:w="8"/><text x="70.5752%" y="143.50">&lt;to..</text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (46 samples, 18.70%)</title><rect x="56.5041%" y="165" width="18.6992%" height="15" fill="rgb(237,187,30)" fg:x="139" fg:w="46"/><text x="56.7541%" y="175.50">&lt;laminarmq::storage::impls::t..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (18 samples, 7.32%)</title><rect x="67.8862%" y="149" width="7.3171%" height="15" fill="rgb(227,40,7)" fg:x="167" fg:w="18"/><text x="68.1362%" y="159.50">tokio::syn..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (4 samples, 1.63%)</title><rect x="73.5772%" y="133" width="1.6260%" height="15" fill="rgb(245,206,28)" fg:x="181" fg:w="4"/><text x="73.8272%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice (1 samples, 0.41%)</title><rect x="75.2033%" y="165" width="0.4065%" height="15" fill="rgb(221,75,50)" fg:x="185" fg:w="1"/><text x="75.4533%" y="175.50"></text></g><g><title>malloc (1 samples, 0.41%)</title><rect x="75.2033%" y="149" width="0.4065%" height="15" fill="rgb(232,43,3)" fg:x="185" fg:w="1"/><text x="75.4533%" y="159.50"></text></g><g><title>__libc_free (5 samples, 2.03%)</title><rect x="75.6098%" y="165" width="2.0325%" height="15" fill="rgb(215,119,1)" fg:x="186" fg:w="5"/><text x="75.8598%" y="175.50">_..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (108 samples, 43.90%)</title><rect x="34.1463%" y="181" width="43.9024%" height="15" fill="rgb(233,204,47)" fg:x="84" fg:w="108"/><text x="34.3963%" y="191.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}}&gt; (1 samples, 0.41%)</title><rect x="77.6423%" y="165" width="0.4065%" height="15" fill="rgb(211,58,0)" fg:x="191" fg:w="1"/><text x="77.8923%" y="175.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt;::rotate_new_write_segment::{{closure}} (1 samples, 0.41%)</title><rect x="78.0488%" y="181" width="0.4065%" height="15" fill="rgb(207,54,10)" fg:x="192" fg:w="1"/><text x="78.2988%" y="191.50"></text></g><g><title>&lt;laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt; as laminarmq::storage::commit_log::segmented_log::segment::SegmentStorageProvider&lt;S,Idx&gt;&gt;::obtain::{{closure}} (1 samples, 0.41%)</title><rect x="78.0488%" y="165" width="0.4065%" height="15" fill="rgb(207,102,52)" fg:x="192" fg:w="1"/><text x="78.2988%" y="175.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorageProvider as laminarmq::storage::impls::common::PathAddressedStorageProvider&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage&gt;&gt;::obtain_storage::{{closure}} (1 samples, 0.41%)</title><rect x="78.0488%" y="149" width="0.4065%" height="15" fill="rgb(232,216,10)" fg:x="192" fg:w="1"/><text x="78.2988%" y="159.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.41%)</title><rect x="78.0488%" y="133" width="0.4065%" height="15" fill="rgb(225,183,52)" fg:x="192" fg:w="1"/><text x="78.2988%" y="143.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::try_read_output (1 samples, 0.41%)</title><rect x="78.0488%" y="117" width="0.4065%" height="15" fill="rgb(230,4,15)" fg:x="192" fg:w="1"/><text x="78.2988%" y="127.50"></text></g><g><title>segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{{closure}} (114 samples, 46.34%)</title><rect x="32.5203%" y="213" width="46.3415%" height="15" fill="rgb(241,229,18)" fg:x="80" fg:w="114"/><text x="32.7703%" y="223.50">segmented_log_read_stream::time_tokio_std_seek_read_segmented_log::{{closure..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (110 samples, 44.72%)</title><rect x="34.1463%" y="197" width="44.7154%" height="15" fill="rgb(206,171,40)" fg:x="84" fg:w="110"/><text x="34.3963%" y="207.50">&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S..</text></g><g><title>laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt;::append::{{closure}} (1 samples, 0.41%)</title><rect x="78.4553%" y="181" width="0.4065%" height="15" fill="rgb(252,61,40)" fg:x="193" fg:w="1"/><text x="78.7053%" y="191.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::std_seek_read::StdSeekReadFileStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (1 samples, 0.41%)</title><rect x="78.4553%" y="165" width="0.4065%" height="15" fill="rgb(230,53,18)" fg:x="193" fg:w="1"/><text x="78.7053%" y="175.50"></text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::{{closure}} (1 samples, 0.41%)</title><rect x="78.4553%" y="149" width="0.4065%" height="15" fill="rgb(230,184,4)" fg:x="193" fg:w="1"/><text x="78.7053%" y="159.50"></text></g><g><title>segmented_log_r (201 samples, 81.71%)</title><rect x="0.0000%" y="565" width="81.7073%" height="15" fill="rgb(228,205,24)" fg:x="0" fg:w="201"/><text x="0.2500%" y="575.50">segmented_log_r</text></g><g><title>_start (201 samples, 81.71%)</title><rect x="0.0000%" y="549" width="81.7073%" height="15" fill="rgb(233,219,28)" fg:x="0" fg:w="201"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (201 samples, 81.71%)</title><rect x="0.0000%" y="533" width="81.7073%" height="15" fill="rgb(208,46,7)" fg:x="0" fg:w="201"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (201 samples, 81.71%)</title><rect x="0.0000%" y="517" width="81.7073%" height="15" fill="rgb(226,31,30)" fg:x="0" fg:w="201"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (201 samples, 81.71%)</title><rect x="0.0000%" y="501" width="81.7073%" height="15" fill="rgb(236,19,21)" fg:x="0" fg:w="201"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (201 samples, 81.71%)</title><rect x="0.0000%" y="485" width="81.7073%" height="15" fill="rgb(247,51,11)" fg:x="0" fg:w="201"/><text x="0.2500%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (201 samples, 81.71%)</title><rect x="0.0000%" y="469" width="81.7073%" height="15" fill="rgb(245,0,19)" fg:x="0" fg:w="201"/><text x="0.2500%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (201 samples, 81.71%)</title><rect x="0.0000%" y="453" width="81.7073%" height="15" fill="rgb(207,203,22)" fg:x="0" fg:w="201"/><text x="0.2500%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (201 samples, 81.71%)</title><rect x="0.0000%" y="437" width="81.7073%" height="15" fill="rgb(215,202,12)" fg:x="0" fg:w="201"/><text x="0.2500%" y="447.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (201 samples, 81.71%)</title><rect x="0.0000%" y="421" width="81.7073%" height="15" fill="rgb(228,110,32)" fg:x="0" fg:w="201"/><text x="0.2500%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (201 samples, 81.71%)</title><rect x="0.0000%" y="405" width="81.7073%" height="15" fill="rgb(228,129,48)" fg:x="0" fg:w="201"/><text x="0.2500%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (201 samples, 81.71%)</title><rect x="0.0000%" y="389" width="81.7073%" height="15" fill="rgb(233,210,45)" fg:x="0" fg:w="201"/><text x="0.2500%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (201 samples, 81.71%)</title><rect x="0.0000%" y="373" width="81.7073%" height="15" fill="rgb(213,22,44)" fg:x="0" fg:w="201"/><text x="0.2500%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (201 samples, 81.71%)</title><rect x="0.0000%" y="357" width="81.7073%" height="15" fill="rgb(234,221,45)" fg:x="0" fg:w="201"/><text x="0.2500%" y="367.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (201 samples, 81.71%)</title><rect x="0.0000%" y="341" width="81.7073%" height="15" fill="rgb(230,189,41)" fg:x="0" fg:w="201"/><text x="0.2500%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>segmented_log_read_stream::main (201 samples, 81.71%)</title><rect x="0.0000%" y="325" width="81.7073%" height="15" fill="rgb(246,212,22)" fg:x="0" fg:w="201"/><text x="0.2500%" y="335.50">segmented_log_read_stream::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (201 samples, 81.71%)</title><rect x="0.0000%" y="309" width="81.7073%" height="15" fill="rgb(237,199,14)" fg:x="0" fg:w="201"/><text x="0.2500%" y="319.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (201 samples, 81.71%)</title><rect x="0.0000%" y="293" width="81.7073%" height="15" fill="rgb(239,160,0)" fg:x="0" fg:w="201"/><text x="0.2500%" y="303.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (121 samples, 49.19%)</title><rect x="32.5203%" y="277" width="49.1870%" height="15" fill="rgb(228,22,51)" fg:x="80" fg:w="121"/><text x="32.7703%" y="287.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (121 samples, 49.19%)</title><rect x="32.5203%" y="261" width="49.1870%" height="15" fill="rgb(227,149,42)" fg:x="80" fg:w="121"/><text x="32.7703%" y="271.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (121 samples, 49.19%)</title><rect x="32.5203%" y="245" width="49.1870%" height="15" fill="rgb(206,46,36)" fg:x="80" fg:w="121"/><text x="32.7703%" y="255.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::b..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (121 samples, 49.19%)</title><rect x="32.5203%" y="229" width="49.1870%" height="15" fill="rgb(210,175,51)" fg:x="80" fg:w="121"/><text x="32.7703%" y="239.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (7 samples, 2.85%)</title><rect x="78.8618%" y="213" width="2.8455%" height="15" fill="rgb(231,51,3)" fg:x="194" fg:w="7"/><text x="79.1118%" y="223.50">to..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (7 samples, 2.85%)</title><rect x="78.8618%" y="197" width="2.8455%" height="15" fill="rgb(252,94,54)" fg:x="194" fg:w="7"/><text x="79.1118%" y="207.50">st..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (7 samples, 2.85%)</title><rect x="78.8618%" y="181" width="2.8455%" height="15" fill="rgb(231,137,54)" fg:x="194" fg:w="7"/><text x="79.1118%" y="191.50">st..</text></g><g><title>std::sys::unix::futex::futex_wait (7 samples, 2.85%)</title><rect x="78.8618%" y="165" width="2.8455%" height="15" fill="rgb(217,207,50)" fg:x="194" fg:w="7"/><text x="79.1118%" y="175.50">st..</text></g><g><title>syscall (7 samples, 2.85%)</title><rect x="78.8618%" y="149" width="2.8455%" height="15" fill="rgb(251,175,18)" fg:x="194" fg:w="7"/><text x="79.1118%" y="159.50">sy..</text></g><g><title>std::sys::unix::futex::futex_wait (19 samples, 7.72%)</title><rect x="81.7073%" y="421" width="7.7236%" height="15" fill="rgb(242,203,47)" fg:x="201" fg:w="19"/><text x="81.9573%" y="431.50">std::sys::u..</text></g><g><title>syscall (19 samples, 7.72%)</title><rect x="81.7073%" y="405" width="7.7236%" height="15" fill="rgb(211,182,2)" fg:x="201" fg:w="19"/><text x="81.9573%" y="415.50">syscall</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (21 samples, 8.54%)</title><rect x="81.7073%" y="453" width="8.5366%" height="15" fill="rgb(233,117,8)" fg:x="201" fg:w="21"/><text x="81.9573%" y="463.50">std::sys::un..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (21 samples, 8.54%)</title><rect x="81.7073%" y="437" width="8.5366%" height="15" fill="rgb(212,31,42)" fg:x="201" fg:w="21"/><text x="81.9573%" y="447.50">std::sys::un..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (2 samples, 0.81%)</title><rect x="89.4309%" y="421" width="0.8130%" height="15" fill="rgb(234,61,2)" fg:x="220" fg:w="2"/><text x="89.6809%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.81%)</title><rect x="89.4309%" y="405" width="0.8130%" height="15" fill="rgb(220,106,23)" fg:x="220" fg:w="2"/><text x="89.6809%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.81%)</title><rect x="89.4309%" y="389" width="0.8130%" height="15" fill="rgb(231,62,35)" fg:x="220" fg:w="2"/><text x="89.6809%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (5 samples, 2.03%)</title><rect x="91.0569%" y="389" width="2.0325%" height="15" fill="rgb(219,162,47)" fg:x="224" fg:w="5"/><text x="91.3069%" y="399.50">&lt;..</text></g><g><title>std::sys::unix::fs::File::seek (5 samples, 2.03%)</title><rect x="91.0569%" y="373" width="2.0325%" height="15" fill="rgb(253,152,31)" fg:x="224" fg:w="5"/><text x="91.3069%" y="383.50">s..</text></g><g><title>llseek (5 samples, 2.03%)</title><rect x="91.0569%" y="357" width="2.0325%" height="15" fill="rgb(249,226,1)" fg:x="224" fg:w="5"/><text x="91.3069%" y="367.50">l..</text></g><g><title>std::io::Write::write_all (2 samples, 0.81%)</title><rect x="93.0894%" y="389" width="0.8130%" height="15" fill="rgb(224,205,38)" fg:x="229" fg:w="2"/><text x="93.3394%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (2 samples, 0.81%)</title><rect x="93.0894%" y="373" width="0.8130%" height="15" fill="rgb(243,214,39)" fg:x="229" fg:w="2"/><text x="93.3394%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::write (2 samples, 0.81%)</title><rect x="93.0894%" y="357" width="0.8130%" height="15" fill="rgb(217,54,32)" fg:x="229" fg:w="2"/><text x="93.3394%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 0.81%)</title><rect x="93.0894%" y="341" width="0.8130%" height="15" fill="rgb(221,196,32)" fg:x="229" fg:w="2"/><text x="93.3394%" y="351.50"></text></g><g><title>__write (2 samples, 0.81%)</title><rect x="93.0894%" y="325" width="0.8130%" height="15" fill="rgb(249,172,38)" fg:x="229" fg:w="2"/><text x="93.3394%" y="335.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (15 samples, 6.10%)</title><rect x="90.2439%" y="437" width="6.0976%" height="15" fill="rgb(246,134,12)" fg:x="222" fg:w="15"/><text x="90.4939%" y="447.50">&lt;core::p..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (14 samples, 5.69%)</title><rect x="90.6504%" y="421" width="5.6911%" height="15" fill="rgb(245,223,18)" fg:x="223" fg:w="14"/><text x="90.9004%" y="431.50">tokio::..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 5.69%)</title><rect x="90.6504%" y="405" width="5.6911%" height="15" fill="rgb(207,34,53)" fg:x="223" fg:w="14"/><text x="90.9004%" y="415.50">&lt;tokio:..</text></g><g><title>tokio::io::blocking::Buf::read_from (6 samples, 2.44%)</title><rect x="93.9024%" y="389" width="2.4390%" height="15" fill="rgb(245,2,27)" fg:x="231" fg:w="6"/><text x="94.1524%" y="399.50">to..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (6 samples, 2.44%)</title><rect x="93.9024%" y="373" width="2.4390%" height="15" fill="rgb(230,7,16)" fg:x="231" fg:w="6"/><text x="94.1524%" y="383.50">&lt;&amp;..</text></g><g><title>std::sys::unix::fs::File::read (6 samples, 2.44%)</title><rect x="93.9024%" y="357" width="2.4390%" height="15" fill="rgb(219,60,21)" fg:x="231" fg:w="6"/><text x="94.1524%" y="367.50">st..</text></g><g><title>std::sys::unix::fd::FileDesc::read (6 samples, 2.44%)</title><rect x="93.9024%" y="341" width="2.4390%" height="15" fill="rgb(207,184,47)" fg:x="231" fg:w="6"/><text x="94.1524%" y="351.50">st..</text></g><g><title>__read (6 samples, 2.44%)</title><rect x="93.9024%" y="325" width="2.4390%" height="15" fill="rgb(210,9,50)" fg:x="231" fg:w="6"/><text x="94.1524%" y="335.50">__..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 0.81%)</title><rect x="96.3415%" y="437" width="0.8130%" height="15" fill="rgb(239,148,50)" fg:x="237" fg:w="2"/><text x="96.5915%" y="447.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.81%)</title><rect x="96.3415%" y="421" width="0.8130%" height="15" fill="rgb(246,152,25)" fg:x="237" fg:w="2"/><text x="96.5915%" y="431.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.81%)</title><rect x="96.3415%" y="405" width="0.8130%" height="15" fill="rgb(217,151,39)" fg:x="237" fg:w="2"/><text x="96.5915%" y="415.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (2 samples, 0.81%)</title><rect x="96.3415%" y="389" width="0.8130%" height="15" fill="rgb(222,99,23)" fg:x="237" fg:w="2"/><text x="96.5915%" y="399.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (2 samples, 0.81%)</title><rect x="96.3415%" y="373" width="0.8130%" height="15" fill="rgb(229,116,34)" fg:x="237" fg:w="2"/><text x="96.5915%" y="383.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.81%)</title><rect x="96.3415%" y="357" width="0.8130%" height="15" fill="rgb(232,140,52)" fg:x="237" fg:w="2"/><text x="96.5915%" y="367.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.81%)</title><rect x="96.3415%" y="341" width="0.8130%" height="15" fill="rgb(247,17,20)" fg:x="237" fg:w="2"/><text x="96.5915%" y="351.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (2 samples, 0.81%)</title><rect x="96.3415%" y="325" width="0.8130%" height="15" fill="rgb(208,41,15)" fg:x="237" fg:w="2"/><text x="96.5915%" y="335.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (2 samples, 0.81%)</title><rect x="96.3415%" y="309" width="0.8130%" height="15" fill="rgb(253,96,13)" fg:x="237" fg:w="2"/><text x="96.5915%" y="319.50"></text></g><g><title>unlinkat (2 samples, 0.81%)</title><rect x="96.3415%" y="293" width="0.8130%" height="15" fill="rgb(217,111,40)" fg:x="237" fg:w="2"/><text x="96.5915%" y="303.50"></text></g><g><title>all (246 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(210,123,47)" fg:x="0" fg:w="246"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (45 samples, 18.29%)</title><rect x="81.7073%" y="565" width="18.2927%" height="15" fill="rgb(243,179,25)" fg:x="201" fg:w="45"/><text x="81.9573%" y="575.50">tokio-runtime-w</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (45 samples, 18.29%)</title><rect x="81.7073%" y="549" width="18.2927%" height="15" fill="rgb(210,186,30)" fg:x="201" fg:w="45"/><text x="81.9573%" y="559.50">std::sys::unix::thread::Threa..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (45 samples, 18.29%)</title><rect x="81.7073%" y="533" width="18.2927%" height="15" fill="rgb(253,195,16)" fg:x="201" fg:w="45"/><text x="81.9573%" y="543.50">&lt;alloc::boxed::Box&lt;F,A&gt; as co..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (45 samples, 18.29%)</title><rect x="81.7073%" y="517" width="18.2927%" height="15" fill="rgb(232,19,20)" fg:x="201" fg:w="45"/><text x="81.9573%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as co..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (45 samples, 18.29%)</title><rect x="81.7073%" y="501" width="18.2927%" height="15" fill="rgb(252,225,5)" fg:x="201" fg:w="45"/><text x="81.9573%" y="511.50">core::ops::function::FnOnce::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (45 samples, 18.29%)</title><rect x="81.7073%" y="485" width="18.2927%" height="15" fill="rgb(246,149,54)" fg:x="201" fg:w="45"/><text x="81.9573%" y="495.50">std::sys_common::backtrace::_..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (45 samples, 18.29%)</title><rect x="81.7073%" y="469" width="18.2927%" height="15" fill="rgb(229,177,43)" fg:x="201" fg:w="45"/><text x="81.9573%" y="479.50">tokio::runtime::blocking::poo..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (24 samples, 9.76%)</title><rect x="90.2439%" y="453" width="9.7561%" height="15" fill="rgb(208,191,31)" fg:x="222" fg:w="24"/><text x="90.4939%" y="463.50">tokio::runtime..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (7 samples, 2.85%)</title><rect x="97.1545%" y="437" width="2.8455%" height="15" fill="rgb(228,5,10)" fg:x="239" fg:w="7"/><text x="97.4045%" y="447.50">to..</text></g><g><title>tokio::runtime::park::wake_by_ref (7 samples, 2.85%)</title><rect x="97.1545%" y="421" width="2.8455%" height="15" fill="rgb(206,66,48)" fg:x="239" fg:w="7"/><text x="97.4045%" y="431.50">to..</text></g><g><title>syscall (7 samples, 2.85%)</title><rect x="97.1545%" y="405" width="2.8455%" height="15" fill="rgb(246,227,4)" fg:x="239" fg:w="7"/><text x="97.4045%" y="415.50">sy..</text></g></svg></svg>