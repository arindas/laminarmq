<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="128"><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (8 samples, 6.25%)</title><rect x="3.1250%" y="69" width="6.2500%" height="15" fill="rgb(228,188,52)" fg:x="4" fg:w="8"/><text x="3.3750%" y="79.50">&lt;futures..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (8 samples, 6.25%)</title><rect x="3.1250%" y="53" width="6.2500%" height="15" fill="rgb(227,65,45)" fg:x="4" fg:w="8"/><text x="3.3750%" y="63.50">&lt;crc32fa..</text></g><g><title>crc32fast::baseline::update_fast_16 (8 samples, 6.25%)</title><rect x="3.1250%" y="37" width="6.2500%" height="15" fill="rgb(213,7,10)" fg:x="4" fg:w="8"/><text x="3.3750%" y="47.50">crc32fas..</text></g><g><title>&lt;laminarmq::storage::impls::glommio::storage::buffered::BufferedStorage as laminarmq::storage::Storage&gt;::append_slice (1 samples, 0.78%)</title><rect x="9.3750%" y="69" width="0.7812%" height="15" fill="rgb(238,208,47)" fg:x="12" fg:w="1"/><text x="9.6250%" y="79.50"></text></g><g><title>glommio::executor::LocalExecutor::run_task_queues (16 samples, 12.50%)</title><rect x="0.0000%" y="149" width="12.5000%" height="15" fill="rgb(210,164,38)" fg:x="0" fg:w="16"/><text x="0.2500%" y="159.50">glommio::executor::..</text></g><g><title>glommio::task::raw::RawTask&lt;F,R,S&gt;::run (16 samples, 12.50%)</title><rect x="0.0000%" y="133" width="12.5000%" height="15" fill="rgb(231,221,10)" fg:x="0" fg:w="16"/><text x="0.2500%" y="143.50">glommio::task::raw:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (16 samples, 12.50%)</title><rect x="0.0000%" y="117" width="12.5000%" height="15" fill="rgb(228,170,40)" fg:x="0" fg:w="16"/><text x="0.2500%" y="127.50">&lt;core::pin::Pin&lt;P&gt; ..</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (16 samples, 12.50%)</title><rect x="0.0000%" y="101" width="12.5000%" height="15" fill="rgb(226,58,5)" fg:x="0" fg:w="16"/><text x="0.2500%" y="111.50">&lt;laminarmq::storage..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (16 samples, 12.50%)</title><rect x="0.0000%" y="85" width="12.5000%" height="15" fill="rgb(246,56,49)" fg:x="0" fg:w="16"/><text x="0.2500%" y="95.50">laminarmq::storage:..</text></g><g><title>&lt;laminarmq::storage::impls::glommio::storage::buffered::BufferedStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (3 samples, 2.34%)</title><rect x="10.1562%" y="69" width="2.3438%" height="15" fill="rgb(247,189,44)" fg:x="13" fg:w="3"/><text x="10.4062%" y="79.50">&lt;..</text></g><g><title>&lt;futures_lite::io::WriteAllFuture&lt;W&gt; as core::future::future::Future&gt;::poll (1 samples, 0.78%)</title><rect x="11.7188%" y="53" width="0.7812%" height="15" fill="rgb(226,124,20)" fg:x="15" fg:w="1"/><text x="11.9688%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.78%)</title><rect x="11.7188%" y="37" width="0.7812%" height="15" fill="rgb(236,132,31)" fg:x="15" fg:w="1"/><text x="11.9688%" y="47.50"></text></g><g><title>glommio::parking::Parker::park (5 samples, 3.91%)</title><rect x="12.5000%" y="149" width="3.9062%" height="15" fill="rgb(220,124,54)" fg:x="16" fg:w="5"/><text x="12.7500%" y="159.50">glom..</text></g><g><title>glommio::reactor::Reactor::react (5 samples, 3.91%)</title><rect x="12.5000%" y="133" width="3.9062%" height="15" fill="rgb(228,115,2)" fg:x="16" fg:w="5"/><text x="12.7500%" y="143.50">glom..</text></g><g><title>glommio::sys::uring::Reactor::wait (5 samples, 3.91%)</title><rect x="12.5000%" y="117" width="3.9062%" height="15" fill="rgb(220,222,38)" fg:x="16" fg:w="5"/><text x="12.7500%" y="127.50">glom..</text></g><g><title>glommio::sys::uring::Reactor::link_rings_and_sleep (5 samples, 3.91%)</title><rect x="12.5000%" y="101" width="3.9062%" height="15" fill="rgb(247,29,43)" fg:x="16" fg:w="5"/><text x="12.7500%" y="111.50">glom..</text></g><g><title>__io_uring_get_cqe (5 samples, 3.91%)</title><rect x="12.5000%" y="85" width="3.9062%" height="15" fill="rgb(240,0,15)" fg:x="16" fg:w="5"/><text x="12.7500%" y="95.50">__io..</text></g><g><title>_io_uring_get_cqe (5 samples, 3.91%)</title><rect x="12.5000%" y="69" width="3.9062%" height="15" fill="rgb(218,169,29)" fg:x="16" fg:w="5"/><text x="12.7500%" y="79.50">_io_..</text></g><g><title>__sys_io_uring_enter2 (5 samples, 3.91%)</title><rect x="12.5000%" y="53" width="3.9062%" height="15" fill="rgb(229,114,29)" fg:x="16" fg:w="5"/><text x="12.7500%" y="63.50">__sy..</text></g><g><title>syscall (5 samples, 3.91%)</title><rect x="12.5000%" y="37" width="3.9062%" height="15" fill="rgb(227,151,35)" fg:x="16" fg:w="5"/><text x="12.7500%" y="47.50">sysc..</text></g><g><title>glommio::parking::Parker::poll_io (1 samples, 0.78%)</title><rect x="16.4062%" y="149" width="0.7812%" height="15" fill="rgb(242,7,39)" fg:x="21" fg:w="1"/><text x="16.6562%" y="159.50"></text></g><g><title>glommio::sys::uring::Reactor::wait (1 samples, 0.78%)</title><rect x="16.4062%" y="133" width="0.7812%" height="15" fill="rgb(209,77,19)" fg:x="21" fg:w="1"/><text x="16.6562%" y="143.50"></text></g><g><title>glommio::sys::uring::UringCommon::consume_submission_queue (1 samples, 0.78%)</title><rect x="16.4062%" y="117" width="0.7812%" height="15" fill="rgb(244,106,36)" fg:x="21" fg:w="1"/><text x="16.6562%" y="127.50"></text></g><g><title>&lt;glommio::sys::uring::SleepableRing as glommio::sys::uring::UringCommon&gt;::submit_sqes (1 samples, 0.78%)</title><rect x="16.4062%" y="101" width="0.7812%" height="15" fill="rgb(236,204,21)" fg:x="21" fg:w="1"/><text x="16.6562%" y="111.50"></text></g><g><title>io_uring_submit (1 samples, 0.78%)</title><rect x="16.4062%" y="85" width="0.7812%" height="15" fill="rgb(247,170,7)" fg:x="21" fg:w="1"/><text x="16.6562%" y="95.50"></text></g><g><title>__sys_io_uring_enter2 (1 samples, 0.78%)</title><rect x="16.4062%" y="69" width="0.7812%" height="15" fill="rgb(211,46,42)" fg:x="21" fg:w="1"/><text x="16.6562%" y="79.50"></text></g><g><title>syscall (1 samples, 0.78%)</title><rect x="16.4062%" y="53" width="0.7812%" height="15" fill="rgb(205,89,10)" fg:x="21" fg:w="1"/><text x="16.6562%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 17.97%)</title><rect x="0.0000%" y="229" width="17.9688%" height="15" fill="rgb(250,71,31)" fg:x="0" fg:w="23"/><text x="0.2500%" y="239.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 17.97%)</title><rect x="0.0000%" y="213" width="17.9688%" height="15" fill="rgb(215,83,52)" fg:x="0" fg:w="23"/><text x="0.2500%" y="223.50">&lt;core::iter::adapters::map::..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (23 samples, 17.97%)</title><rect x="0.0000%" y="197" width="17.9688%" height="15" fill="rgb(220,91,24)" fg:x="0" fg:w="23"/><text x="0.2500%" y="207.50">criterion::bencher::AsyncBen..</text></g><g><title>glommio::executor::LocalExecutor::run (23 samples, 17.97%)</title><rect x="0.0000%" y="181" width="17.9688%" height="15" fill="rgb(242,33,48)" fg:x="0" fg:w="23"/><text x="0.2500%" y="191.50">glommio::executor::LocalExec..</text></g><g><title>scoped_tls::ScopedKey&lt;T&gt;::set (23 samples, 17.97%)</title><rect x="0.0000%" y="165" width="17.9688%" height="15" fill="rgb(206,226,23)" fg:x="0" fg:w="23"/><text x="0.2500%" y="175.50">scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>glommio::reactor::Reactor::spin_poll_io (1 samples, 0.78%)</title><rect x="17.1875%" y="149" width="0.7812%" height="15" fill="rgb(232,11,13)" fg:x="22" fg:w="1"/><text x="17.4375%" y="159.50"></text></g><g><title>glommio::sys::uring::Reactor::poll_io (1 samples, 0.78%)</title><rect x="17.1875%" y="133" width="0.7812%" height="15" fill="rgb(214,212,2)" fg:x="22" fg:w="1"/><text x="17.4375%" y="143.50"></text></g><g><title>glommio::sys::uring::UringCommon::poll (1 samples, 0.78%)</title><rect x="17.1875%" y="117" width="0.7812%" height="15" fill="rgb(225,60,14)" fg:x="22" fg:w="1"/><text x="17.4375%" y="127.50"></text></g><g><title>glommio::sys::uring::UringCommon::consume_submission_queue (1 samples, 0.78%)</title><rect x="17.1875%" y="101" width="0.7812%" height="15" fill="rgb(216,110,3)" fg:x="22" fg:w="1"/><text x="17.4375%" y="111.50"></text></g><g><title>&lt;glommio::sys::uring::SleepableRing as glommio::sys::uring::UringCommon&gt;::submit_one_event (1 samples, 0.78%)</title><rect x="17.1875%" y="85" width="0.7812%" height="15" fill="rgb(242,141,33)" fg:x="22" fg:w="1"/><text x="17.4375%" y="95.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.78%)</title><rect x="17.9688%" y="213" width="0.7812%" height="15" fill="rgb(234,209,32)" fg:x="23" fg:w="1"/><text x="18.2188%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;glommio::sys::uring::SleepableRing&gt;&gt; (1 samples, 0.78%)</title><rect x="17.9688%" y="197" width="0.7812%" height="15" fill="rgb(214,46,40)" fg:x="23" fg:w="1"/><text x="18.2188%" y="207.50"></text></g><g><title>io_uring_queue_exit (1 samples, 0.78%)</title><rect x="17.9688%" y="181" width="0.7812%" height="15" fill="rgb(251,40,35)" fg:x="23" fg:w="1"/><text x="18.2188%" y="191.50"></text></g><g><title>__munmap (1 samples, 0.78%)</title><rect x="17.9688%" y="165" width="0.7812%" height="15" fill="rgb(205,25,2)" fg:x="23" fg:w="1"/><text x="18.2188%" y="175.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (59 samples, 46.09%)</title><rect x="34.3750%" y="85" width="46.0938%" height="15" fill="rgb(224,215,25)" fg:x="44" fg:w="59"/><text x="34.6250%" y="95.50">&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (56 samples, 43.75%)</title><rect x="36.7188%" y="69" width="43.7500%" height="15" fill="rgb(226,47,41)" fg:x="47" fg:w="56"/><text x="36.9688%" y="79.50">&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write</text></g><g><title>crc32fast::baseline::update_fast_16 (52 samples, 40.62%)</title><rect x="39.8438%" y="53" width="40.6250%" height="15" fill="rgb(222,113,34)" fg:x="51" fg:w="52"/><text x="40.0938%" y="63.50">crc32fast::baseline::update_fast_16</text></g><g><title>&lt;laminarmq::storage::impls::glommio::storage::buffered::BufferedStorage as laminarmq::storage::Storage&gt;::append_slice (1 samples, 0.78%)</title><rect x="80.4688%" y="85" width="0.7812%" height="15" fill="rgb(221,61,37)" fg:x="103" fg:w="1"/><text x="80.7188%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (2 samples, 1.56%)</title><rect x="86.7188%" y="53" width="1.5625%" height="15" fill="rgb(221,42,31)" fg:x="111" fg:w="2"/><text x="86.9688%" y="63.50"></text></g><g><title>&lt;laminarmq::storage::impls::glommio::storage::buffered::BufferedStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (12 samples, 9.38%)</title><rect x="81.2500%" y="85" width="9.3750%" height="15" fill="rgb(245,73,25)" fg:x="104" fg:w="12"/><text x="81.5000%" y="95.50">&lt;laminarmq::s..</text></g><g><title>&lt;futures_lite::io::WriteAllFuture&lt;W&gt; as core::future::future::Future&gt;::poll (8 samples, 6.25%)</title><rect x="84.3750%" y="69" width="6.2500%" height="15" fill="rgb(254,98,5)" fg:x="108" fg:w="8"/><text x="84.6250%" y="79.50">&lt;futures..</text></g><g><title>futures_lite::io::BufWriter&lt;W&gt;::poll_flush_buf (3 samples, 2.34%)</title><rect x="88.2812%" y="53" width="2.3438%" height="15" fill="rgb(242,168,26)" fg:x="113" fg:w="3"/><text x="88.5312%" y="63.50">f..</text></g><g><title>&lt;glommio::io::buffered_file_stream::StreamWriter as futures_io::if_std::AsyncWrite&gt;::poll_write (3 samples, 2.34%)</title><rect x="88.2812%" y="37" width="2.3438%" height="15" fill="rgb(233,221,11)" fg:x="113" fg:w="3"/><text x="88.5312%" y="47.50">&lt;..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (93 samples, 72.66%)</title><rect x="18.7500%" y="101" width="72.6562%" height="15" fill="rgb(211,21,10)" fg:x="24" fg:w="93"/><text x="19.0000%" y="111.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>__libc_free (1 samples, 0.78%)</title><rect x="90.6250%" y="85" width="0.7812%" height="15" fill="rgb(232,181,21)" fg:x="116" fg:w="1"/><text x="90.8750%" y="95.50"></text></g><g><title>glommio::executor::LocalExecutor::run_task_queues (94 samples, 73.44%)</title><rect x="18.7500%" y="165" width="73.4375%" height="15" fill="rgb(244,107,7)" fg:x="24" fg:w="94"/><text x="19.0000%" y="175.50">glommio::executor::LocalExecutor::run_task_queues</text></g><g><title>glommio::task::raw::RawTask&lt;F,R,S&gt;::run (94 samples, 73.44%)</title><rect x="18.7500%" y="149" width="73.4375%" height="15" fill="rgb(216,162,38)" fg:x="24" fg:w="94"/><text x="19.0000%" y="159.50">glommio::task::raw::RawTask&lt;F,R,S&gt;::run</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (94 samples, 73.44%)</title><rect x="18.7500%" y="133" width="73.4375%" height="15" fill="rgb(205,137,3)" fg:x="24" fg:w="94"/><text x="19.0000%" y="143.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (94 samples, 73.44%)</title><rect x="18.7500%" y="117" width="73.4375%" height="15" fill="rgb(239,218,0)" fg:x="24" fg:w="94"/><text x="19.0000%" y="127.50">&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C..</text></g><g><title>laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt;::append::{{closure}} (1 samples, 0.78%)</title><rect x="91.4062%" y="101" width="0.7812%" height="15" fill="rgb(234,67,31)" fg:x="117" fg:w="1"/><text x="91.6562%" y="111.50"></text></g><g><title>glommio::sys::uring::Reactor::link_rings_and_sleep (2 samples, 1.56%)</title><rect x="92.1875%" y="117" width="1.5625%" height="15" fill="rgb(245,50,13)" fg:x="118" fg:w="2"/><text x="92.4375%" y="127.50"></text></g><g><title>__io_uring_get_cqe (2 samples, 1.56%)</title><rect x="92.1875%" y="101" width="1.5625%" height="15" fill="rgb(213,54,29)" fg:x="118" fg:w="2"/><text x="92.4375%" y="111.50"></text></g><g><title>_io_uring_get_cqe (2 samples, 1.56%)</title><rect x="92.1875%" y="85" width="1.5625%" height="15" fill="rgb(219,28,20)" fg:x="118" fg:w="2"/><text x="92.4375%" y="95.50"></text></g><g><title>__sys_io_uring_enter2 (2 samples, 1.56%)</title><rect x="92.1875%" y="69" width="1.5625%" height="15" fill="rgb(252,194,46)" fg:x="118" fg:w="2"/><text x="92.4375%" y="79.50"></text></g><g><title>syscall (2 samples, 1.56%)</title><rect x="92.1875%" y="53" width="1.5625%" height="15" fill="rgb(243,194,16)" fg:x="118" fg:w="2"/><text x="92.4375%" y="63.50"></text></g><g><title>&lt;glommio::sys::uring::SleepableRing as glommio::sys::uring::UringCommon&gt;::consume_one_event (1 samples, 0.78%)</title><rect x="93.7500%" y="101" width="0.7812%" height="15" fill="rgb(251,32,3)" fg:x="120" fg:w="1"/><text x="94.0000%" y="111.50"></text></g><g><title>glommio::sys::Wakers::wake_waiters (1 samples, 0.78%)</title><rect x="93.7500%" y="85" width="0.7812%" height="15" fill="rgb(222,43,18)" fg:x="120" fg:w="1"/><text x="94.0000%" y="95.50"></text></g><g><title>glommio::task::raw::RawTask&lt;F,R,S&gt;::wake (1 samples, 0.78%)</title><rect x="93.7500%" y="69" width="0.7812%" height="15" fill="rgb(235,127,48)" fg:x="120" fg:w="1"/><text x="94.0000%" y="79.50"></text></g><g><title>glommio::task::raw::RawTask&lt;F,R,S&gt;::schedule (1 samples, 0.78%)</title><rect x="93.7500%" y="53" width="0.7812%" height="15" fill="rgb(219,140,7)" fg:x="120" fg:w="1"/><text x="94.0000%" y="63.50"></text></g><g><title>glommio::executor::multitask::LocalExecutor::spawn::{{closure}} (1 samples, 0.78%)</title><rect x="93.7500%" y="37" width="0.7812%" height="15" fill="rgb(212,99,43)" fg:x="120" fg:w="1"/><text x="94.0000%" y="47.50"></text></g><g><title>glommio::parking::Parker::park (4 samples, 3.12%)</title><rect x="92.1875%" y="165" width="3.1250%" height="15" fill="rgb(235,62,25)" fg:x="118" fg:w="4"/><text x="92.4375%" y="175.50">glo..</text></g><g><title>glommio::reactor::Reactor::react (4 samples, 3.12%)</title><rect x="92.1875%" y="149" width="3.1250%" height="15" fill="rgb(236,81,4)" fg:x="118" fg:w="4"/><text x="92.4375%" y="159.50">glo..</text></g><g><title>glommio::sys::uring::Reactor::wait (4 samples, 3.12%)</title><rect x="92.1875%" y="133" width="3.1250%" height="15" fill="rgb(220,75,17)" fg:x="118" fg:w="4"/><text x="92.4375%" y="143.50">glo..</text></g><g><title>glommio::sys::uring::UringCommon::flush_cancellations (2 samples, 1.56%)</title><rect x="93.7500%" y="117" width="1.5625%" height="15" fill="rgb(248,22,29)" fg:x="120" fg:w="2"/><text x="94.0000%" y="127.50"></text></g><g><title>glommio::sys::uring::UringCommon::consume_cancellation_queue (1 samples, 0.78%)</title><rect x="94.5312%" y="101" width="0.7812%" height="15" fill="rgb(208,132,15)" fg:x="121" fg:w="1"/><text x="94.7812%" y="111.50"></text></g><g><title>&lt;glommio::sys::uring::PollRing as glommio::sys::uring::UringCommon&gt;::submit_one_event (1 samples, 0.78%)</title><rect x="94.5312%" y="85" width="0.7812%" height="15" fill="rgb(237,55,21)" fg:x="121" fg:w="1"/><text x="94.7812%" y="95.50"></text></g><g><title>&lt;glommio::sys::uring::SleepableRing as glommio::sys::uring::UringCommon&gt;::consume_one_event (2 samples, 1.56%)</title><rect x="95.3125%" y="133" width="1.5625%" height="15" fill="rgb(229,105,40)" fg:x="122" fg:w="2"/><text x="95.5625%" y="143.50"></text></g><g><title>rust_io_uring_cqe_seen (1 samples, 0.78%)</title><rect x="96.0938%" y="117" width="0.7812%" height="15" fill="rgb(253,45,14)" fg:x="123" fg:w="1"/><text x="96.3438%" y="127.50"></text></g><g><title>_start (125 samples, 97.66%)</title><rect x="0.0000%" y="501" width="97.6562%" height="15" fill="rgb(229,24,48)" fg:x="0" fg:w="125"/><text x="0.2500%" y="511.50">_start</text></g><g><title>__libc_start_main (125 samples, 97.66%)</title><rect x="0.0000%" y="485" width="97.6562%" height="15" fill="rgb(236,205,0)" fg:x="0" fg:w="125"/><text x="0.2500%" y="495.50">__libc_start_main</text></g><g><title>main (125 samples, 97.66%)</title><rect x="0.0000%" y="469" width="97.6562%" height="15" fill="rgb(244,125,14)" fg:x="0" fg:w="125"/><text x="0.2500%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (125 samples, 97.66%)</title><rect x="0.0000%" y="453" width="97.6562%" height="15" fill="rgb(217,98,37)" fg:x="0" fg:w="125"/><text x="0.2500%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (125 samples, 97.66%)</title><rect x="0.0000%" y="437" width="97.6562%" height="15" fill="rgb(236,78,13)" fg:x="0" fg:w="125"/><text x="0.2500%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (125 samples, 97.66%)</title><rect x="0.0000%" y="421" width="97.6562%" height="15" fill="rgb(224,183,18)" fg:x="0" fg:w="125"/><text x="0.2500%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (125 samples, 97.66%)</title><rect x="0.0000%" y="405" width="97.6562%" height="15" fill="rgb(241,201,33)" fg:x="0" fg:w="125"/><text x="0.2500%" y="415.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (125 samples, 97.66%)</title><rect x="0.0000%" y="389" width="97.6562%" height="15" fill="rgb(210,87,32)" fg:x="0" fg:w="125"/><text x="0.2500%" y="399.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (125 samples, 97.66%)</title><rect x="0.0000%" y="373" width="97.6562%" height="15" fill="rgb(205,74,12)" fg:x="0" fg:w="125"/><text x="0.2500%" y="383.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (125 samples, 97.66%)</title><rect x="0.0000%" y="357" width="97.6562%" height="15" fill="rgb(232,117,32)" fg:x="0" fg:w="125"/><text x="0.2500%" y="367.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (125 samples, 97.66%)</title><rect x="0.0000%" y="341" width="97.6562%" height="15" fill="rgb(228,98,37)" fg:x="0" fg:w="125"/><text x="0.2500%" y="351.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (125 samples, 97.66%)</title><rect x="0.0000%" y="325" width="97.6562%" height="15" fill="rgb(233,3,9)" fg:x="0" fg:w="125"/><text x="0.2500%" y="335.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (125 samples, 97.66%)</title><rect x="0.0000%" y="309" width="97.6562%" height="15" fill="rgb(216,39,5)" fg:x="0" fg:w="125"/><text x="0.2500%" y="319.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (125 samples, 97.66%)</title><rect x="0.0000%" y="293" width="97.6562%" height="15" fill="rgb(241,91,20)" fg:x="0" fg:w="125"/><text x="0.2500%" y="303.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>commit_log_append::main (125 samples, 97.66%)</title><rect x="0.0000%" y="277" width="97.6562%" height="15" fill="rgb(254,79,41)" fg:x="0" fg:w="125"/><text x="0.2500%" y="287.50">commit_log_append::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (125 samples, 97.66%)</title><rect x="0.0000%" y="261" width="97.6562%" height="15" fill="rgb(241,95,12)" fg:x="0" fg:w="125"/><text x="0.2500%" y="271.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (125 samples, 97.66%)</title><rect x="0.0000%" y="245" width="97.6562%" height="15" fill="rgb(241,216,39)" fg:x="0" fg:w="125"/><text x="0.2500%" y="255.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (102 samples, 79.69%)</title><rect x="17.9688%" y="229" width="79.6875%" height="15" fill="rgb(219,163,20)" fg:x="23" fg:w="102"/><text x="18.2188%" y="239.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (101 samples, 78.91%)</title><rect x="18.7500%" y="213" width="78.9062%" height="15" fill="rgb(249,203,18)" fg:x="24" fg:w="101"/><text x="19.0000%" y="223.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>glommio::executor::LocalExecutor::run (101 samples, 78.91%)</title><rect x="18.7500%" y="197" width="78.9062%" height="15" fill="rgb(210,67,18)" fg:x="24" fg:w="101"/><text x="19.0000%" y="207.50">glommio::executor::LocalExecutor::run</text></g><g><title>scoped_tls::ScopedKey&lt;T&gt;::set (101 samples, 78.91%)</title><rect x="18.7500%" y="181" width="78.9062%" height="15" fill="rgb(244,71,11)" fg:x="24" fg:w="101"/><text x="19.0000%" y="191.50">scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>glommio::parking::Parker::poll_io (3 samples, 2.34%)</title><rect x="95.3125%" y="165" width="2.3438%" height="15" fill="rgb(221,66,51)" fg:x="122" fg:w="3"/><text x="95.5625%" y="175.50">g..</text></g><g><title>glommio::sys::uring::Reactor::wait (3 samples, 2.34%)</title><rect x="95.3125%" y="149" width="2.3438%" height="15" fill="rgb(228,64,15)" fg:x="122" fg:w="3"/><text x="95.5625%" y="159.50">g..</text></g><g><title>glommio::sys::uring::UringCommon::consume_submission_queue (1 samples, 0.78%)</title><rect x="96.8750%" y="133" width="0.7812%" height="15" fill="rgb(242,145,27)" fg:x="124" fg:w="1"/><text x="97.1250%" y="143.50"></text></g><g><title>&lt;glommio::sys::uring::SleepableRing as glommio::sys::uring::UringCommon&gt;::submit_sqes (1 samples, 0.78%)</title><rect x="96.8750%" y="117" width="0.7812%" height="15" fill="rgb(254,97,8)" fg:x="124" fg:w="1"/><text x="97.1250%" y="127.50"></text></g><g><title>io_uring_submit (1 samples, 0.78%)</title><rect x="96.8750%" y="101" width="0.7812%" height="15" fill="rgb(223,87,50)" fg:x="124" fg:w="1"/><text x="97.1250%" y="111.50"></text></g><g><title>__sys_io_uring_enter2 (1 samples, 0.78%)</title><rect x="96.8750%" y="85" width="0.7812%" height="15" fill="rgb(211,145,19)" fg:x="124" fg:w="1"/><text x="97.1250%" y="95.50"></text></g><g><title>syscall (1 samples, 0.78%)</title><rect x="96.8750%" y="69" width="0.7812%" height="15" fill="rgb(254,1,40)" fg:x="124" fg:w="1"/><text x="97.1250%" y="79.50"></text></g><g><title>all (128 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(230,71,40)" fg:x="0" fg:w="128"/><text x="0.2500%" y="543.50"></text></g><g><title>commit_log_appe (128 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(239,5,41)" fg:x="0" fg:w="128"/><text x="0.2500%" y="527.50">commit_log_appe</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3 samples, 2.34%)</title><rect x="97.6562%" y="501" width="2.3438%" height="15" fill="rgb(247,44,8)" fg:x="125" fg:w="3"/><text x="97.9062%" y="511.50">s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 2.34%)</title><rect x="97.6562%" y="485" width="2.3438%" height="15" fill="rgb(245,34,40)" fg:x="125" fg:w="3"/><text x="97.9062%" y="495.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 2.34%)</title><rect x="97.6562%" y="469" width="2.3438%" height="15" fill="rgb(205,97,9)" fg:x="125" fg:w="3"/><text x="97.9062%" y="479.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 2.34%)</title><rect x="97.6562%" y="453" width="2.3438%" height="15" fill="rgb(240,188,35)" fg:x="125" fg:w="3"/><text x="97.9062%" y="463.50">c..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 2.34%)</title><rect x="97.6562%" y="437" width="2.3438%" height="15" fill="rgb(237,129,1)" fg:x="125" fg:w="3"/><text x="97.9062%" y="447.50">s..</text></g><g><title>glommio::sys::blocking::BlockingThreadOp::execute (3 samples, 2.34%)</title><rect x="97.6562%" y="421" width="2.3438%" height="15" fill="rgb(207,151,0)" fg:x="125" fg:w="3"/><text x="97.9062%" y="431.50">g..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 2.34%)</title><rect x="97.6562%" y="405" width="2.3438%" height="15" fill="rgb(219,24,23)" fg:x="125" fg:w="3"/><text x="97.9062%" y="415.50">c..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (3 samples, 2.34%)</title><rect x="97.6562%" y="389" width="2.3438%" height="15" fill="rgb(244,228,46)" fg:x="125" fg:w="3"/><text x="97.9062%" y="399.50">s..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (3 samples, 2.34%)</title><rect x="97.6562%" y="373" width="2.3438%" height="15" fill="rgb(210,144,24)" fg:x="125" fg:w="3"/><text x="97.9062%" y="383.50">s..</text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 2.34%)</title><rect x="97.6562%" y="357" width="2.3438%" height="15" fill="rgb(254,154,42)" fg:x="125" fg:w="3"/><text x="97.9062%" y="367.50">s..</text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 2.34%)</title><rect x="97.6562%" y="341" width="2.3438%" height="15" fill="rgb(221,31,44)" fg:x="125" fg:w="3"/><text x="97.9062%" y="351.50">s..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (3 samples, 2.34%)</title><rect x="97.6562%" y="325" width="2.3438%" height="15" fill="rgb(207,125,41)" fg:x="125" fg:w="3"/><text x="97.9062%" y="335.50">s..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (3 samples, 2.34%)</title><rect x="97.6562%" y="309" width="2.3438%" height="15" fill="rgb(240,66,33)" fg:x="125" fg:w="3"/><text x="97.9062%" y="319.50">s..</text></g><g><title>unlinkat (3 samples, 2.34%)</title><rect x="97.6562%" y="293" width="2.3438%" height="15" fill="rgb(229,40,7)" fg:x="125" fg:w="3"/><text x="97.9062%" y="303.50">u..</text></g></svg></svg>