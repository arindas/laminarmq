<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="124"><g><title>core::ptr::drop_in_place&lt;criterion::bencher::AsyncBencher&lt;tokio::runtime::runtime::Runtime&gt;&gt; (1 samples, 0.81%)</title><rect x="0.8065%" y="277" width="0.8065%" height="15" fill="rgb(231,77,4)" fg:x="1" fg:w="1"/><text x="1.0565%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::shutdown (1 samples, 0.81%)</title><rect x="0.8065%" y="261" width="0.8065%" height="15" fill="rgb(209,63,21)" fg:x="1" fg:w="1"/><text x="1.0565%" y="271.50"></text></g><g><title>syscall (1 samples, 0.81%)</title><rect x="0.8065%" y="245" width="0.8065%" height="15" fill="rgb(226,22,11)" fg:x="1" fg:w="1"/><text x="1.0565%" y="255.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (2 samples, 1.61%)</title><rect x="1.6129%" y="245" width="1.6129%" height="15" fill="rgb(216,82,30)" fg:x="2" fg:w="2"/><text x="1.8629%" y="255.50"></text></g><g><title>std::sys::unix::thread::Thread::join (2 samples, 1.61%)</title><rect x="1.6129%" y="229" width="1.6129%" height="15" fill="rgb(246,227,38)" fg:x="2" fg:w="2"/><text x="1.8629%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (4 samples, 3.23%)</title><rect x="1.6129%" y="277" width="3.2258%" height="15" fill="rgb(251,203,53)" fg:x="2" fg:w="4"/><text x="1.8629%" y="287.50">cor..</text></g><g><title>tokio::runtime::blocking::pool::BlockingPool::shutdown (4 samples, 3.23%)</title><rect x="1.6129%" y="261" width="3.2258%" height="15" fill="rgb(254,101,1)" fg:x="2" fg:w="4"/><text x="1.8629%" y="271.50">tok..</text></g><g><title>tokio::runtime::blocking::shutdown::Receiver::wait (2 samples, 1.61%)</title><rect x="3.2258%" y="245" width="1.6129%" height="15" fill="rgb(241,180,5)" fg:x="4" fg:w="2"/><text x="3.4758%" y="255.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (2 samples, 1.61%)</title><rect x="3.2258%" y="229" width="1.6129%" height="15" fill="rgb(218,168,4)" fg:x="4" fg:w="2"/><text x="3.4758%" y="239.50"></text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 1.61%)</title><rect x="3.2258%" y="213" width="1.6129%" height="15" fill="rgb(224,223,32)" fg:x="4" fg:w="2"/><text x="3.4758%" y="223.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (2 samples, 1.61%)</title><rect x="3.2258%" y="197" width="1.6129%" height="15" fill="rgb(236,106,22)" fg:x="4" fg:w="2"/><text x="3.4758%" y="207.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (2 samples, 1.61%)</title><rect x="3.2258%" y="181" width="1.6129%" height="15" fill="rgb(206,121,5)" fg:x="4" fg:w="2"/><text x="3.4758%" y="191.50"></text></g><g><title>std::sys::unix::futex::futex_wait (2 samples, 1.61%)</title><rect x="3.2258%" y="165" width="1.6129%" height="15" fill="rgb(233,87,28)" fg:x="4" fg:w="2"/><text x="3.4758%" y="175.50"></text></g><g><title>syscall (2 samples, 1.61%)</title><rect x="3.2258%" y="149" width="1.6129%" height="15" fill="rgb(236,137,17)" fg:x="4" fg:w="2"/><text x="3.4758%" y="159.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (1 samples, 0.81%)</title><rect x="6.4516%" y="213" width="0.8065%" height="15" fill="rgb(209,183,38)" fg:x="8" fg:w="1"/><text x="6.7016%" y="223.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (1 samples, 0.81%)</title><rect x="6.4516%" y="197" width="0.8065%" height="15" fill="rgb(206,162,44)" fg:x="8" fg:w="1"/><text x="6.7016%" y="207.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt; as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (1 samples, 0.81%)</title><rect x="6.4516%" y="181" width="0.8065%" height="15" fill="rgb(237,70,39)" fg:x="8" fg:w="1"/><text x="6.7016%" y="191.50"></text></g><g><title>&lt;laminarmq::storage::impls::tokio::storage::StdFileStorage as laminarmq::storage::AsyncConsume&gt;::close (1 samples, 0.81%)</title><rect x="6.4516%" y="165" width="0.8065%" height="15" fill="rgb(212,176,5)" fg:x="8" fg:w="1"/><text x="6.7016%" y="175.50"></text></g><g><title>&lt;crc32fast::Hasher as core::default::Default&gt;::default (1 samples, 0.81%)</title><rect x="9.6774%" y="197" width="0.8065%" height="15" fill="rgb(232,95,16)" fg:x="12" fg:w="1"/><text x="9.9274%" y="207.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.81%)</title><rect x="10.4839%" y="197" width="0.8065%" height="15" fill="rgb(219,115,35)" fg:x="13" fg:w="1"/><text x="10.7339%" y="207.50"></text></g><g><title>malloc (1 samples, 0.81%)</title><rect x="10.4839%" y="181" width="0.8065%" height="15" fill="rgb(251,67,27)" fg:x="13" fg:w="1"/><text x="10.7339%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;laminarmq::storage::commit_log::segmented_log::segment::SegmentError&lt;laminarmq::storage::impls::tokio::storage::StdFileStorageError,alloc::boxed::Box&lt;bincode::error::ErrorKind&gt;&gt;&gt; (1 samples, 0.81%)</title><rect x="11.2903%" y="197" width="0.8065%" height="15" fill="rgb(222,95,40)" fg:x="14" fg:w="1"/><text x="11.5403%" y="207.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (22 samples, 17.74%)</title><rect x="25.0000%" y="181" width="17.7419%" height="15" fill="rgb(250,35,16)" fg:x="31" fg:w="22"/><text x="25.2500%" y="191.50">&lt;futures_lite::stream::NextF..</text></g><g><title>crc32fast::Hasher::update (21 samples, 16.94%)</title><rect x="25.8065%" y="165" width="16.9355%" height="15" fill="rgb(224,86,44)" fg:x="32" fg:w="21"/><text x="26.0565%" y="175.50">crc32fast::Hasher::update</text></g><g><title>crc32fast::baseline::update_fast_16 (20 samples, 16.13%)</title><rect x="26.6129%" y="149" width="16.1290%" height="15" fill="rgb(237,53,53)" fg:x="33" fg:w="20"/><text x="26.8629%" y="159.50">crc32fast::baseline::upda..</text></g><g><title>__libc_free (7 samples, 5.65%)</title><rect x="42.7419%" y="181" width="5.6452%" height="15" fill="rgb(208,171,33)" fg:x="53" fg:w="7"/><text x="42.9919%" y="191.50">__libc_..</text></g><g><title>laminarmq::storage::impls::tokio::storage::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::StdFileStorage&gt;::append_slice::{{closure}} (8 samples, 6.45%)</title><rect x="48.3871%" y="181" width="6.4516%" height="15" fill="rgb(222,64,27)" fg:x="60" fg:w="8"/><text x="48.6371%" y="191.50">laminarm..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (4 samples, 3.23%)</title><rect x="51.6129%" y="165" width="3.2258%" height="15" fill="rgb(221,121,35)" fg:x="64" fg:w="4"/><text x="51.8629%" y="175.50">&lt;to..</text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.81%)</title><rect x="54.0323%" y="149" width="0.8065%" height="15" fill="rgb(228,137,42)" fg:x="67" fg:w="1"/><text x="54.2823%" y="159.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.81%)</title><rect x="54.0323%" y="133" width="0.8065%" height="15" fill="rgb(227,54,21)" fg:x="67" fg:w="1"/><text x="54.2823%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1 samples, 0.81%)</title><rect x="54.0323%" y="117" width="0.8065%" height="15" fill="rgb(240,168,33)" fg:x="67" fg:w="1"/><text x="54.2823%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.81%)</title><rect x="54.0323%" y="101" width="0.8065%" height="15" fill="rgb(243,159,6)" fg:x="67" fg:w="1"/><text x="54.2823%" y="111.50"></text></g><g><title>syscall (1 samples, 0.81%)</title><rect x="54.0323%" y="85" width="0.8065%" height="15" fill="rgb(205,211,41)" fg:x="67" fg:w="1"/><text x="54.2823%" y="95.50"></text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (58 samples, 46.77%)</title><rect x="12.0968%" y="197" width="46.7742%" height="15" fill="rgb(253,30,1)" fg:x="15" fg:w="58"/><text x="12.3468%" y="207.50">laminarmq::storage::Storage::append::{{closure}}</text></g><g><title>laminarmq::storage::impls::tokio::storage::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::StdFileStorage&gt;::append_slice (5 samples, 4.03%)</title><rect x="54.8387%" y="181" width="4.0323%" height="15" fill="rgb(226,80,18)" fg:x="68" fg:w="5"/><text x="55.0887%" y="191.50">lami..</text></g><g><title>malloc (5 samples, 4.03%)</title><rect x="54.8387%" y="165" width="4.0323%" height="15" fill="rgb(253,156,46)" fg:x="68" fg:w="5"/><text x="55.0887%" y="175.50">mall..</text></g><g><title>__libc_free (1 samples, 0.81%)</title><rect x="58.8710%" y="181" width="0.8065%" height="15" fill="rgb(248,87,27)" fg:x="73" fg:w="1"/><text x="59.1210%" y="191.50"></text></g><g><title>laminarmq::storage::impls::tokio::storage::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::StdFileStorage&gt;::append_slice (1 samples, 0.81%)</title><rect x="59.6774%" y="181" width="0.8065%" height="15" fill="rgb(227,122,2)" fg:x="74" fg:w="1"/><text x="59.9274%" y="191.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt;::append::{{closure}} (8 samples, 6.45%)</title><rect x="58.8710%" y="197" width="6.4516%" height="15" fill="rgb(229,94,39)" fg:x="73" fg:w="8"/><text x="59.1210%" y="207.50">laminarm..</text></g><g><title>laminarmq::storage::impls::tokio::storage::unix::&lt;impl laminarmq::storage::Storage for laminarmq::storage::impls::tokio::storage::StdFileStorage&gt;::append_slice::{{closure}} (6 samples, 4.84%)</title><rect x="60.4839%" y="181" width="4.8387%" height="15" fill="rgb(225,173,31)" fg:x="75" fg:w="6"/><text x="60.7339%" y="191.50">lamina..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (1 samples, 0.81%)</title><rect x="64.5161%" y="165" width="0.8065%" height="15" fill="rgb(239,176,30)" fg:x="80" fg:w="1"/><text x="64.7661%" y="175.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (75 samples, 60.48%)</title><rect x="7.2581%" y="213" width="60.4839%" height="15" fill="rgb(212,104,21)" fg:x="9" fg:w="75"/><text x="7.5081%" y="223.50">&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Siz..</text></g><g><title>malloc (3 samples, 2.42%)</title><rect x="65.3226%" y="197" width="2.4194%" height="15" fill="rgb(240,209,40)" fg:x="81" fg:w="3"/><text x="65.5726%" y="207.50">ma..</text></g><g><title>__libc_free (2 samples, 1.61%)</title><rect x="67.7419%" y="213" width="1.6129%" height="15" fill="rgb(234,195,5)" fg:x="84" fg:w="2"/><text x="67.9919%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.81%)</title><rect x="69.3548%" y="181" width="0.8065%" height="15" fill="rgb(238,213,1)" fg:x="86" fg:w="1"/><text x="69.6048%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.81%)</title><rect x="69.3548%" y="165" width="0.8065%" height="15" fill="rgb(235,182,54)" fg:x="86" fg:w="1"/><text x="69.6048%" y="175.50"></text></g><g><title>&lt;std::sys::unix::fs::Dir as core::ops::drop::Drop&gt;::drop (1 samples, 0.81%)</title><rect x="69.3548%" y="149" width="0.8065%" height="15" fill="rgb(229,50,46)" fg:x="86" fg:w="1"/><text x="69.6048%" y="159.50"></text></g><g><title>__close_nocancel (1 samples, 0.81%)</title><rect x="69.3548%" y="133" width="0.8065%" height="15" fill="rgb(219,145,13)" fg:x="86" fg:w="1"/><text x="69.6048%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt; as laminarmq::storage::commit_log::segmented_log::segment::SegmentStorageProvider&lt;S,Idx&gt;&gt;::obtain_base_indices_of_stored_segments::{{closure}} (2 samples, 1.61%)</title><rect x="69.3548%" y="197" width="1.6129%" height="15" fill="rgb(220,226,10)" fg:x="86" fg:w="2"/><text x="69.6048%" y="207.50"></text></g><g><title>std::sys::unix::fs::readdir (1 samples, 0.81%)</title><rect x="70.1613%" y="181" width="0.8065%" height="15" fill="rgb(248,47,30)" fg:x="87" fg:w="1"/><text x="70.4113%" y="191.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.81%)</title><rect x="70.1613%" y="165" width="0.8065%" height="15" fill="rgb(231,209,44)" fg:x="87" fg:w="1"/><text x="70.4113%" y="175.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.81%)</title><rect x="70.1613%" y="149" width="0.8065%" height="15" fill="rgb(209,80,30)" fg:x="87" fg:w="1"/><text x="70.4113%" y="159.50"></text></g><g><title>std::sys::unix::fs::readdir::{{closure}} (1 samples, 0.81%)</title><rect x="70.1613%" y="133" width="0.8065%" height="15" fill="rgb(232,9,14)" fg:x="87" fg:w="1"/><text x="70.4113%" y="143.50"></text></g><g><title>fstatat (1 samples, 0.81%)</title><rect x="70.1613%" y="117" width="0.8065%" height="15" fill="rgb(243,91,43)" fg:x="87" fg:w="1"/><text x="70.4113%" y="127.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.81%)</title><rect x="70.9677%" y="101" width="0.8065%" height="15" fill="rgb(231,90,52)" fg:x="88" fg:w="1"/><text x="71.2177%" y="111.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (1 samples, 0.81%)</title><rect x="70.9677%" y="85" width="0.8065%" height="15" fill="rgb(253,192,44)" fg:x="88" fg:w="1"/><text x="71.2177%" y="95.50"></text></g><g><title>std::sys::unix::thread::Thread::new (1 samples, 0.81%)</title><rect x="70.9677%" y="69" width="0.8065%" height="15" fill="rgb(241,66,31)" fg:x="88" fg:w="1"/><text x="71.2177%" y="79.50"></text></g><g><title>pthread_create (1 samples, 0.81%)</title><rect x="70.9677%" y="53" width="0.8065%" height="15" fill="rgb(235,81,37)" fg:x="88" fg:w="1"/><text x="71.2177%" y="63.50"></text></g><g><title>tokio::fs::open_options::OpenOptions::open::{{closure}} (2 samples, 1.61%)</title><rect x="70.9677%" y="149" width="1.6129%" height="15" fill="rgb(223,221,9)" fg:x="88" fg:w="2"/><text x="71.2177%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 1.61%)</title><rect x="70.9677%" y="133" width="1.6129%" height="15" fill="rgb(242,180,7)" fg:x="88" fg:w="2"/><text x="71.2177%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 1.61%)</title><rect x="70.9677%" y="117" width="1.6129%" height="15" fill="rgb(243,78,19)" fg:x="88" fg:w="2"/><text x="71.2177%" y="127.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (1 samples, 0.81%)</title><rect x="71.7742%" y="101" width="0.8065%" height="15" fill="rgb(233,23,17)" fg:x="89" fg:w="1"/><text x="72.0242%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.81%)</title><rect x="71.7742%" y="85" width="0.8065%" height="15" fill="rgb(252,122,45)" fg:x="89" fg:w="1"/><text x="72.0242%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.81%)</title><rect x="71.7742%" y="69" width="0.8065%" height="15" fill="rgb(247,108,20)" fg:x="89" fg:w="1"/><text x="72.0242%" y="79.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.81%)</title><rect x="71.7742%" y="53" width="0.8065%" height="15" fill="rgb(235,84,21)" fg:x="89" fg:w="1"/><text x="72.0242%" y="63.50"></text></g><g><title>posix_memalign (1 samples, 0.81%)</title><rect x="71.7742%" y="37" width="0.8065%" height="15" fill="rgb(247,129,10)" fg:x="89" fg:w="1"/><text x="72.0242%" y="47.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt;::new::{{closure}} (5 samples, 4.03%)</title><rect x="69.3548%" y="213" width="4.0323%" height="15" fill="rgb(208,173,14)" fg:x="86" fg:w="5"/><text x="69.6048%" y="223.50">lami..</text></g><g><title>laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt;::with_segment_storage_provider_config_and_base_index::{{closure}} (3 samples, 2.42%)</title><rect x="70.9677%" y="197" width="2.4194%" height="15" fill="rgb(236,31,38)" fg:x="88" fg:w="3"/><text x="71.2177%" y="207.50">la..</text></g><g><title>&lt;laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt; as laminarmq::storage::commit_log::segmented_log::segment::SegmentStorageProvider&lt;S,Idx&gt;&gt;::obtain::{{closure}} (3 samples, 2.42%)</title><rect x="70.9677%" y="181" width="2.4194%" height="15" fill="rgb(232,65,17)" fg:x="88" fg:w="3"/><text x="71.2177%" y="191.50">&lt;l..</text></g><g><title>laminarmq::storage::impls::tokio::storage::unix::&lt;impl laminarmq::storage::impls::common::PathAddressedStorageProvider&lt;laminarmq::storage::impls::tokio::storage::StdFileStorage&gt; for laminarmq::storage::impls::tokio::storage::StdFileStorageProvider&gt;::obtain_storage::{{closure}} (3 samples, 2.42%)</title><rect x="70.9677%" y="165" width="2.4194%" height="15" fill="rgb(224,45,49)" fg:x="88" fg:w="3"/><text x="71.2177%" y="175.50">la..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.81%)</title><rect x="72.5806%" y="149" width="0.8065%" height="15" fill="rgb(225,2,53)" fg:x="90" fg:w="1"/><text x="72.8306%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.81%)</title><rect x="72.5806%" y="133" width="0.8065%" height="15" fill="rgb(248,210,53)" fg:x="90" fg:w="1"/><text x="72.8306%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.81%)</title><rect x="72.5806%" y="117" width="0.8065%" height="15" fill="rgb(211,1,30)" fg:x="90" fg:w="1"/><text x="72.8306%" y="127.50"></text></g><g><title>syscall (1 samples, 0.81%)</title><rect x="72.5806%" y="101" width="0.8065%" height="15" fill="rgb(224,96,15)" fg:x="90" fg:w="1"/><text x="72.8306%" y="111.50"></text></g><g><title>laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt;::with_storage_directory_path_and_provider (1 samples, 0.81%)</title><rect x="73.3871%" y="213" width="0.8065%" height="15" fill="rgb(252,45,11)" fg:x="91" fg:w="1"/><text x="73.6371%" y="223.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (1 samples, 0.81%)</title><rect x="73.3871%" y="197" width="0.8065%" height="15" fill="rgb(220,125,38)" fg:x="91" fg:w="1"/><text x="73.6371%" y="207.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir (1 samples, 0.81%)</title><rect x="73.3871%" y="181" width="0.8065%" height="15" fill="rgb(243,161,33)" fg:x="91" fg:w="1"/><text x="73.6371%" y="191.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.81%)</title><rect x="73.3871%" y="165" width="0.8065%" height="15" fill="rgb(248,197,34)" fg:x="91" fg:w="1"/><text x="73.6371%" y="175.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.81%)</title><rect x="73.3871%" y="149" width="0.8065%" height="15" fill="rgb(228,165,23)" fg:x="91" fg:w="1"/><text x="73.6371%" y="159.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir::{{closure}} (1 samples, 0.81%)</title><rect x="73.3871%" y="133" width="0.8065%" height="15" fill="rgb(236,94,38)" fg:x="91" fg:w="1"/><text x="73.6371%" y="143.50"></text></g><g><title>mkdir (1 samples, 0.81%)</title><rect x="73.3871%" y="117" width="0.8065%" height="15" fill="rgb(220,13,23)" fg:x="91" fg:w="1"/><text x="73.6371%" y="127.50"></text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (92 samples, 74.19%)</title><rect x="4.8387%" y="277" width="74.1935%" height="15" fill="rgb(234,26,39)" fg:x="6" fg:w="92"/><text x="5.0887%" y="287.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (92 samples, 74.19%)</title><rect x="4.8387%" y="261" width="74.1935%" height="15" fill="rgb(205,117,44)" fg:x="6" fg:w="92"/><text x="5.0887%" y="271.50">&lt;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (92 samples, 74.19%)</title><rect x="4.8387%" y="245" width="74.1935%" height="15" fill="rgb(250,42,2)" fg:x="6" fg:w="92"/><text x="5.0887%" y="255.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (91 samples, 73.39%)</title><rect x="5.6452%" y="229" width="73.3871%" height="15" fill="rgb(223,83,14)" fg:x="7" fg:w="91"/><text x="5.8952%" y="239.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>malloc (6 samples, 4.84%)</title><rect x="74.1935%" y="213" width="4.8387%" height="15" fill="rgb(241,147,50)" fg:x="92" fg:w="6"/><text x="74.4435%" y="223.50">malloc</text></g><g><title>_start (100 samples, 80.65%)</title><rect x="0.8065%" y="565" width="80.6452%" height="15" fill="rgb(218,90,6)" fg:x="1" fg:w="100"/><text x="1.0565%" y="575.50">_start</text></g><g><title>__libc_start_main (100 samples, 80.65%)</title><rect x="0.8065%" y="549" width="80.6452%" height="15" fill="rgb(210,191,5)" fg:x="1" fg:w="100"/><text x="1.0565%" y="559.50">__libc_start_main</text></g><g><title>main (100 samples, 80.65%)</title><rect x="0.8065%" y="533" width="80.6452%" height="15" fill="rgb(225,139,19)" fg:x="1" fg:w="100"/><text x="1.0565%" y="543.50">main</text></g><g><title>std::rt::lang_start_internal (100 samples, 80.65%)</title><rect x="0.8065%" y="517" width="80.6452%" height="15" fill="rgb(210,1,33)" fg:x="1" fg:w="100"/><text x="1.0565%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (100 samples, 80.65%)</title><rect x="0.8065%" y="501" width="80.6452%" height="15" fill="rgb(213,50,3)" fg:x="1" fg:w="100"/><text x="1.0565%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (100 samples, 80.65%)</title><rect x="0.8065%" y="485" width="80.6452%" height="15" fill="rgb(234,227,4)" fg:x="1" fg:w="100"/><text x="1.0565%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (100 samples, 80.65%)</title><rect x="0.8065%" y="469" width="80.6452%" height="15" fill="rgb(246,63,5)" fg:x="1" fg:w="100"/><text x="1.0565%" y="479.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (100 samples, 80.65%)</title><rect x="0.8065%" y="453" width="80.6452%" height="15" fill="rgb(245,136,27)" fg:x="1" fg:w="100"/><text x="1.0565%" y="463.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (100 samples, 80.65%)</title><rect x="0.8065%" y="437" width="80.6452%" height="15" fill="rgb(247,199,27)" fg:x="1" fg:w="100"/><text x="1.0565%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (100 samples, 80.65%)</title><rect x="0.8065%" y="421" width="80.6452%" height="15" fill="rgb(252,158,49)" fg:x="1" fg:w="100"/><text x="1.0565%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (100 samples, 80.65%)</title><rect x="0.8065%" y="405" width="80.6452%" height="15" fill="rgb(254,73,1)" fg:x="1" fg:w="100"/><text x="1.0565%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (100 samples, 80.65%)</title><rect x="0.8065%" y="389" width="80.6452%" height="15" fill="rgb(248,93,19)" fg:x="1" fg:w="100"/><text x="1.0565%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (100 samples, 80.65%)</title><rect x="0.8065%" y="373" width="80.6452%" height="15" fill="rgb(206,67,5)" fg:x="1" fg:w="100"/><text x="1.0565%" y="383.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (100 samples, 80.65%)</title><rect x="0.8065%" y="357" width="80.6452%" height="15" fill="rgb(209,210,4)" fg:x="1" fg:w="100"/><text x="1.0565%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>commit_log_append::main (100 samples, 80.65%)</title><rect x="0.8065%" y="341" width="80.6452%" height="15" fill="rgb(214,185,36)" fg:x="1" fg:w="100"/><text x="1.0565%" y="351.50">commit_log_append::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (100 samples, 80.65%)</title><rect x="0.8065%" y="325" width="80.6452%" height="15" fill="rgb(233,191,26)" fg:x="1" fg:w="100"/><text x="1.0565%" y="335.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (100 samples, 80.65%)</title><rect x="0.8065%" y="309" width="80.6452%" height="15" fill="rgb(248,94,17)" fg:x="1" fg:w="100"/><text x="1.0565%" y="319.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (100 samples, 80.65%)</title><rect x="0.8065%" y="293" width="80.6452%" height="15" fill="rgb(250,64,4)" fg:x="1" fg:w="100"/><text x="1.0565%" y="303.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up</text></g><g><title>tokio::runtime::runtime::Runtime::new (3 samples, 2.42%)</title><rect x="79.0323%" y="277" width="2.4194%" height="15" fill="rgb(218,41,53)" fg:x="98" fg:w="3"/><text x="79.2823%" y="287.50">to..</text></g><g><title>tokio::runtime::builder::Builder::build (3 samples, 2.42%)</title><rect x="79.0323%" y="261" width="2.4194%" height="15" fill="rgb(251,176,28)" fg:x="98" fg:w="3"/><text x="79.2823%" y="271.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (3 samples, 2.42%)</title><rect x="79.0323%" y="245" width="2.4194%" height="15" fill="rgb(247,22,9)" fg:x="98" fg:w="3"/><text x="79.2823%" y="255.50">to..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (3 samples, 2.42%)</title><rect x="79.0323%" y="229" width="2.4194%" height="15" fill="rgb(218,201,14)" fg:x="98" fg:w="3"/><text x="79.2823%" y="239.50">to..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (3 samples, 2.42%)</title><rect x="79.0323%" y="213" width="2.4194%" height="15" fill="rgb(218,94,10)" fg:x="98" fg:w="3"/><text x="79.2823%" y="223.50">to..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 2.42%)</title><rect x="79.0323%" y="197" width="2.4194%" height="15" fill="rgb(222,183,52)" fg:x="98" fg:w="3"/><text x="79.2823%" y="207.50">to..</text></g><g><title>std::thread::Builder::spawn_unchecked (3 samples, 2.42%)</title><rect x="79.0323%" y="181" width="2.4194%" height="15" fill="rgb(242,140,25)" fg:x="98" fg:w="3"/><text x="79.2823%" y="191.50">st..</text></g><g><title>std::sys::unix::thread::Thread::new (3 samples, 2.42%)</title><rect x="79.0323%" y="165" width="2.4194%" height="15" fill="rgb(235,197,38)" fg:x="98" fg:w="3"/><text x="79.2823%" y="175.50">st..</text></g><g><title>pthread_create (3 samples, 2.42%)</title><rect x="79.0323%" y="149" width="2.4194%" height="15" fill="rgb(237,136,15)" fg:x="98" fg:w="3"/><text x="79.2823%" y="159.50">pt..</text></g><g><title>commit_log_appe (102 samples, 82.26%)</title><rect x="0.0000%" y="581" width="82.2581%" height="15" fill="rgb(223,44,49)" fg:x="0" fg:w="102"/><text x="0.2500%" y="591.50">commit_log_appe</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.81%)</title><rect x="81.4516%" y="565" width="0.8065%" height="15" fill="rgb(227,71,15)" fg:x="101" fg:w="1"/><text x="81.7016%" y="575.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (1 samples, 0.81%)</title><rect x="81.4516%" y="549" width="0.8065%" height="15" fill="rgb(225,153,20)" fg:x="101" fg:w="1"/><text x="81.7016%" y="559.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.81%)</title><rect x="81.4516%" y="533" width="0.8065%" height="15" fill="rgb(210,190,26)" fg:x="101" fg:w="1"/><text x="81.7016%" y="543.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.81%)</title><rect x="81.4516%" y="517" width="0.8065%" height="15" fill="rgb(223,147,5)" fg:x="101" fg:w="1"/><text x="81.7016%" y="527.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.81%)</title><rect x="81.4516%" y="501" width="0.8065%" height="15" fill="rgb(207,14,23)" fg:x="101" fg:w="1"/><text x="81.7016%" y="511.50"></text></g><g><title>mmap64 (1 samples, 0.81%)</title><rect x="81.4516%" y="485" width="0.8065%" height="15" fill="rgb(211,195,53)" fg:x="101" fg:w="1"/><text x="81.7016%" y="495.50"></text></g><g><title>&lt;tokio::runtime::context::current::SetCurrentGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.81%)</title><rect x="82.2581%" y="485" width="0.8065%" height="15" fill="rgb(237,75,46)" fg:x="102" fg:w="1"/><text x="82.5081%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 1.61%)</title><rect x="83.0645%" y="485" width="1.6129%" height="15" fill="rgb(254,55,14)" fg:x="103" fg:w="2"/><text x="83.3145%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.81%)</title><rect x="83.8710%" y="469" width="0.8065%" height="15" fill="rgb(230,185,30)" fg:x="104" fg:w="1"/><text x="84.1210%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.81%)</title><rect x="83.8710%" y="453" width="0.8065%" height="15" fill="rgb(220,14,11)" fg:x="104" fg:w="1"/><text x="84.1210%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (3 samples, 2.42%)</title><rect x="85.4839%" y="469" width="2.4194%" height="15" fill="rgb(215,169,44)" fg:x="106" fg:w="3"/><text x="85.7339%" y="479.50">st..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (3 samples, 2.42%)</title><rect x="85.4839%" y="453" width="2.4194%" height="15" fill="rgb(253,203,20)" fg:x="106" fg:w="3"/><text x="85.7339%" y="463.50">st..</text></g><g><title>std::sys::unix::futex::futex_wait (3 samples, 2.42%)</title><rect x="85.4839%" y="437" width="2.4194%" height="15" fill="rgb(229,225,17)" fg:x="106" fg:w="3"/><text x="85.7339%" y="447.50">st..</text></g><g><title>syscall (2 samples, 1.61%)</title><rect x="86.2903%" y="421" width="1.6129%" height="15" fill="rgb(236,76,26)" fg:x="107" fg:w="2"/><text x="86.5403%" y="431.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.81%)</title><rect x="87.9032%" y="437" width="0.8065%" height="15" fill="rgb(234,15,30)" fg:x="109" fg:w="1"/><text x="88.1532%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.81%)</title><rect x="87.9032%" y="421" width="0.8065%" height="15" fill="rgb(211,113,48)" fg:x="109" fg:w="1"/><text x="88.1532%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (2 samples, 1.61%)</title><rect x="87.9032%" y="469" width="1.6129%" height="15" fill="rgb(221,31,36)" fg:x="109" fg:w="2"/><text x="88.1532%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (2 samples, 1.61%)</title><rect x="87.9032%" y="453" width="1.6129%" height="15" fill="rgb(215,118,52)" fg:x="109" fg:w="2"/><text x="88.1532%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.81%)</title><rect x="88.7097%" y="437" width="0.8065%" height="15" fill="rgb(241,151,27)" fg:x="110" fg:w="1"/><text x="88.9597%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.81%)</title><rect x="88.7097%" y="421" width="0.8065%" height="15" fill="rgb(253,51,3)" fg:x="110" fg:w="1"/><text x="88.9597%" y="431.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 1.61%)</title><rect x="89.5161%" y="453" width="1.6129%" height="15" fill="rgb(216,201,24)" fg:x="111" fg:w="2"/><text x="89.7661%" y="463.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 1.61%)</title><rect x="89.5161%" y="437" width="1.6129%" height="15" fill="rgb(231,107,4)" fg:x="111" fg:w="2"/><text x="89.7661%" y="447.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 1.61%)</title><rect x="89.5161%" y="421" width="1.6129%" height="15" fill="rgb(243,97,54)" fg:x="111" fg:w="2"/><text x="89.7661%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 1.61%)</title><rect x="89.5161%" y="405" width="1.6129%" height="15" fill="rgb(221,32,51)" fg:x="111" fg:w="2"/><text x="89.7661%" y="415.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (2 samples, 1.61%)</title><rect x="89.5161%" y="389" width="1.6129%" height="15" fill="rgb(218,171,35)" fg:x="111" fg:w="2"/><text x="89.7661%" y="399.50"></text></g><g><title>std::sys::unix::fs::File::write (2 samples, 1.61%)</title><rect x="89.5161%" y="373" width="1.6129%" height="15" fill="rgb(214,20,53)" fg:x="111" fg:w="2"/><text x="89.7661%" y="383.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 1.61%)</title><rect x="89.5161%" y="357" width="1.6129%" height="15" fill="rgb(239,9,52)" fg:x="111" fg:w="2"/><text x="89.7661%" y="367.50"></text></g><g><title>__write (2 samples, 1.61%)</title><rect x="89.5161%" y="341" width="1.6129%" height="15" fill="rgb(215,114,45)" fg:x="111" fg:w="2"/><text x="89.7661%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::shutdown_core (1 samples, 0.81%)</title><rect x="91.9355%" y="373" width="0.8065%" height="15" fill="rgb(208,118,9)" fg:x="114" fg:w="1"/><text x="92.1855%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::shutdown (1 samples, 0.81%)</title><rect x="91.9355%" y="357" width="0.8065%" height="15" fill="rgb(235,7,39)" fg:x="114" fg:w="1"/><text x="92.1855%" y="367.50"></text></g><g><title>syscall (1 samples, 0.81%)</title><rect x="91.9355%" y="341" width="0.8065%" height="15" fill="rgb(243,225,15)" fg:x="114" fg:w="1"/><text x="92.1855%" y="351.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3 samples, 2.42%)</title><rect x="91.1290%" y="453" width="2.4194%" height="15" fill="rgb(225,216,18)" fg:x="113" fg:w="3"/><text x="91.3790%" y="463.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (3 samples, 2.42%)</title><rect x="91.1290%" y="437" width="2.4194%" height="15" fill="rgb(233,36,38)" fg:x="113" fg:w="3"/><text x="91.3790%" y="447.50">to..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (3 samples, 2.42%)</title><rect x="91.1290%" y="421" width="2.4194%" height="15" fill="rgb(239,88,23)" fg:x="113" fg:w="3"/><text x="91.3790%" y="431.50">to..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (3 samples, 2.42%)</title><rect x="91.1290%" y="405" width="2.4194%" height="15" fill="rgb(219,181,35)" fg:x="113" fg:w="3"/><text x="91.3790%" y="415.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (3 samples, 2.42%)</title><rect x="91.1290%" y="389" width="2.4194%" height="15" fill="rgb(215,18,46)" fg:x="113" fg:w="3"/><text x="91.3790%" y="399.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.81%)</title><rect x="92.7419%" y="373" width="0.8065%" height="15" fill="rgb(241,38,11)" fg:x="115" fg:w="1"/><text x="92.9919%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (1 samples, 0.81%)</title><rect x="92.7419%" y="357" width="0.8065%" height="15" fill="rgb(248,169,45)" fg:x="115" fg:w="1"/><text x="92.9919%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (1 samples, 0.81%)</title><rect x="92.7419%" y="341" width="0.8065%" height="15" fill="rgb(239,50,49)" fg:x="115" fg:w="1"/><text x="92.9919%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (1 samples, 0.81%)</title><rect x="92.7419%" y="325" width="0.8065%" height="15" fill="rgb(231,96,31)" fg:x="115" fg:w="1"/><text x="92.9919%" y="335.50"></text></g><g><title>std::sys::unix::futex::futex_wait (1 samples, 0.81%)</title><rect x="92.7419%" y="309" width="0.8065%" height="15" fill="rgb(224,193,37)" fg:x="115" fg:w="1"/><text x="92.9919%" y="319.50"></text></g><g><title>syscall (1 samples, 0.81%)</title><rect x="92.7419%" y="293" width="0.8065%" height="15" fill="rgb(227,153,50)" fg:x="115" fg:w="1"/><text x="92.9919%" y="303.50"></text></g><g><title>std::fs::OpenOptions::_open (2 samples, 1.61%)</title><rect x="93.5484%" y="421" width="1.6129%" height="15" fill="rgb(249,228,3)" fg:x="116" fg:w="2"/><text x="93.7984%" y="431.50"></text></g><g><title>std::sys::unix::fs::File::open (2 samples, 1.61%)</title><rect x="93.5484%" y="405" width="1.6129%" height="15" fill="rgb(219,164,43)" fg:x="116" fg:w="2"/><text x="93.7984%" y="415.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 1.61%)</title><rect x="93.5484%" y="389" width="1.6129%" height="15" fill="rgb(216,45,41)" fg:x="116" fg:w="2"/><text x="93.7984%" y="399.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 1.61%)</title><rect x="93.5484%" y="373" width="1.6129%" height="15" fill="rgb(210,226,51)" fg:x="116" fg:w="2"/><text x="93.7984%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (2 samples, 1.61%)</title><rect x="93.5484%" y="357" width="1.6129%" height="15" fill="rgb(209,117,49)" fg:x="116" fg:w="2"/><text x="93.7984%" y="367.50"></text></g><g><title>std::sys::unix::fs::File::open_c (2 samples, 1.61%)</title><rect x="93.5484%" y="341" width="1.6129%" height="15" fill="rgb(206,196,24)" fg:x="116" fg:w="2"/><text x="93.7984%" y="351.50"></text></g><g><title>std::sys::unix::cvt_r (2 samples, 1.61%)</title><rect x="93.5484%" y="325" width="1.6129%" height="15" fill="rgb(253,218,3)" fg:x="116" fg:w="2"/><text x="93.7984%" y="335.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (2 samples, 1.61%)</title><rect x="93.5484%" y="309" width="1.6129%" height="15" fill="rgb(252,166,2)" fg:x="116" fg:w="2"/><text x="93.7984%" y="319.50"></text></g><g><title>__open (2 samples, 1.61%)</title><rect x="93.5484%" y="293" width="1.6129%" height="15" fill="rgb(236,218,26)" fg:x="116" fg:w="2"/><text x="93.7984%" y="303.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.81%)</title><rect x="95.1613%" y="389" width="0.8065%" height="15" fill="rgb(254,84,19)" fg:x="118" fg:w="1"/><text x="95.4113%" y="399.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.81%)</title><rect x="95.1613%" y="373" width="0.8065%" height="15" fill="rgb(219,137,29)" fg:x="118" fg:w="1"/><text x="95.4113%" y="383.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (1 samples, 0.81%)</title><rect x="95.1613%" y="357" width="0.8065%" height="15" fill="rgb(227,47,52)" fg:x="118" fg:w="1"/><text x="95.4113%" y="367.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (1 samples, 0.81%)</title><rect x="95.1613%" y="341" width="0.8065%" height="15" fill="rgb(229,167,24)" fg:x="118" fg:w="1"/><text x="95.4113%" y="351.50"></text></g><g><title>unlinkat (1 samples, 0.81%)</title><rect x="95.1613%" y="325" width="0.8065%" height="15" fill="rgb(233,164,1)" fg:x="118" fg:w="1"/><text x="95.4113%" y="335.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4 samples, 3.23%)</title><rect x="93.5484%" y="453" width="3.2258%" height="15" fill="rgb(218,88,48)" fg:x="116" fg:w="4"/><text x="93.7984%" y="463.50">tok..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 3.23%)</title><rect x="93.5484%" y="437" width="3.2258%" height="15" fill="rgb(226,214,24)" fg:x="116" fg:w="4"/><text x="93.7984%" y="447.50">tok..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (2 samples, 1.61%)</title><rect x="95.1613%" y="421" width="1.6129%" height="15" fill="rgb(233,29,12)" fg:x="118" fg:w="2"/><text x="95.4113%" y="431.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (2 samples, 1.61%)</title><rect x="95.1613%" y="405" width="1.6129%" height="15" fill="rgb(219,120,34)" fg:x="118" fg:w="2"/><text x="95.4113%" y="415.50"></text></g><g><title>std::sys::unix::fs::lstat (1 samples, 0.81%)</title><rect x="95.9677%" y="389" width="0.8065%" height="15" fill="rgb(226,78,44)" fg:x="119" fg:w="1"/><text x="96.2177%" y="399.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.81%)</title><rect x="95.9677%" y="373" width="0.8065%" height="15" fill="rgb(240,15,48)" fg:x="119" fg:w="1"/><text x="96.2177%" y="383.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.81%)</title><rect x="95.9677%" y="357" width="0.8065%" height="15" fill="rgb(253,176,7)" fg:x="119" fg:w="1"/><text x="96.2177%" y="367.50"></text></g><g><title>std::sys::unix::fs::lstat::{{closure}} (1 samples, 0.81%)</title><rect x="95.9677%" y="341" width="0.8065%" height="15" fill="rgb(206,166,28)" fg:x="119" fg:w="1"/><text x="96.2177%" y="351.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.81%)</title><rect x="95.9677%" y="325" width="0.8065%" height="15" fill="rgb(241,53,51)" fg:x="119" fg:w="1"/><text x="96.2177%" y="335.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.81%)</title><rect x="95.9677%" y="309" width="0.8065%" height="15" fill="rgb(249,112,30)" fg:x="119" fg:w="1"/><text x="96.2177%" y="319.50"></text></g><g><title>statx (1 samples, 0.81%)</title><rect x="95.9677%" y="293" width="0.8065%" height="15" fill="rgb(217,85,30)" fg:x="119" fg:w="1"/><text x="96.2177%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (19 samples, 15.32%)</title><rect x="82.2581%" y="549" width="15.3226%" height="15" fill="rgb(233,49,7)" fg:x="102" fg:w="19"/><text x="82.5081%" y="559.50">&lt;alloc::boxed::Box&lt;F,A&gt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (19 samples, 15.32%)</title><rect x="82.2581%" y="533" width="15.3226%" height="15" fill="rgb(234,109,9)" fg:x="102" fg:w="19"/><text x="82.5081%" y="543.50">&lt;alloc::boxed::Box&lt;F,A&gt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (19 samples, 15.32%)</title><rect x="82.2581%" y="517" width="15.3226%" height="15" fill="rgb(253,95,22)" fg:x="102" fg:w="19"/><text x="82.5081%" y="527.50">core::ops::function::Fn..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (19 samples, 15.32%)</title><rect x="82.2581%" y="501" width="15.3226%" height="15" fill="rgb(233,176,25)" fg:x="102" fg:w="19"/><text x="82.5081%" y="511.50">std::sys_common::backtr..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (16 samples, 12.90%)</title><rect x="84.6774%" y="485" width="12.9032%" height="15" fill="rgb(236,33,39)" fg:x="105" fg:w="16"/><text x="84.9274%" y="495.50">tokio::runtime::blo..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (10 samples, 8.06%)</title><rect x="89.5161%" y="469" width="8.0645%" height="15" fill="rgb(223,226,42)" fg:x="111" fg:w="10"/><text x="89.7661%" y="479.50">tokio::runt..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1 samples, 0.81%)</title><rect x="96.7742%" y="453" width="0.8065%" height="15" fill="rgb(216,99,33)" fg:x="120" fg:w="1"/><text x="97.0242%" y="463.50"></text></g><g><title>tokio::runtime::park::wake_by_ref (1 samples, 0.81%)</title><rect x="96.7742%" y="437" width="0.8065%" height="15" fill="rgb(235,84,23)" fg:x="120" fg:w="1"/><text x="97.0242%" y="447.50"></text></g><g><title>syscall (1 samples, 0.81%)</title><rect x="96.7742%" y="421" width="0.8065%" height="15" fill="rgb(232,2,27)" fg:x="120" fg:w="1"/><text x="97.0242%" y="431.50"></text></g><g><title>__munmap (2 samples, 1.61%)</title><rect x="97.5806%" y="501" width="1.6129%" height="15" fill="rgb(241,23,22)" fg:x="121" fg:w="2"/><text x="97.8306%" y="511.50"></text></g><g><title>all (124 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(211,73,27)" fg:x="0" fg:w="124"/><text x="0.2500%" y="607.50"></text></g><g><title>tokio-runtime-w (22 samples, 17.74%)</title><rect x="82.2581%" y="581" width="17.7419%" height="15" fill="rgb(235,109,49)" fg:x="102" fg:w="22"/><text x="82.5081%" y="591.50">tokio-runtime-w</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (22 samples, 17.74%)</title><rect x="82.2581%" y="565" width="17.7419%" height="15" fill="rgb(230,99,29)" fg:x="102" fg:w="22"/><text x="82.5081%" y="575.50">std::sys::unix::thread::Thre..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (3 samples, 2.42%)</title><rect x="97.5806%" y="549" width="2.4194%" height="15" fill="rgb(245,199,7)" fg:x="121" fg:w="3"/><text x="97.8306%" y="559.50">co..</text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (3 samples, 2.42%)</title><rect x="97.5806%" y="533" width="2.4194%" height="15" fill="rgb(217,179,10)" fg:x="121" fg:w="3"/><text x="97.8306%" y="543.50">&lt;s..</text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (3 samples, 2.42%)</title><rect x="97.5806%" y="517" width="2.4194%" height="15" fill="rgb(254,99,47)" fg:x="121" fg:w="3"/><text x="97.8306%" y="527.50">st..</text></g><g><title>sigaltstack (1 samples, 0.81%)</title><rect x="99.1935%" y="501" width="0.8065%" height="15" fill="rgb(251,121,7)" fg:x="123" fg:w="1"/><text x="99.4435%" y="511.50"></text></g></svg></svg>