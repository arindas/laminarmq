<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="130"><g><title>&lt;glommio::RingIoStats as core::default::Default&gt;::default (1 samples, 0.77%)</title><rect x="0.7692%" y="181" width="0.7692%" height="15" fill="rgb(248,177,22)" fg:x="1" fg:w="1"/><text x="1.0192%" y="191.50"></text></g><g><title>sketches_ddsketch::ddsketch::DDSketch::new (1 samples, 0.77%)</title><rect x="0.7692%" y="165" width="0.7692%" height="15" fill="rgb(215,211,37)" fg:x="1" fg:w="1"/><text x="1.0192%" y="175.50"></text></g><g><title>__libc_calloc (1 samples, 0.77%)</title><rect x="0.7692%" y="149" width="0.7692%" height="15" fill="rgb(241,128,51)" fg:x="1" fg:w="1"/><text x="1.0192%" y="159.50"></text></g><g><title>io_uring_queue_init_params (2 samples, 1.54%)</title><rect x="1.5385%" y="181" width="1.5385%" height="15" fill="rgb(227,165,31)" fg:x="2" fg:w="2"/><text x="1.7885%" y="191.50"></text></g><g><title>io_uring_queue_mmap (2 samples, 1.54%)</title><rect x="1.5385%" y="165" width="1.5385%" height="15" fill="rgb(228,167,24)" fg:x="2" fg:w="2"/><text x="1.7885%" y="175.50"></text></g><g><title>mmap64 (2 samples, 1.54%)</title><rect x="1.5385%" y="149" width="1.5385%" height="15" fill="rgb(228,143,12)" fg:x="2" fg:w="2"/><text x="1.7885%" y="159.50"></text></g><g><title>&lt;glommio::executor::LocalExecutor as core::default::Default&gt;::default (19 samples, 14.62%)</title><rect x="0.7692%" y="245" width="14.6154%" height="15" fill="rgb(249,149,8)" fg:x="1" fg:w="19"/><text x="1.0192%" y="255.50">&lt;glommio::executor::Lo..</text></g><g><title>glommio::executor::LocalExecutorBuilder::make (19 samples, 14.62%)</title><rect x="0.7692%" y="229" width="14.6154%" height="15" fill="rgb(243,35,44)" fg:x="1" fg:w="19"/><text x="1.0192%" y="239.50">glommio::executor::Loc..</text></g><g><title>glommio::reactor::Reactor::new (19 samples, 14.62%)</title><rect x="0.7692%" y="213" width="14.6154%" height="15" fill="rgb(246,89,9)" fg:x="1" fg:w="19"/><text x="1.0192%" y="223.50">glommio::reactor::Reac..</text></g><g><title>glommio::sys::uring::Reactor::new (19 samples, 14.62%)</title><rect x="0.7692%" y="197" width="14.6154%" height="15" fill="rgb(233,213,13)" fg:x="1" fg:w="19"/><text x="1.0192%" y="207.50">glommio::sys::uring::R..</text></g><g><title>io_uring_register_buffers (16 samples, 12.31%)</title><rect x="3.0769%" y="181" width="12.3077%" height="15" fill="rgb(233,141,41)" fg:x="4" fg:w="16"/><text x="3.3269%" y="191.50">io_uring_register_..</text></g><g><title>__sys_io_uring_register (16 samples, 12.31%)</title><rect x="3.0769%" y="165" width="12.3077%" height="15" fill="rgb(239,167,4)" fg:x="4" fg:w="16"/><text x="3.3269%" y="175.50">__sys_io_uring_reg..</text></g><g><title>syscall (16 samples, 12.31%)</title><rect x="3.0769%" y="149" width="12.3077%" height="15" fill="rgb(209,217,16)" fg:x="4" fg:w="16"/><text x="3.3269%" y="159.50">syscall</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;glommio::sys::uring::PollRing&gt;&gt; (2 samples, 1.54%)</title><rect x="15.3846%" y="213" width="1.5385%" height="15" fill="rgb(219,88,35)" fg:x="20" fg:w="2"/><text x="15.6346%" y="223.50"></text></g><g><title>io_uring_queue_exit (2 samples, 1.54%)</title><rect x="15.3846%" y="197" width="1.5385%" height="15" fill="rgb(220,193,23)" fg:x="20" fg:w="2"/><text x="15.6346%" y="207.50"></text></g><g><title>__munmap (2 samples, 1.54%)</title><rect x="15.3846%" y="181" width="1.5385%" height="15" fill="rgb(230,90,52)" fg:x="20" fg:w="2"/><text x="15.6346%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;criterion::bencher::AsyncBencher&lt;commit_log_append::GlommioAsyncExecutor&gt;&gt; (3 samples, 2.31%)</title><rect x="15.3846%" y="245" width="2.3077%" height="15" fill="rgb(252,106,19)" fg:x="20" fg:w="3"/><text x="15.6346%" y="255.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 2.31%)</title><rect x="15.3846%" y="229" width="2.3077%" height="15" fill="rgb(206,74,20)" fg:x="20" fg:w="3"/><text x="15.6346%" y="239.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;glommio::sys::uring::SleepableRing&gt;&gt; (1 samples, 0.77%)</title><rect x="16.9231%" y="213" width="0.7692%" height="15" fill="rgb(230,138,44)" fg:x="22" fg:w="1"/><text x="17.1731%" y="223.50"></text></g><g><title>io_uring_queue_exit (1 samples, 0.77%)</title><rect x="16.9231%" y="197" width="0.7692%" height="15" fill="rgb(235,182,43)" fg:x="22" fg:w="1"/><text x="17.1731%" y="207.50"></text></g><g><title>__munmap (1 samples, 0.77%)</title><rect x="16.9231%" y="181" width="0.7692%" height="15" fill="rgb(242,16,51)" fg:x="22" fg:w="1"/><text x="17.1731%" y="191.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt; as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (1 samples, 0.77%)</title><rect x="24.6154%" y="133" width="0.7692%" height="15" fill="rgb(248,9,4)" fg:x="32" fg:w="1"/><text x="24.8654%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::store::Store&lt;S,H&gt; as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (1 samples, 0.77%)</title><rect x="24.6154%" y="117" width="0.7692%" height="15" fill="rgb(210,31,22)" fg:x="32" fg:w="1"/><text x="24.8654%" y="127.50"></text></g><g><title>&lt;laminarmq::storage::impls::glommio::storage::buffered::BufferedStorage as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (1 samples, 0.77%)</title><rect x="24.6154%" y="101" width="0.7692%" height="15" fill="rgb(239,54,39)" fg:x="32" fg:w="1"/><text x="24.8654%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;glommio::io::buffered_file_stream::StreamWriter&gt; (1 samples, 0.77%)</title><rect x="24.6154%" y="85" width="0.7692%" height="15" fill="rgb(230,99,41)" fg:x="32" fg:w="1"/><text x="24.8654%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.77%)</title><rect x="24.6154%" y="69" width="0.7692%" height="15" fill="rgb(253,106,12)" fg:x="32" fg:w="1"/><text x="24.8654%" y="79.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::AsyncConsume&gt;::close::{{closure}} (2 samples, 1.54%)</title><rect x="24.6154%" y="149" width="1.5385%" height="15" fill="rgb(213,46,41)" fg:x="32" fg:w="2"/><text x="24.8654%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.77%)</title><rect x="25.3846%" y="133" width="0.7692%" height="15" fill="rgb(215,133,35)" fg:x="33" fg:w="1"/><text x="25.6346%" y="143.50"></text></g><g><title>&lt;crc32fast::Hasher as core::default::Default&gt;::default (1 samples, 0.77%)</title><rect x="33.0769%" y="133" width="0.7692%" height="15" fill="rgb(213,28,5)" fg:x="43" fg:w="1"/><text x="33.3269%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::impls::glommio::storage::buffered::BufferedStorage as laminarmq::storage::Sizable&gt;::size (1 samples, 0.77%)</title><rect x="33.8462%" y="133" width="0.7692%" height="15" fill="rgb(215,77,49)" fg:x="44" fg:w="1"/><text x="34.0962%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.77%)</title><rect x="34.6154%" y="133" width="0.7692%" height="15" fill="rgb(248,100,22)" fg:x="45" fg:w="1"/><text x="34.8654%" y="143.50"></text></g><g><title>__rdl_alloc (2 samples, 1.54%)</title><rect x="35.3846%" y="117" width="1.5385%" height="15" fill="rgb(208,67,9)" fg:x="46" fg:w="2"/><text x="35.6346%" y="127.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::_::&lt;impl serde::ser::Serialize for laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;&gt;::serialize (1 samples, 0.77%)</title><rect x="36.9231%" y="117" width="0.7692%" height="15" fill="rgb(219,133,21)" fg:x="48" fg:w="1"/><text x="37.1731%" y="127.50"></text></g><g><title>bincode::internal::serialize (4 samples, 3.08%)</title><rect x="35.3846%" y="133" width="3.0769%" height="15" fill="rgb(246,46,29)" fg:x="46" fg:w="4"/><text x="35.6346%" y="143.50">bin..</text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.77%)</title><rect x="37.6923%" y="117" width="0.7692%" height="15" fill="rgb(246,185,52)" fg:x="49" fg:w="1"/><text x="37.9423%" y="127.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.77%)</title><rect x="37.6923%" y="101" width="0.7692%" height="15" fill="rgb(252,136,11)" fg:x="49" fg:w="1"/><text x="37.9423%" y="111.50"></text></g><g><title>&lt;futures_lite::stream::NextFuture&lt;S&gt; as core::future::future::Future&gt;::poll (7 samples, 5.38%)</title><rect x="41.5385%" y="117" width="5.3846%" height="15" fill="rgb(219,138,53)" fg:x="54" fg:w="7"/><text x="41.7885%" y="127.50">&lt;future..</text></g><g><title>crc32fast::Hasher::update (5 samples, 3.85%)</title><rect x="43.0769%" y="101" width="3.8462%" height="15" fill="rgb(211,51,23)" fg:x="56" fg:w="5"/><text x="43.3269%" y="111.50">crc3..</text></g><g><title>crc32fast::baseline::update_fast_16 (5 samples, 3.85%)</title><rect x="43.0769%" y="85" width="3.8462%" height="15" fill="rgb(247,221,28)" fg:x="56" fg:w="5"/><text x="43.3269%" y="95.50">crc3..</text></g><g><title>&lt;laminarmq::storage::impls::glommio::storage::buffered::BufferedStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (5 samples, 3.85%)</title><rect x="46.9231%" y="117" width="3.8462%" height="15" fill="rgb(251,222,45)" fg:x="61" fg:w="5"/><text x="47.1731%" y="127.50">&lt;lam..</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (1 samples, 0.77%)</title><rect x="50.0000%" y="101" width="0.7692%" height="15" fill="rgb(217,162,53)" fg:x="65" fg:w="1"/><text x="50.2500%" y="111.50"></text></g><g><title>&lt;laminarmq::storage::impls::glommio::storage::buffered::BufferedStorage as laminarmq::storage::Storage&gt;::append_slice (5 samples, 3.85%)</title><rect x="50.7692%" y="117" width="3.8462%" height="15" fill="rgb(229,93,14)" fg:x="66" fg:w="5"/><text x="51.0192%" y="127.50">&lt;lam..</text></g><g><title>malloc (5 samples, 3.85%)</title><rect x="50.7692%" y="101" width="3.8462%" height="15" fill="rgb(209,67,49)" fg:x="66" fg:w="5"/><text x="51.0192%" y="111.50">mall..</text></g><g><title>laminarmq::storage::Storage::append::{{closure}} (26 samples, 20.00%)</title><rect x="38.4615%" y="133" width="20.0000%" height="15" fill="rgb(213,87,29)" fg:x="50" fg:w="26"/><text x="38.7115%" y="143.50">laminarmq::storage::Storage::ap..</text></g><g><title>__libc_free (5 samples, 3.85%)</title><rect x="54.6154%" y="117" width="3.8462%" height="15" fill="rgb(205,151,52)" fg:x="71" fg:w="5"/><text x="54.8654%" y="127.50">__li..</text></g><g><title>&lt;laminarmq::storage::impls::glommio::storage::buffered::BufferedStorage as laminarmq::storage::Storage&gt;::append_slice::{{closure}} (1 samples, 0.77%)</title><rect x="60.7692%" y="117" width="0.7692%" height="15" fill="rgb(253,215,39)" fg:x="79" fg:w="1"/><text x="61.0192%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (1 samples, 0.77%)</title><rect x="60.7692%" y="101" width="0.7692%" height="15" fill="rgb(221,220,41)" fg:x="79" fg:w="1"/><text x="61.0192%" y="111.50"></text></g><g><title>&lt;laminarmq::storage::impls::glommio::storage::buffered::BufferedStorage as laminarmq::storage::Storage&gt;::append_slice (2 samples, 1.54%)</title><rect x="61.5385%" y="117" width="1.5385%" height="15" fill="rgb(218,133,21)" fg:x="80" fg:w="2"/><text x="61.7885%" y="127.50"></text></g><g><title>malloc (2 samples, 1.54%)</title><rect x="61.5385%" y="101" width="1.5385%" height="15" fill="rgb(221,193,43)" fg:x="80" fg:w="2"/><text x="61.7885%" y="111.50"></text></g><g><title>&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt; as laminarmq::storage::commit_log::CommitLog&lt;laminarmq::storage::commit_log::segmented_log::MetaWithIdx&lt;M,Idx&gt;,&lt;S as laminarmq::storage::Storage&gt;::Content&gt;&gt;::append::{{closure}} (50 samples, 38.46%)</title><rect x="26.1538%" y="149" width="38.4615%" height="15" fill="rgb(240,128,52)" fg:x="34" fg:w="50"/><text x="26.4038%" y="159.50">&lt;laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,..</text></g><g><title>laminarmq::storage::commit_log::segmented_log::index::Index&lt;S,Idx&gt;::append::{{closure}} (8 samples, 6.15%)</title><rect x="58.4615%" y="133" width="6.1538%" height="15" fill="rgb(253,114,12)" fg:x="76" fg:w="8"/><text x="58.7115%" y="143.50">laminarm..</text></g><g><title>__libc_free (2 samples, 1.54%)</title><rect x="63.0769%" y="117" width="1.5385%" height="15" fill="rgb(215,223,47)" fg:x="82" fg:w="2"/><text x="63.3269%" y="127.50"></text></g><g><title>__libc_free (2 samples, 1.54%)</title><rect x="64.6154%" y="149" width="1.5385%" height="15" fill="rgb(248,225,23)" fg:x="84" fg:w="2"/><text x="64.8654%" y="159.50"></text></g><g><title>&lt;laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt; as laminarmq::storage::commit_log::segmented_log::segment::SegmentStorageProvider&lt;S,Idx&gt;&gt;::obtain_base_indices_of_stored_segments::{{closure}} (1 samples, 0.77%)</title><rect x="66.9231%" y="133" width="0.7692%" height="15" fill="rgb(250,108,0)" fg:x="87" fg:w="1"/><text x="67.1731%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.77%)</title><rect x="66.9231%" y="117" width="0.7692%" height="15" fill="rgb(228,208,7)" fg:x="87" fg:w="1"/><text x="67.1731%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.77%)</title><rect x="66.9231%" y="101" width="0.7692%" height="15" fill="rgb(244,45,10)" fg:x="87" fg:w="1"/><text x="67.1731%" y="111.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.77%)</title><rect x="66.9231%" y="85" width="0.7692%" height="15" fill="rgb(207,125,25)" fg:x="87" fg:w="1"/><text x="67.1731%" y="95.50"></text></g><g><title>&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.77%)</title><rect x="66.9231%" y="69" width="0.7692%" height="15" fill="rgb(210,195,18)" fg:x="87" fg:w="1"/><text x="67.1731%" y="79.50"></text></g><g><title>readdir (1 samples, 0.77%)</title><rect x="66.9231%" y="53" width="0.7692%" height="15" fill="rgb(249,80,12)" fg:x="87" fg:w="1"/><text x="67.1731%" y="63.50"></text></g><g><title>getdents64 (1 samples, 0.77%)</title><rect x="66.9231%" y="37" width="0.7692%" height="15" fill="rgb(221,65,9)" fg:x="87" fg:w="1"/><text x="67.1731%" y="47.50"></text></g><g><title>laminarmq::storage::commit_log::segmented_log::SegmentedLog&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP,SSP,C&gt;::new::{{closure}} (3 samples, 2.31%)</title><rect x="66.1538%" y="149" width="2.3077%" height="15" fill="rgb(235,49,36)" fg:x="86" fg:w="3"/><text x="66.4038%" y="159.50">l..</text></g><g><title>laminarmq::storage::commit_log::segmented_log::segment::Segment&lt;S,M,H,Idx,&lt;S as laminarmq::storage::Sizable&gt;::Size,SERP&gt;::with_segment_storage_provider_config_and_base_index::{{closure}} (1 samples, 0.77%)</title><rect x="67.6923%" y="133" width="0.7692%" height="15" fill="rgb(225,32,20)" fg:x="88" fg:w="1"/><text x="67.9423%" y="143.50"></text></g><g><title>&lt;laminarmq::storage::impls::common::DiskBackedSegmentStorageProvider&lt;S,PASP,Idx&gt; as laminarmq::storage::commit_log::segmented_log::segment::SegmentStorageProvider&lt;S,Idx&gt;&gt;::obtain::{{closure}} (1 samples, 0.77%)</title><rect x="67.6923%" y="117" width="0.7692%" height="15" fill="rgb(215,141,46)" fg:x="88" fg:w="1"/><text x="67.9423%" y="127.50"></text></g><g><title>&lt;laminarmq::storage::impls::glommio::storage::buffered::BufferedStorageProvider as laminarmq::storage::impls::common::PathAddressedStorageProvider&lt;laminarmq::storage::impls::glommio::storage::buffered::BufferedStorage&gt;&gt;::obtain_storage::{{closure}} (1 samples, 0.77%)</title><rect x="67.6923%" y="101" width="0.7692%" height="15" fill="rgb(250,160,47)" fg:x="88" fg:w="1"/><text x="67.9423%" y="111.50"></text></g><g><title>glommio::io::open_options::OpenOptions::buffered_open::{{closure}} (1 samples, 0.77%)</title><rect x="67.6923%" y="85" width="0.7692%" height="15" fill="rgb(216,222,40)" fg:x="88" fg:w="1"/><text x="67.9423%" y="95.50"></text></g><g><title>malloc (9 samples, 6.92%)</title><rect x="68.4615%" y="149" width="6.9231%" height="15" fill="rgb(234,217,39)" fg:x="89" fg:w="9"/><text x="68.7115%" y="159.50">malloc</text></g><g><title>glommio::executor::LocalExecutor::run_task_queues (76 samples, 58.46%)</title><rect x="17.6923%" y="197" width="58.4615%" height="15" fill="rgb(207,178,40)" fg:x="23" fg:w="76"/><text x="17.9423%" y="207.50">glommio::executor::LocalExecutor::run_task_queues</text></g><g><title>glommio::task::raw::RawTask&lt;F,R,S&gt;::run (75 samples, 57.69%)</title><rect x="18.4615%" y="181" width="57.6923%" height="15" fill="rgb(221,136,13)" fg:x="24" fg:w="75"/><text x="18.7115%" y="191.50">glommio::task::raw::RawTask&lt;F,R,S&gt;::run</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (75 samples, 57.69%)</title><rect x="18.4615%" y="165" width="57.6923%" height="15" fill="rgb(249,199,10)" fg:x="24" fg:w="75"/><text x="18.7115%" y="175.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>scoped_tls::ScopedKey&lt;T&gt;::with (1 samples, 0.77%)</title><rect x="75.3846%" y="149" width="0.7692%" height="15" fill="rgb(249,222,13)" fg:x="98" fg:w="1"/><text x="75.6346%" y="159.50"></text></g><g><title>glommio::reactor::Reactor::run_blocking (1 samples, 0.77%)</title><rect x="75.3846%" y="133" width="0.7692%" height="15" fill="rgb(244,185,38)" fg:x="98" fg:w="1"/><text x="75.6346%" y="143.50"></text></g><g><title>glommio::sys::uring::Reactor::run_blocking (1 samples, 0.77%)</title><rect x="75.3846%" y="117" width="0.7692%" height="15" fill="rgb(236,202,9)" fg:x="98" fg:w="1"/><text x="75.6346%" y="127.50"></text></g><g><title>glommio::sys::uring::Reactor::link_rings_and_sleep (2 samples, 1.54%)</title><rect x="76.1538%" y="149" width="1.5385%" height="15" fill="rgb(250,229,37)" fg:x="99" fg:w="2"/><text x="76.4038%" y="159.50"></text></g><g><title>__io_uring_get_cqe (1 samples, 0.77%)</title><rect x="76.9231%" y="133" width="0.7692%" height="15" fill="rgb(206,174,23)" fg:x="100" fg:w="1"/><text x="77.1731%" y="143.50"></text></g><g><title>_io_uring_get_cqe (1 samples, 0.77%)</title><rect x="76.9231%" y="117" width="0.7692%" height="15" fill="rgb(211,33,43)" fg:x="100" fg:w="1"/><text x="77.1731%" y="127.50"></text></g><g><title>__sys_io_uring_enter2 (1 samples, 0.77%)</title><rect x="76.9231%" y="101" width="0.7692%" height="15" fill="rgb(245,58,50)" fg:x="100" fg:w="1"/><text x="77.1731%" y="111.50"></text></g><g><title>syscall (1 samples, 0.77%)</title><rect x="76.9231%" y="85" width="0.7692%" height="15" fill="rgb(244,68,36)" fg:x="100" fg:w="1"/><text x="77.1731%" y="95.50"></text></g><g><title>&lt;glommio::sys::uring::SleepableRing as glommio::sys::uring::UringCommon&gt;::submit_one_event (1 samples, 0.77%)</title><rect x="77.6923%" y="133" width="0.7692%" height="15" fill="rgb(232,229,15)" fg:x="101" fg:w="1"/><text x="77.9423%" y="143.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1 samples, 0.77%)</title><rect x="77.6923%" y="117" width="0.7692%" height="15" fill="rgb(254,30,23)" fg:x="101" fg:w="1"/><text x="77.9423%" y="127.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_reserve (1 samples, 0.77%)</title><rect x="77.6923%" y="101" width="0.7692%" height="15" fill="rgb(235,160,14)" fg:x="101" fg:w="1"/><text x="77.9423%" y="111.50"></text></g><g><title>malloc (1 samples, 0.77%)</title><rect x="77.6923%" y="85" width="0.7692%" height="15" fill="rgb(212,155,44)" fg:x="101" fg:w="1"/><text x="77.9423%" y="95.50"></text></g><g><title>glommio::sys::uring::UringCommon::consume_submission_queue (6 samples, 4.62%)</title><rect x="77.6923%" y="149" width="4.6154%" height="15" fill="rgb(226,2,50)" fg:x="101" fg:w="6"/><text x="77.9423%" y="159.50">glomm..</text></g><g><title>io_uring_submit (5 samples, 3.85%)</title><rect x="78.4615%" y="133" width="3.8462%" height="15" fill="rgb(234,177,6)" fg:x="102" fg:w="5"/><text x="78.7115%" y="143.50">io_u..</text></g><g><title>__sys_io_uring_enter2 (5 samples, 3.85%)</title><rect x="78.4615%" y="117" width="3.8462%" height="15" fill="rgb(217,24,9)" fg:x="102" fg:w="5"/><text x="78.7115%" y="127.50">__sy..</text></g><g><title>syscall (5 samples, 3.85%)</title><rect x="78.4615%" y="101" width="3.8462%" height="15" fill="rgb(220,13,46)" fg:x="102" fg:w="5"/><text x="78.7115%" y="111.50">sysc..</text></g><g><title>glommio::sys::uring::UringCommon::flush_cancellations (1 samples, 0.77%)</title><rect x="82.3077%" y="149" width="0.7692%" height="15" fill="rgb(239,221,27)" fg:x="107" fg:w="1"/><text x="82.5577%" y="159.50"></text></g><g><title>glommio::sys::uring::UringCommon::consume_cancellation_queue (1 samples, 0.77%)</title><rect x="82.3077%" y="133" width="0.7692%" height="15" fill="rgb(222,198,25)" fg:x="107" fg:w="1"/><text x="82.5577%" y="143.50"></text></g><g><title>&lt;glommio::sys::uring::SleepableRing as glommio::sys::uring::UringCommon&gt;::submit_one_event (1 samples, 0.77%)</title><rect x="82.3077%" y="117" width="0.7692%" height="15" fill="rgb(211,99,13)" fg:x="107" fg:w="1"/><text x="82.5577%" y="127.50"></text></g><g><title>rust_io_uring_prep_nop (1 samples, 0.77%)</title><rect x="82.3077%" y="101" width="0.7692%" height="15" fill="rgb(232,111,31)" fg:x="107" fg:w="1"/><text x="82.5577%" y="111.50"></text></g><g><title>glommio::parking::Parker::park (10 samples, 7.69%)</title><rect x="76.1538%" y="197" width="7.6923%" height="15" fill="rgb(245,82,37)" fg:x="99" fg:w="10"/><text x="76.4038%" y="207.50">glommio::pa..</text></g><g><title>glommio::reactor::Reactor::react (10 samples, 7.69%)</title><rect x="76.1538%" y="181" width="7.6923%" height="15" fill="rgb(227,149,46)" fg:x="99" fg:w="10"/><text x="76.4038%" y="191.50">glommio::re..</text></g><g><title>glommio::sys::uring::Reactor::wait (10 samples, 7.69%)</title><rect x="76.1538%" y="165" width="7.6923%" height="15" fill="rgb(218,36,50)" fg:x="99" fg:w="10"/><text x="76.4038%" y="175.50">glommio::sy..</text></g><g><title>syscall (1 samples, 0.77%)</title><rect x="83.0769%" y="149" width="0.7692%" height="15" fill="rgb(226,80,48)" fg:x="108" fg:w="1"/><text x="83.3269%" y="159.50"></text></g><g><title>glommio::sys::uring::UringCommon::consume_submission_queue (6 samples, 4.62%)</title><rect x="83.8462%" y="165" width="4.6154%" height="15" fill="rgb(238,224,15)" fg:x="109" fg:w="6"/><text x="84.0962%" y="175.50">glomm..</text></g><g><title>&lt;glommio::sys::uring::SleepableRing as glommio::sys::uring::UringCommon&gt;::submit_sqes (4 samples, 3.08%)</title><rect x="85.3846%" y="149" width="3.0769%" height="15" fill="rgb(241,136,10)" fg:x="111" fg:w="4"/><text x="85.6346%" y="159.50">&lt;gl..</text></g><g><title>io_uring_submit (4 samples, 3.08%)</title><rect x="85.3846%" y="133" width="3.0769%" height="15" fill="rgb(208,32,45)" fg:x="111" fg:w="4"/><text x="85.6346%" y="143.50">io_..</text></g><g><title>__sys_io_uring_enter2 (4 samples, 3.08%)</title><rect x="85.3846%" y="117" width="3.0769%" height="15" fill="rgb(207,135,9)" fg:x="111" fg:w="4"/><text x="85.6346%" y="127.50">__s..</text></g><g><title>syscall (4 samples, 3.08%)</title><rect x="85.3846%" y="101" width="3.0769%" height="15" fill="rgb(206,86,44)" fg:x="111" fg:w="4"/><text x="85.6346%" y="111.50">sys..</text></g><g><title>glommio::parking::Parker::poll_io (7 samples, 5.38%)</title><rect x="83.8462%" y="197" width="5.3846%" height="15" fill="rgb(245,177,15)" fg:x="109" fg:w="7"/><text x="84.0962%" y="207.50">glommio..</text></g><g><title>glommio::sys::uring::Reactor::wait (7 samples, 5.38%)</title><rect x="83.8462%" y="181" width="5.3846%" height="15" fill="rgb(206,64,50)" fg:x="109" fg:w="7"/><text x="84.0962%" y="191.50">glommio..</text></g><g><title>glommio::sys::uring::UringCommon::flush_cancellations (1 samples, 0.77%)</title><rect x="88.4615%" y="165" width="0.7692%" height="15" fill="rgb(234,36,40)" fg:x="115" fg:w="1"/><text x="88.7115%" y="175.50"></text></g><g><title>&lt;glommio::sys::uring::SleepableRing as glommio::sys::uring::UringCommon&gt;::submit_one_event (1 samples, 0.77%)</title><rect x="88.4615%" y="149" width="0.7692%" height="15" fill="rgb(213,64,8)" fg:x="115" fg:w="1"/><text x="88.7115%" y="159.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1 samples, 0.77%)</title><rect x="88.4615%" y="133" width="0.7692%" height="15" fill="rgb(210,75,36)" fg:x="115" fg:w="1"/><text x="88.7115%" y="143.50"></text></g><g><title>&lt;glommio::sys::uring::SleepableRing as glommio::sys::uring::UringCommon&gt;::submit_one_event (1 samples, 0.77%)</title><rect x="89.2308%" y="133" width="0.7692%" height="15" fill="rgb(229,88,21)" fg:x="116" fg:w="1"/><text x="89.4808%" y="143.50"></text></g><g><title>glommio::reactor::Reactor::spin_poll_io (4 samples, 3.08%)</title><rect x="89.2308%" y="197" width="3.0769%" height="15" fill="rgb(252,204,47)" fg:x="116" fg:w="4"/><text x="89.4808%" y="207.50">glo..</text></g><g><title>glommio::sys::uring::Reactor::poll_io (4 samples, 3.08%)</title><rect x="89.2308%" y="181" width="3.0769%" height="15" fill="rgb(208,77,27)" fg:x="116" fg:w="4"/><text x="89.4808%" y="191.50">glo..</text></g><g><title>glommio::sys::uring::UringCommon::poll (4 samples, 3.08%)</title><rect x="89.2308%" y="165" width="3.0769%" height="15" fill="rgb(221,76,26)" fg:x="116" fg:w="4"/><text x="89.4808%" y="175.50">glo..</text></g><g><title>glommio::sys::uring::UringCommon::consume_submission_queue (4 samples, 3.08%)</title><rect x="89.2308%" y="149" width="3.0769%" height="15" fill="rgb(225,139,18)" fg:x="116" fg:w="4"/><text x="89.4808%" y="159.50">glo..</text></g><g><title>io_uring_submit (3 samples, 2.31%)</title><rect x="90.0000%" y="133" width="2.3077%" height="15" fill="rgb(230,137,11)" fg:x="117" fg:w="3"/><text x="90.2500%" y="143.50">i..</text></g><g><title>__sys_io_uring_enter2 (3 samples, 2.31%)</title><rect x="90.0000%" y="117" width="2.3077%" height="15" fill="rgb(212,28,1)" fg:x="117" fg:w="3"/><text x="90.2500%" y="127.50">_..</text></g><g><title>syscall (3 samples, 2.31%)</title><rect x="90.0000%" y="101" width="2.3077%" height="15" fill="rgb(248,164,17)" fg:x="117" fg:w="3"/><text x="90.2500%" y="111.50">s..</text></g><g><title>_start (120 samples, 92.31%)</title><rect x="0.7692%" y="533" width="92.3077%" height="15" fill="rgb(222,171,42)" fg:x="1" fg:w="120"/><text x="1.0192%" y="543.50">_start</text></g><g><title>__libc_start_main (120 samples, 92.31%)</title><rect x="0.7692%" y="517" width="92.3077%" height="15" fill="rgb(243,84,45)" fg:x="1" fg:w="120"/><text x="1.0192%" y="527.50">__libc_start_main</text></g><g><title>main (120 samples, 92.31%)</title><rect x="0.7692%" y="501" width="92.3077%" height="15" fill="rgb(252,49,23)" fg:x="1" fg:w="120"/><text x="1.0192%" y="511.50">main</text></g><g><title>std::rt::lang_start_internal (120 samples, 92.31%)</title><rect x="0.7692%" y="485" width="92.3077%" height="15" fill="rgb(215,19,7)" fg:x="1" fg:w="120"/><text x="1.0192%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (120 samples, 92.31%)</title><rect x="0.7692%" y="469" width="92.3077%" height="15" fill="rgb(238,81,41)" fg:x="1" fg:w="120"/><text x="1.0192%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (120 samples, 92.31%)</title><rect x="0.7692%" y="453" width="92.3077%" height="15" fill="rgb(210,199,37)" fg:x="1" fg:w="120"/><text x="1.0192%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (120 samples, 92.31%)</title><rect x="0.7692%" y="437" width="92.3077%" height="15" fill="rgb(244,192,49)" fg:x="1" fg:w="120"/><text x="1.0192%" y="447.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (120 samples, 92.31%)</title><rect x="0.7692%" y="421" width="92.3077%" height="15" fill="rgb(226,211,11)" fg:x="1" fg:w="120"/><text x="1.0192%" y="431.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (120 samples, 92.31%)</title><rect x="0.7692%" y="405" width="92.3077%" height="15" fill="rgb(236,162,54)" fg:x="1" fg:w="120"/><text x="1.0192%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (120 samples, 92.31%)</title><rect x="0.7692%" y="389" width="92.3077%" height="15" fill="rgb(220,229,9)" fg:x="1" fg:w="120"/><text x="1.0192%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (120 samples, 92.31%)</title><rect x="0.7692%" y="373" width="92.3077%" height="15" fill="rgb(250,87,22)" fg:x="1" fg:w="120"/><text x="1.0192%" y="383.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (120 samples, 92.31%)</title><rect x="0.7692%" y="357" width="92.3077%" height="15" fill="rgb(239,43,17)" fg:x="1" fg:w="120"/><text x="1.0192%" y="367.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (120 samples, 92.31%)</title><rect x="0.7692%" y="341" width="92.3077%" height="15" fill="rgb(231,177,25)" fg:x="1" fg:w="120"/><text x="1.0192%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (120 samples, 92.31%)</title><rect x="0.7692%" y="325" width="92.3077%" height="15" fill="rgb(219,179,1)" fg:x="1" fg:w="120"/><text x="1.0192%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>commit_log_append::main (120 samples, 92.31%)</title><rect x="0.7692%" y="309" width="92.3077%" height="15" fill="rgb(238,219,53)" fg:x="1" fg:w="120"/><text x="1.0192%" y="319.50">commit_log_append::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (120 samples, 92.31%)</title><rect x="0.7692%" y="293" width="92.3077%" height="15" fill="rgb(232,167,36)" fg:x="1" fg:w="120"/><text x="1.0192%" y="303.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>criterion::routine::Routine::profile (120 samples, 92.31%)</title><rect x="0.7692%" y="277" width="92.3077%" height="15" fill="rgb(244,19,51)" fg:x="1" fg:w="120"/><text x="1.0192%" y="287.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (120 samples, 92.31%)</title><rect x="0.7692%" y="261" width="92.3077%" height="15" fill="rgb(224,6,22)" fg:x="1" fg:w="120"/><text x="1.0192%" y="271.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom (98 samples, 75.38%)</title><rect x="17.6923%" y="245" width="75.3846%" height="15" fill="rgb(224,145,5)" fg:x="23" fg:w="98"/><text x="17.9423%" y="255.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter_custom</text></g><g><title>glommio::executor::LocalExecutor::run (98 samples, 75.38%)</title><rect x="17.6923%" y="229" width="75.3846%" height="15" fill="rgb(234,130,49)" fg:x="23" fg:w="98"/><text x="17.9423%" y="239.50">glommio::executor::LocalExecutor::run</text></g><g><title>scoped_tls::ScopedKey&lt;T&gt;::set (98 samples, 75.38%)</title><rect x="17.6923%" y="213" width="75.3846%" height="15" fill="rgb(254,6,2)" fg:x="23" fg:w="98"/><text x="17.9423%" y="223.50">scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.77%)</title><rect x="92.3077%" y="197" width="0.7692%" height="15" fill="rgb(208,96,46)" fg:x="120" fg:w="1"/><text x="92.5577%" y="207.50"></text></g><g><title>clock_gettime (1 samples, 0.77%)</title><rect x="92.3077%" y="181" width="0.7692%" height="15" fill="rgb(239,3,39)" fg:x="120" fg:w="1"/><text x="92.5577%" y="191.50"></text></g><g><title>std::sys::unix::fs::remove_dir_impl::openat_nofollow_dironly (3 samples, 2.31%)</title><rect x="93.0769%" y="325" width="2.3077%" height="15" fill="rgb(233,210,1)" fg:x="121" fg:w="3"/><text x="93.3269%" y="335.50">s..</text></g><g><title>std::sys::unix::cvt_r (3 samples, 2.31%)</title><rect x="93.0769%" y="309" width="2.3077%" height="15" fill="rgb(244,137,37)" fg:x="121" fg:w="3"/><text x="93.3269%" y="319.50">s..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::openat_nofollow_dironly::{{closure}} (3 samples, 2.31%)</title><rect x="93.0769%" y="293" width="2.3077%" height="15" fill="rgb(240,136,2)" fg:x="121" fg:w="3"/><text x="93.3269%" y="303.50">s..</text></g><g><title>openat (3 samples, 2.31%)</title><rect x="93.0769%" y="277" width="2.3077%" height="15" fill="rgb(239,18,37)" fg:x="121" fg:w="3"/><text x="93.3269%" y="287.50">o..</text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (5 samples, 3.85%)</title><rect x="93.0769%" y="389" width="3.8462%" height="15" fill="rgb(218,185,22)" fg:x="121" fg:w="5"/><text x="93.3269%" y="399.50">std:..</text></g><g><title>std::sys::common::small_c_string::run_with_cstr (5 samples, 3.85%)</title><rect x="93.0769%" y="373" width="3.8462%" height="15" fill="rgb(225,218,4)" fg:x="121" fg:w="5"/><text x="93.3269%" y="383.50">std:..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern::{{closure}} (5 samples, 3.85%)</title><rect x="93.0769%" y="357" width="3.8462%" height="15" fill="rgb(230,182,32)" fg:x="121" fg:w="5"/><text x="93.3269%" y="367.50">std:..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_recursive (5 samples, 3.85%)</title><rect x="93.0769%" y="341" width="3.8462%" height="15" fill="rgb(242,56,43)" fg:x="121" fg:w="5"/><text x="93.3269%" y="351.50">std:..</text></g><g><title>unlinkat (2 samples, 1.54%)</title><rect x="95.3846%" y="325" width="1.5385%" height="15" fill="rgb(233,99,24)" fg:x="124" fg:w="2"/><text x="95.6346%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6 samples, 4.62%)</title><rect x="93.0769%" y="517" width="4.6154%" height="15" fill="rgb(234,209,42)" fg:x="121" fg:w="6"/><text x="93.3269%" y="527.50">&lt;allo..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6 samples, 4.62%)</title><rect x="93.0769%" y="501" width="4.6154%" height="15" fill="rgb(227,7,12)" fg:x="121" fg:w="6"/><text x="93.3269%" y="511.50">&lt;allo..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6 samples, 4.62%)</title><rect x="93.0769%" y="485" width="4.6154%" height="15" fill="rgb(245,203,43)" fg:x="121" fg:w="6"/><text x="93.3269%" y="495.50">core:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 4.62%)</title><rect x="93.0769%" y="469" width="4.6154%" height="15" fill="rgb(238,205,33)" fg:x="121" fg:w="6"/><text x="93.3269%" y="479.50">std::..</text></g><g><title>glommio::sys::blocking::BlockingThreadOp::execute (6 samples, 4.62%)</title><rect x="93.0769%" y="453" width="4.6154%" height="15" fill="rgb(231,56,7)" fg:x="121" fg:w="6"/><text x="93.3269%" y="463.50">glomm..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6 samples, 4.62%)</title><rect x="93.0769%" y="437" width="4.6154%" height="15" fill="rgb(244,186,29)" fg:x="121" fg:w="6"/><text x="93.3269%" y="447.50">core:..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all (6 samples, 4.62%)</title><rect x="93.0769%" y="421" width="4.6154%" height="15" fill="rgb(234,111,31)" fg:x="121" fg:w="6"/><text x="93.3269%" y="431.50">std::..</text></g><g><title>std::sys::unix::fs::remove_dir_impl::remove_dir_all_modern (6 samples, 4.62%)</title><rect x="93.0769%" y="405" width="4.6154%" height="15" fill="rgb(241,149,10)" fg:x="121" fg:w="6"/><text x="93.3269%" y="415.50">std::..</text></g><g><title>std::sys::unix::fs::lstat (1 samples, 0.77%)</title><rect x="96.9231%" y="389" width="0.7692%" height="15" fill="rgb(249,206,44)" fg:x="126" fg:w="1"/><text x="97.1731%" y="399.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.77%)</title><rect x="96.9231%" y="373" width="0.7692%" height="15" fill="rgb(251,153,30)" fg:x="126" fg:w="1"/><text x="97.1731%" y="383.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.77%)</title><rect x="96.9231%" y="357" width="0.7692%" height="15" fill="rgb(239,152,38)" fg:x="126" fg:w="1"/><text x="97.1731%" y="367.50"></text></g><g><title>std::sys::unix::fs::lstat::{{closure}} (1 samples, 0.77%)</title><rect x="96.9231%" y="341" width="0.7692%" height="15" fill="rgb(249,139,47)" fg:x="126" fg:w="1"/><text x="97.1731%" y="351.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.77%)</title><rect x="96.9231%" y="325" width="0.7692%" height="15" fill="rgb(244,64,35)" fg:x="126" fg:w="1"/><text x="97.1731%" y="335.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.77%)</title><rect x="96.9231%" y="309" width="0.7692%" height="15" fill="rgb(216,46,15)" fg:x="126" fg:w="1"/><text x="97.1731%" y="319.50"></text></g><g><title>statx (1 samples, 0.77%)</title><rect x="96.9231%" y="293" width="0.7692%" height="15" fill="rgb(250,74,19)" fg:x="126" fg:w="1"/><text x="97.1731%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (1 samples, 0.77%)</title><rect x="97.6923%" y="517" width="0.7692%" height="15" fill="rgb(249,42,33)" fg:x="127" fg:w="1"/><text x="97.9423%" y="527.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.77%)</title><rect x="97.6923%" y="501" width="0.7692%" height="15" fill="rgb(242,149,17)" fg:x="127" fg:w="1"/><text x="97.9423%" y="511.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.77%)</title><rect x="97.6923%" y="485" width="0.7692%" height="15" fill="rgb(244,29,21)" fg:x="127" fg:w="1"/><text x="97.9423%" y="495.50"></text></g><g><title>__munmap (1 samples, 0.77%)</title><rect x="97.6923%" y="469" width="0.7692%" height="15" fill="rgb(220,130,37)" fg:x="127" fg:w="1"/><text x="97.9423%" y="479.50"></text></g><g><title>all (130 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(211,67,2)" fg:x="0" fg:w="130"/><text x="0.2500%" y="575.50"></text></g><g><title>commit_log_appe (130 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(235,68,52)" fg:x="0" fg:w="130"/><text x="0.2500%" y="559.50">commit_log_appe</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9 samples, 6.92%)</title><rect x="93.0769%" y="533" width="6.9231%" height="15" fill="rgb(246,142,3)" fg:x="121" fg:w="9"/><text x="93.3269%" y="543.50">std::sys:..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (2 samples, 1.54%)</title><rect x="98.4615%" y="517" width="1.5385%" height="15" fill="rgb(241,25,7)" fg:x="128" fg:w="2"/><text x="98.7115%" y="527.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (2 samples, 1.54%)</title><rect x="98.4615%" y="501" width="1.5385%" height="15" fill="rgb(242,119,39)" fg:x="128" fg:w="2"/><text x="98.7115%" y="511.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (2 samples, 1.54%)</title><rect x="98.4615%" y="485" width="1.5385%" height="15" fill="rgb(241,98,45)" fg:x="128" fg:w="2"/><text x="98.7115%" y="495.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (2 samples, 1.54%)</title><rect x="98.4615%" y="469" width="1.5385%" height="15" fill="rgb(254,28,30)" fg:x="128" fg:w="2"/><text x="98.7115%" y="479.50"></text></g><g><title>mmap64 (2 samples, 1.54%)</title><rect x="98.4615%" y="453" width="1.5385%" height="15" fill="rgb(241,142,54)" fg:x="128" fg:w="2"/><text x="98.7115%" y="463.50"></text></g></svg></svg>